{
    parserClass='edu.clemson.resolve.plugin.parser.ResParser'

    implements='edu.clemson.resolve.plugin.psi.ResCompositeElement'
    extends='edu.clemson.resolve.plugin.psi.impl.ResCompositeElementImpl'

    elementTypeHolderClass='edu.clemson.resolve.plugin.ResTypes'
    elementTypeClass='edu.clemson.resolve.plugin.psi.ResCompositeElementType'
    tokenTypeClass='edu.clemson.resolve.plugin.psi.ResTokenType'

    psiClassPrefix='Res'
    psiImplClassSuffix='Impl'
    psiPackage='edu.clemson.resolve.plugin.psi'
    psiImplPackage='edu.clemson.resolve.plugin.psi.impl'
    psiImplUtilClass="edu.clemson.resolve.plugin.psi.impl.ResPsiImplUtil"

    tokens=[
        // Punctuation
        AT                      = '@'
        TRIPLE_DOT              = '...'
        DOT_DOT                 = '..'
        DOT                     = '.'
        DBL_LBRACE              = '{{'
        LBRACE                  = '{'
        RBRACE                  = '}'
        DBL_RBRACE              = '}}'
        LBRACK                  = '['
        RBRACK                  = ']'
        LPAREN                  = '('
        RPAREN                  = ')'
        COLON                   = ':'
        COLONCOLON              = '::'
        SEMICOLON               = ';'
        COMMA                   = ','
        IND_BASE                = '(i.)'
        IND_HYPO                = '(ii.)'

        // Operators
        EQUALS                  = '='
        NEQUALS                 = '/='

        AND                     = 'and'
        OR                      = 'or'
        NOT                     = 'not'
        CAT                     = 'o'

        TRUE                    = 'true'
        FALSE                   = 'false'

        LESS_OR_EQUAL           = '<='
        LESS                    = '<'
        GREATER_OR_EQUAL        = '>='
        GREATER                 = '>'

        MOD                     = '%'
        MUL                     = '*'
        QUOTIENT                = '/'
        PLUS_PLUS               = '++'
        PLUS                    = '+'
        MINUS_MINUS             = '--'
        MINUS                   = '-'

        COLON_EQUALS            = ':='
        COLON_EQUALS_COLON      = ':=:'
        RARROW                  = '->'
        TILDE                   = '~'
        BAR                     = '|'
        DBL_BAR                 = '||'

        // Keywords
        INT                     = 'int'
        FACILITY                = 'Facility'
        PRECIS                  = 'Precis'
        BASE                    = 'base'
        HYPO                    = 'hypo'
        CONCEPT                 = 'Concept'
        EXTENSION               = 'Extension'
        EXTENDED_BY             = 'extended_by'
        CART_PROD               = 'Cart_Prod'
        DEFINITION              = 'Definition'
        CONSTRAINTS             = 'constraints'
        CONVENTIONS             = 'conventions'
        CORRESPONDENCE          = 'correspondence'
        EXTENSION               = 'Extension'
        END                     = 'end'
        ELSE                    = 'else'
        USES                    = 'uses'
        IS                      = 'is'
        IF                      = 'if'
        PROG_IF                 = 'If'
        CHANGING                = 'changing'
        MAINTAINING             = 'maintaining'
        DECREASING              = 'decreasing'
        OTHERWISE               = 'otherwise'
        FORALL                  = 'Forall'
        EXISTS                  = 'Exists'
        EXTERNALLY              = 'externally'
        IMPLEMENTED             = 'implemented'
        INITIALIZATION          = 'initialization'
        IMPLEMENTATION          = 'Implementation'
        INDUCTIVE               = 'Inductive'
        IMPLICIT                = 'Implicit'
        THEOREM                 = 'Theorem'
        COROLLARY               = 'Corollary'
        LAMBDA                  = 'lambda'
        FAMILY_TYPE             = 'Type'
        PARAM_TYPE              = 'type'
        FAMILY                  = 'Family'
        FOR                     = 'for'
        MODELED                 = 'modeled'
        CATEGORICAL             = 'Categorical'
        EXEMPLAR                = 'exemplar'
        OPERATION               = 'Operation'
        RECURSIVE               = 'Recursive'
        RECORD                  = 'Record'
        REQUIRES                = 'requires'
        ENSURES                 = 'ensures'
        PROCEDURE               = 'Procedure'
        VAR                     = 'Var'
        BY                      = 'by'
        THEN                    = 'then'
        WHILE                   = 'While'
        WITH                    = 'with'
        DO                      = 'do'
        STRING                  = 'string'
        WHICH_ENTAILS           = 'which_entails'
        CHAR                    = 'char'
        raw_string              = 'raw_string'

        // Parameter modes
        ALTERS                  = 'alters'
        UPDATES                 = 'updates'
        CLEARS                  = 'clears'
        RESTORES                = 'restores'
        PRESERVES               = 'preserves'
        REPLACES                = 'replaces'
        EVALUATES               = 'evaluates'

        //these two are so grammarkit's live preview feature will work right,
        //disregard them otherwise
        space                   = "regexp:\s+"
        identifier              = 'regexp:\p{Alpha}\w*'
    ]

    extends("Math.*(DefinitionDecl)")="edu.clemson.resolve.plugin.psi.impl.ResAbstractMathDefinitionDeclImpl"
    extends("Math.*(Signature)")="edu.clemson.resolve.plugin.psi.impl.ResAbstractMathSignatureImpl"
    extends(".*ModuleDecl")="edu.clemson.resolve.plugin.psi.impl.ResAbstractModuleDeclImpl"
    extends(".*(Def|MathTheoremDecl)|ModuleSpec")="edu.clemson.resolve.plugin.psi.impl.ResNamedElementImpl"

    implements(".*ModuleDecl")="edu.clemson.resolve.plugin.psi.ResModuleDecl"
    implements(".*ReferenceExp")="edu.clemson.resolve.plugin.psi.ResReferenceExpBase"
    implements("Math.*Signature")="edu.clemson.resolve.plugin.psi.ResMathDefinitionSignature"
    implements("Math.*DefinitionDecl")="edu.clemson.resolve.plugin.psi.ResMathDefinitionDecl"
    implements(".*(Def|MathTheoremDecl)|ModuleSpec")="edu.clemson.resolve.plugin.psi.ResNamedElement"
    implements(".*Block")="edu.clemson.resolve.plugin.psi.ResBlock"

    extends("Math(Minus|Plus|Div|Mult|Custom)InfixApplyExp")=MathInfixApplyExp // this attributes can be placed directly after rule

    extends("Math.*(Exp)")=MathExp

    generateTokenAccessors=true
    pin('.*List(?:_\d.*)?')=1
}

ModuleDecl ::= PrecisModuleDecl | PrecisExtensionModuleDecl <<eof>>

PrecisExtensionModuleDecl ::= 'Precis' 'Extension' identifier 'for'
ModuleSpec ('extended_by' ModuleSpec)? ';'
PrecisBlock
'end' identifier ';' {pin(".*")=2}

PrecisModuleDecl ::= 'Precis' identifier ';'
UsesItemList?
PrecisBlock
'end' identifier ';' {pin(".*")=2}

UsesItemList ::= 'uses' UsesItem (',' UsesItem)* ';'

ModuleSpec ::= identifier {pin=1 methods=[getReferences resolve getModuleSpecTextRange]}

UsesItem ::= ModuleSpec

PrecisBlock ::= PrecisItem* {methods=[processDeclarations] recoverWhile=ItemsRecover}

private ItemsRecover ::= !('end')

private PrecisItem ::=
          MathTheoremDecl
        | MathStandardDefinitionDecl
        | MathCategoricalDefinitionDecl
        | MathInductiveDefinitionDecl {pin=1 recoverWhile=PrecisItemRecover}

private PrecisItemRecover ::= !('Definition'|'Implicit'|'Theorem'|'Corollary'|'Categorical'|'Inductive'|'end')

// -------------------------------------------------
//  M A T H   C O N S T R U C T S   &   E X P R S
// -------------------------------------------------

MathTheoremDecl ::= ('Theorem'|'Corollary') identifier ':'
MathAssertionExp ';' {pin = 2}

MathStandardDefinitionDecl ::= ('Implicit')? 'Definition'
    MathDefinitionSignature ('is' MathAssertionExp)? ';' {pin=2}

MathCategoricalDefinitionDecl ::= 'Categorical' 'Definition' 'for'
CategoricalSigList 'is' MathExp ';' {pin=1}

private CategoricalSigList ::= MathPrefixDefinitionSignature
(',' MathPrefixDefinitionSignature)* {recoverWhile=CategoricalSigListRec}

private CategoricalSigListRec ::= !('is')

MathInductiveDefinitionDecl ::= 'Inductive' 'Definition'
MathDefinitionSignature 'is'
'(i.)' MathExp ';'
'(ii.)' MathExp ';' {pin=1}

private MathDefinitionSignature ::=
           MathPrefixDefinitionSignature
        |  MathOutfixDefinitionSignature
        |  MathInfixDefinitionSignature

MathPrefixDefinitionSignature ::=
          MathNameIdentifier MathDefinitionParams? ':' MathExp {pin=1}

MathInfixDefinitionSignature ::=
        '(' MathSingletonVarDecl ')' MathNameIdentifier
        '(' MathSingletonVarDecl ')' ':' MathExp {pin=4}

private MathDefinitionParams ::= '(' MathDefinitionParamList ')' { pin=1}
private ParamListRec ::= !(')')
private MathDefinitionParamList ::= MathVarDeclGroup (',' MathVarDeclGroup)* {pin=1 recoverWhile=ParamListRec}

MathOutfixDefinitionSignature ::=
        ('|'|'||') MathSingletonVarDecl ('|'|'||')  ':' MathExp {pin=1}

MathSingletonVarDecl ::= MathVarDef ':' MathExp {pin=2 extends=MathVarDeclGroup}

MathVarDeclGroup ::= MathVarDeclList ':' MathExp {pin=1}
private MathVarDeclList ::= MathVarDef &(!(')')) (',' MathVarDef)* {pin=1}
MathVarDef ::= identifier

MathAssertionExp ::= MathQuantifiedExp|MathExp

MathQuantifiedExp ::= ('Forall'|'Exists') MathVarDeclGroup ',' MathAssertionExp {pin=1}

MathExp ::=
      MathBooleanInfixApplyExp
    | MathRelationalInfixApplyExp
    | MathRangeApplyExp
    | MathAddGroup
    | MathMultGroup
    | MathCatInfixApplyExp
    | MathPrefixApplyExp
    | MathCustomInfixApplyExp
    | MathPrimary

//private rules for operators with the same precedence
private MathAddGroup ::= MathPlusInfixApplyExp | MathMinusInfixApplyExp
private MathMultGroup ::= MathMultInfixApplyExp | MathDivInfixApplyExp

MathPlusInfixApplyExp ::= MathExp '+' MathExp
MathMinusInfixApplyExp ::= MathExp ('-'|'~') MathExp
MathBooleanInfixApplyExp ::= MathExp ('and'|'or') MathExp
MathMultInfixApplyExp ::= MathExp '*' MathExp
MathDivInfixApplyExp ::= MathExp '/' MathExp
MathCatInfixApplyExp ::= MathExp 'o' MathExp
MathRangeApplyExp ::= MathExp '->' MathExp

MathRelationalInfixApplyExp ::= MathExp ('<' | '>' | '<=' | '>=' | '=' | '/=') MathExp
MathCustomInfixApplyExp ::= MathExp identifier MathExp

MathTypeAssertionExp ::= MathExp ':' MathExp {pin=2}
MathNestedExp ::= '(' MathAssertionExp ')'

private MathPrimary ::=
          MathSymbolExp
        | MathTypeAssertionExp
        | MathSetComprehensionExp
        | MathNestedExp
        | MathSetExp
        | MathOutfixApplyExp
        | MathLiteralExp

fake MathInfixApplyExp ::= MathExp+ {
  methods=[left="MathExp[0]" right="MathExp[1]"]
}

MathOutfixApplyExp ::=
      '<' MathExp '>'
    | '|' MathExp '|'
    | '||' MathExp '||'

MathPrefixApplyExp ::=
    MathExp '(' MathArgList')' {pin=2}

private MathArgList ::= MathExp (',' MathExp)* {pin=1 recoverWhile=ParamListRec}

MathSymbolExp ::= MathReferenceExp MathQualifiedReferenceExp? {elementType=MathReferenceExp}

left MathQualifiedReferenceExp ::= '::' MathNameIdentifier {elementType=MathReferenceExp}

MathReferenceExp ::= MathNameIdentifier {methods=[getReference getQualifier getIdentifier] extends=MathExp}

MathSetComprehensionExp ::= '{' MathSingletonVarDecl '|' MathExp '}'

MathSetExp ::= '{' MathSetElementsList? '}' {pin=2}

MathSetElementsList ::= MathExp (',' MathExp)* {recoverWhile=MathSetEleRecover}

private MathSetEleRecover ::= !('}')
MathLiteralExp ::= (int|'true'|'false')

MathNameIdentifier ::= identifier|('and'|'or'|'not'|'o'|'true'|'false'|int|'+'|'-')