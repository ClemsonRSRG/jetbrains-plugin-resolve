{
    parserClass='edu.clemson.resolve.jetbrains.parser.ResParser'

    implements='edu.clemson.resolve.jetbrains.psi.ResCompositeElement'
    extends='edu.clemson.resolve.jetbrains.psi.impl.ResCompositeElementImpl'

    elementTypeHolderClass='edu.clemson.resolve.jetbrains.ResTypes'
    elementTypeClass='edu.clemson.resolve.jetbrains.psi.ResCompositeElementType'
    tokenTypeClass='edu.clemson.resolve.jetbrains.psi.ResTokenType'

    psiClassPrefix='Res'
    psiImplClassSuffix='Impl'
    psiPackage='edu.clemson.resolve.jetbrains.psi'
    psiImplPackage='edu.clemson.resolve.jetbrains.psi.impl'
    psiImplUtilClass="edu.clemson.resolve.jetbrains.psi.impl.ResPsiImplUtil"

    tokens=[
        // Punctuation
        POUND                   = '#'
        TRIPLE_DOT              = '...'
        DOT_DOT                 = '..'
        DOT                     = '.'
        DBL_LBRACE              = '{{'
        LBRACE                  = '{'
        RBRACE                  = '}'
        DBL_RBRACE              = '}}'

        DBL_BAR                 = '∥'
        LANGLE                  = '⟨'
        RANGLE                  = '⟩'
        LCEIL                   = '⌈'
        RCEIL                   = '⌉'
        LCUP                    = '⎝'
        RCUP                    = '⎠'
        LBRACK                  = '['
        RBRACK                  = ']'
        LPAREN                  = '('
        RPAREN                  = ')'
        COLON                   = ':'
        COLON_COLON             = '::'
        PRIME                   = '′'
        BAR                     = '|'
        SEMICOLON               = ';'
        COMMA                   = ','
        IND_BASE                = '(i.)'
        IND_HYPO                = '(ii.)'
        TRUE                    = 'true'
        FALSE                   = 'false'

        FORALL                  = '∀'
        EXISTS                  = '∃'
        LAMBDA                  = 'λ'
        COLON_EQUALS            = ':='
        COLON_EQUALS_COLON      = ':=:'

        FACILITY                = 'Facility'
        PRECIS                  = 'Precis'
        CONCEPT                 = 'Concept'
        EXTENSION               = 'Extension'
        CART_PROD               = 'Cart_Prod'
        DEFINES                 = 'Defines'
        DEFINITION              = 'Definition'
        CHAINABLE               = 'Chainable'
        CLASSIFICATION          = 'Classification'
        ENHANCEMENT             = 'Enhancement'
        EXTENSION               = 'Extension'
        PROG_IF                 = 'If'
        REALIZATION             = 'Realization'
        INDUCTIVE               = 'Inductive'
        IMPLICIT                = 'Implicit'
        THEOREM                 = 'Theorem'
        COROLLARY               = 'Corollary'
        FAMILY_TYPE             = 'Type'
        PARAM_TYPE              = 'type'
        CATEGORICAL             = 'Categorical'
        OPERATION               = 'Operation'
        RECURSIVE               = 'Recursive'
        RECORD                  = 'Record'
        PROCEDURE               = 'Procedure'
        VAR                     = 'Var'
        WHILE                   = 'While'
        NOTICE                  = 'Notice'

        //these two are so grammarkit's live preview feature will work right,
        //disregard them otherwise
        space                   = "regexp:\s+"
        identifier              = 'regexp:\p{Alpha}\w*'
        int                     = 'int'
        char                    = 'char'
        raw_string              = 'raw_string'
    ]

    implements("Math.*DefnDecl")="edu.clemson.resolve.jetbrains.psi.ResMathDefnDecl"
    implements(".*ModuleDecl")="edu.clemson.resolve.jetbrains.psi.ResModuleDecl"
    implements("Math(Prefix|Infix|Outfix|Postfix)(DefnSig)")="edu.clemson.resolve.jetbrains.psi.ResMathDefnSig"
    implements("(Procedure|Operation)Decl|OperationProcedureDecl")="edu.clemson.resolve.jetbrains.psi.ResOperationLikeNode"
    implements(".*ReferenceExp")="edu.clemson.resolve.jetbrains.psi.ResReferenceExpBase"
    implements("(Spec|Impl)ModuleParameters")="edu.clemson.resolve.jetbrains.psi.ResModuleParameters"
    implements(".*((Var|Param|Field)Def|(MathTheorem|TypeParam|Exemplar|Facility)Decl|ModuleIdentifierSpec)")="edu.clemson.resolve.jetbrains.psi.ResNamedElement"

    implements("(TypeModel|TypeRepr)Decl")="edu.clemson.resolve.jetbrains.psi.ResTypeLikeNodeDecl"
    implements(".*Block")="edu.clemson.resolve.jetbrains.psi.ResBlock"

    extends("Math.*(DefnDecl)")="edu.clemson.resolve.jetbrains.psi.impl.ResAbstractMathDefnImpl"
    extends("Math.*(Sig)")="edu.clemson.resolve.jetbrains.psi.impl.ResAbstractMathSigImpl"
    extends(".*ModuleDecl")="edu.clemson.resolve.jetbrains.psi.impl.ResAbstractModuleImpl"
    extends("MathVarDef")="edu.clemson.resolve.jetbrains.psi.impl.ResMathNamedElementImpl"
    extends("Math.*(Exp)")=MathExp

    extends("(Operation|Procedure|OperationProcedure)Decl")="edu.clemson.resolve.jetbrains.psi.impl.ResAbstractOperationLikeNode"
    extends("((Var|Param|Field)Def|(MathTheorem|TypeParam|Exemplar|Facility)Decl)|ModuleIdentifierSpec")="edu.clemson.resolve.jetbrains.psi.impl.ResNamedElementImpl"
    extends("(TypeModel|TypeRepr)Decl")="edu.clemson.resolve.jetbrains.psi.impl.ResAbstractTypeLikeNodeImpl"

    pin(".*Statement")=1
    extends(".*Statement")=Statement
    generateTokenAccessors=true
    pin('.*List(?:_\d.*)?')=1
}

ModuleDecl ::=
      PrecisModuleDecl
    | PrecisExtensionModuleDecl
    | ConceptExtensionModuleDecl
    | ConceptModuleDecl
    | ImplModuleDecl
    | FacilityModuleDecl

PrecisModuleDecl ::= 'Precis' identifier ';'
UsesList?
PrecisBlock
end identifier ';' {pin(".*")=2}

PrecisExtensionModuleDecl ::= 'Extension' identifier for
ReferenceExp ';'
UsesList?
PrecisBlock
end identifier ';' {pin(".*")=2}

ConceptModuleDecl ::= 'Concept' identifier SpecModuleParameters? ';'
UsesList?
RequiresClause?
ConceptBlock
end identifier ';' {pin(".*")=1}

ConceptExtensionModuleDecl ::=
'Enhancement' identifier SpecModuleParameters? for ReferenceExp ';'
UsesList?
RequiresClause?
ConceptBlock
end identifier ';' {pin(".*")=2}

ImplModuleDecl ::= 'Realization' identifier ImplModuleParameters? for ReferenceExp (of ReferenceExp)? ';'
UsesList?
RequiresClause?
ImplBlock
end identifier ';' {pin(".*")=1}

FacilityModuleDecl ::= 'Facility' identifier ';'
UsesList?
RequiresClause?
FacilityBlock
end identifier ';' {pin(".*")=3}

// uses, imports

UsesList ::= uses (UsesSpecs | '(' UsesSpecs ')') ';'  {pin(".*")=1}
private UsesSpecs ::= ModuleIdentifierSpec (',' ModuleIdentifierSpec)* {pin(".*")=1}

//shouldGoDeeper (impl sets to false) here allows us to avoid adding completions for ResModuleIdentifierSpec's
//there was an issue where qualifiers on math syms in say, global requires clauses, would resolve to a
//ModuleIdentifierSpec during the delegate's "treeWalkUp" phase -- leaving us with a ModuleIdentifierSpec, not a file..
//We don't want to resolve these until we're good and ready (i.e.: in {@link ResReference#processUsesImports})
ModuleIdentifierSpec ::= ModuleIdentifier [FromClause] {pin=1 methods=[getFromLibraryIdentifier getName getIdentifier shouldGoDeeper]}

private FromClause ::= from ModuleLibraryIdentifier {pin=1}

ModuleIdentifier ::= identifier {pin=1 methods=[getReferences getModuleIdentiferTextRange resolve]}
ModuleLibraryIdentifier ::= identifier ('.' identifier)* {pin(".*")=1 methods=[getReferences getModuleLibraryIdentiferTextRange resolve] }

// Module blocks & items

PrecisBlock ::= PrecisItem* {methods=[processDeclarations] recoverWhile=ItemsRecover}
ConceptBlock ::= ConceptItem* {methods=[processDeclarations] recoverWhile=ItemsRecover}
FacilityBlock ::= FacilityItem* {methods=[processDeclarations] recoverWhile=ItemsRecover}
ImplBlock ::= ImplItem* {methods=[processDeclarations] recoverWhile=ItemsRecover}

private ItemsRecover ::= !('end')

private PrecisItem ::=
          MathTheoremDecl
        | MathStandardDefnDecl
        | MathCategoricalDefnDecl
        | MathClssftnCorollaryDecl
        | MathInductiveDefnDecl {pin=1 recoverWhile=PrecisItemRecover}

private PrecisItemRecover ::= !('Definition'|'Implicit'|'Theorem'|'Corollary'|'Categorical'|'Inductive'|'Classification'|'Chainable'|end)

private ConceptItem ::=
      TypeModelDecl
    | OperationDecl
    | MathStandardDefnDecl
    | ConstraintsClause {pin=1 recoverWhile=ConceptItemRecover}

private ConceptItemRecover ::= !('Type'|'Operation'|'Definition'|constraints|end)

private ImplItem ::=
      TypeReprDecl
    | OperationProcedureDecl
    | FacilityDecl
    | ProcedureDecl
    | MathStandardDefnDecl {pin=1 recoverWhile=ImplItemRecover}

private ImplItemRecover ::= !('Type'|'Operation'|'Facility'|'Recursive'|'Definition'|'Procedure'|end)

private FacilityItem ::=
      FacilityDecl
    | OperationProcedureDecl
    | TypeReprDecl
    | MathStandardDefnDecl {pin=1 recoverWhile=FacilityItemRecover}

private FacilityItemRecover ::= !('Facility'|'Definition'|'Operation'|'Type'|end)

// type refs & decls

Type ::= RecordType | NamedType {methods=[getUnderlyingType]}
private NamedType ::= TypeReferenceExp QualifiedTypeReferenceExp?
TypeReferenceExp ::= identifier { methods=[getReference getQualifier resolve] }
left QualifiedTypeReferenceExp ::= '::' identifier {elementType=TypeReferenceExp}
RecordType ::= 'Record' RecordVarDeclGroup* end {pin=1 extends=Type}

TypeModelDecl ::= 'Type' family identifier TypeModelPortion ';'
    ExemplarDecl ConstraintsClause? IntializationClause? {pin=3}
ExemplarDecl ::= exemplar identifier ';' {pin=2 methods=[getResMathMetaTypeExpInner]}
private TypeModelPortion ::= is modeled by MathExp {pin=4}

TypeReprDecl ::= 'Type' identifier is (RecordType|Type) ';'
ConventionsClause?
CorrespondenceClause?
TypeImplInit?
{pin=2 methods=[getResTypeInner]}

// type initialization rules

TypeImplInit ::= initialization (RequiresClause)? (EnsuresClause)?
OpBlock end ';'

// parameter and parameter-list related rules

SpecModuleParameters ::= '(' SpecModuleParamList ')' {pin=1}
private SpecModuleParamList ::= SpecParamDecl  (';' SpecParamDecl)* {recoverWhile=ParamListRec}
private SpecParamDecl ::= TypeParamDecl | ParamDecl | MathStandardDefnDecl

ImplModuleParameters ::= '(' ImplModuleParamList ')' {pin=1}
private ImplModuleParamList ::= ImplParamDecl  (';' ImplParamDecl)* {recoverWhile=ParamListRec}
private ImplParamDecl ::= ParamDecl|OperationDecl

private OperationLikeParameters ::= '(' OpParamList? ')' {pin=1}
private OpParamList ::= ParamDecl (';' ParamDecl)* {pin=1 recoverWhile=ParamListRec}
ParamDecl ::= ParameterMode ParamDefinitionListNoPin ':' Type {pin=1}
private ParamDefinitionListNoPin ::= ParamDef &(!(';'|')')) (',' ParamDef)* {pin=1}
ParamDef ::= identifier

TypeParamDecl ::= 'type' identifier {pin=2}
ParameterMode ::= (alters|updates|clears|restores|preserves|replaces|evaluates|identifier)

// prog variable decls

RecordVarDeclGroup ::= FieldVarDeclGroup ';' {pin=1}
FieldVarDeclGroup ::= FieldVarDefList ':' Type {pin=1}
private FieldVarDefList ::= FieldDef &(!(';'))(',' FieldDef)*
FieldDef ::= identifier

VarDeclGroup ::= 'Var' VarSpec ';' {pin=1}
VarSpec ::= VarDefList ':' Type {pin=1}//{methods=[processDeclarations]}
private VarDefList ::= VarDef &(!(';'))(',' VarDef)*
VarDef ::= identifier {methods=[getResTypeInner getReference]}

// facility decls

FacilityDecl ::= 'Facility' identifier is ModuleIdentifier ModuleSpecArgList? [FromClause]
(externally)? realized by ModuleIdentifier ModuleRealizArgList? [FromClause]
ExtensionList? ';' {pin=2 methods=[resolveSpecification resolveImplementation]}

private ExtensionList ::= (ExtensionPairing)* {recoverWhile=ExtensionListRec}
private ExtensionListRec ::= !(';')

ExtensionPairing ::= enhanced by ModuleIdentifier ModuleSpecArgList? [FromClause] (externally)?
realized by ModuleIdentifier ModuleRealizArgList? [FromClause]
{pin=1 methods=[resolveSpecification resolveImplementation]}

ModuleSpecArgList ::= '(' SpecArgumentList ')' {pin=1}
ModuleRealizArgList ::= '(' ExpArgumentList ')' {pin=1}

private SpecArgumentList ::= SpecArg (',' SpecArg)* {pin(".*")=1}
private SpecArg ::= (Exp|MathExp)

OperationDecl ::= 'Operation' identifier OperationLikeParameters (':' Type)? ';'
RequiresClause? EnsuresClause? {pin=2}

OperationProcedureDecl ::= 'Operation' identifier OperationLikeParameters (':' Type)? ';'
RequiresClause? EnsuresClause?
OpProcBody
end CloseIdentifier ';' {pin=2}
private OpProcBody ::= ('Recursive')? 'Procedure' OpBlock {pin=2}

ProcedureDecl ::= ('Recursive')? 'Procedure' identifier OperationLikeParameters (':' Type)? ';'
OpBlock
end CloseIdentifier ';' {pin=3}

OpBlock ::= VarDeclGroup* NoticeClause* Statements?
CloseIdentifier ::= identifier

// statements

Statement ::= SimpleStatement | WhileStatement | IfStatement
SimpleStatement ::= Exp (AssignStatement|SwapStatement)? ';' {pin(".*")=1}
private Statements ::= Statement* {recoverWhile=StatementRecover}
private StatementRecover ::= !(end|':='|':=:'|'If'|'While'|else|identifier)

left AssignStatement ::= ':=' Exp {pin=1}
left SwapStatement ::= ':=:' Exp {pin=1}

WhileStatement ::= 'While' Exp ChangingClause? MaintainingClause? DecreasingClause?
do Statements end ';'

IfStatement ::= 'If' Exp then Statements (ElseStatement)? end ';' {pin=1}
ElseStatement ::= else Statements {pin=1}

// program expressions

Exp ::=  InfixExp | CallExp | NestedExp | PrimeExp
{methods=[getResType] implements="edu.clemson.resolve.jetbrains.psi.ResTypeOwner"}
fake BinaryExp ::= Exp+ { methods=[left="Exp[0]" right="Exp[1]"] extends=Exp }

NestedExp ::= '(' Exp ')'   {pin=1 extends=Exp}
SelectorExp ::= Exp '.' Exp {extends=BinaryExp}
InfixExp ::= Exp ProgSymbolName Exp {extends=BinaryExp}
//combines unary and call...
CallExp ::= ProgSymbolName (ArgumentList|Exp) {extends=Exp}
ProgSymbolName ::= (identifier|symbol)

NameExp ::= ReferenceExp QualifiedReferenceExp? {elementType=ReferenceExp}
left QualifiedReferenceExp ::= '::' identifier {elementType=ReferenceExp}
ReferenceExp ::= identifier { methods=[getReference getQualifier resolve shouldReferenceModule] extends=Exp}

private PrimeExp ::= LiteralExp | NameExp | SelectorExp
LiteralExp ::= (int|string|/*char|*/true|false)  {extends=Exp}
ArgumentList ::= '(' ExpArgumentList? ')' {pin=1}
private ExpArgumentList ::= Exp (',' Exp)* {pin(".*")=1}

// math constructs

MathTheoremDecl ::= ('Corollary'|'Theorem') identifier ':' MathAssertionExp ';' {pin = 2}
MathClssftnCorollaryDecl ::= 'Classification' 'Corollary' ':' MathAssertionExp ';' {pin=1}

private MathDefnSig ::= MathPrefixDefnSig | MathPostfixDefnSig | MathOutfixDefnSig | MathInfixDefnSig
MathPrefixDefnSig ::= MathPrefixNameList MathDefinitionParams? ':' MathExp {pin=1}

private MathPrefixNameList ::= MathSymbolName (',' MathSymbolName)* {recoverWhile=MathPrefixListRec}
private MathPrefixListRec ::= !(':'|';'|'(')
private MathPrefixDefnSigs ::= MathPrefixDefnSig (',' MathPrefixDefnSig)* {recoverWhile=CategoricalSigListRec}
private CategoricalSigListRec ::= !(is)

MathInfixDefnSig ::= '(' MathVarDecl ')' MathSymbolName '(' MathVarDecl ')' ':' MathExp {pin=4}
MathOutfixDefnSig ::= MathBracketName '(' MathVarDecl ')' MathBracketName ':' MathExp {pin=1}
MathPostfixDefnSig ::= '(' MathVarDecl ')' MathBracketName '(' MathVarDecl ')' MathBracketName ':' MathExp

private MathDefinitionParams ::= '(' MathDefnParamList ')' { pin=1}
private ParamListRec ::= !(')'|';')
private MathDefnParamList ::= MathVarDeclGroup (',' MathVarDeclGroup)* {pin=1 recoverWhile=ParamListRec}

MathCategoricalDefnDecl ::= 'Categorical' 'Definition' for
MathPrefixDefnSigs is MathExp ';' {pin=2}

MathStandardDefnDecl ::= ('Chainable')? ('Implicit'?) 'Definition'  MathDefnSig (is MathAssertionExp)? ';' {pin=3}

MathInductiveDefnDecl ::= 'Inductive' 'Definition' MathDefnSig is
'(i.)' MathAssertionExp ';'
'(ii.)' MathAssertionExp ';' {pin=2}

// mathematical variables

MathVarDeclGroup ::= MathVarDeclList ':' MathExp {pin=1}

MathVarDecl ::= MathVarDef ':' MathExp {pin=2 extends=MathVarDeclGroup}
private MathVarDeclList ::= MathVarDef &(!(')')) (',' MathVarDef)* {pin=1}
MathVarDef ::= MathSymbolName //TODO: Make this a MathSymbolName

// mathematical clauses

IntializationClause ::= initialization (EnsuresClause) ;
RequiresClause ::= requires MathAssertionExp (EntailsClause)? ';' {pin=1}
EnsuresClause ::= ensures MathAssertionExp ';' {pin=1}
ConstraintsClause ::= constraints MathAssertionExp ';' {pin=1}
ConventionsClause ::= conventions MathAssertionExp (EntailsClause)? ';' {pin=1}
CorrespondenceClause ::= correspondence MathAssertionExp ';' {pin=1}
ChangingClause ::= changing ExpArgumentList ';' {pin=1}
MaintainingClause ::= maintaining MathAssertionExp ';' {pin=1}
DecreasingClause ::= decreasing MathAssertionExp ';' {pin=1}
EntailsClause ::= which_entails MathExp {pin=1}
NoticeClause ::= 'Notice' MathExp ';' {pin=1}

// mathematical expressions

MathAssertionExp ::= MathQuantifiedExp|MathExp
MathQuantifiedExp ::= ('∃'|'∀') MathVarDeclGroup ',' MathAssertionExp {pin=1}

MathExp ::=
          /*MathEqualsInfixApplyExp |*/
          MathInfixApplyExp
        | MathPrefixApplyExp
        | MathMixfixApplyExp
        | MathNestedExp
        | MathPrimeExp {methods=[getResMathMetaTypeExp]}

MathNestedExp ::= '(' MathAssertionExp ')' {pin=1}
MathSelectorExp ::= MathExp '.' MathExp
MathPrefixApplyExp ::= MathExp MathFunctionAppList
MathMixfixApplyExp ::= MathExp MathBracketName MathNonStdAppList MathBracketName {pin=4}
MathOutfixApplyExp ::= MathBracketName MathExp MathBracketName
MathInfixApplyExp ::= MathExp MathOpSymbolName MathExp {pin=2}
//MathEqualsInfixApplyExp ::= MathExp ('='|'≠') MathExp
MathClssftnAssrtExp ::= MathExp ':' MathExp
MathIncomingExp ::= '#' MathSymbolExp {pin=1}

MathFunctionAppList ::= '(' MathArgList ')'

private MathNonStdAppList ::= MathExp (',' MathExp)* {pin=1}
private MathArgList ::= MathExp (',' MathExp)* {pin=1 recoverWhile=ParamListRec}

private MathPrimeExp ::= MathIncomingExp | MathSymbolExp | MathSelectorExp | MathLambdaExp
        | MathAlternativeExp
        | MathClssftnAssrtExp
        | MathOutfixApplyExp
        | MathCartProdExp
        | MathSetExp
        | MathSetRestrictionExp

private MathOpSymbolName ::= MathSymbolExp
MathBracketName ::= ('⟨'|'⟩'|'⌈'|'⌉'|'⎝'|'⎠'|'∥'|'['|']'|'|') {elementType=MathSymbolName}
MathSymbolName  ::= (identifier|int|symbol|mathsymbol|true|false)

MathSymbolExp ::=  MathReferenceExp MathQualifiedReferenceExp? {elementType=MathReferenceExp}
left MathQualifiedReferenceExp ::= '::' MathSymbolName {elementType=MathReferenceExp}
MathReferenceExp ::= MathSymbolName {methods=[getReference getQualifier getIdentifier] extends=MathExp}

MathCartProdExp ::= 'Cart_Prod' ResMathCartVarGroup+  end {pin=1}
private ResMathCartVarGroup ::= MathVarDeclGroup ';' {pin=1}
MathLambdaExp ::= 'λ' MathVarDecl ','  MathExp {pin=1}
MathAlternativeExp ::= '{{' MathAlternativesList '}}' {pin=1}
MathAlternativesList ::= MathAlternativeItemExp+
MathAlternativeItemExp ::= MathExp (if MathExp ';' | otherwise ';')
MathSetRestrictionExp ::= '{' MathVarDecl '|' MathExp '}' {pin=1}
MathSetExp ::= '{' MathExp? '}'