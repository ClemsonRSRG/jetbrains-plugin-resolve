{
    parserClass='edu.clemson.resolve.jetbrains.parser.ResParser'

    implements='edu.clemson.resolve.jetbrains.psi.ResCompositeElement'
    extends='edu.clemson.resolve.jetbrains.psi.impl.ResCompositeElementImpl'

    elementTypeHolderClass='edu.clemson.resolve.jetbrains.ResTypes'
    elementTypeClass='edu.clemson.resolve.jetbrains.psi.ResCompositeElementType'
    tokenTypeClass='edu.clemson.resolve.jetbrains.psi.ResTokenType'

    psiClassPrefix='Res'
    psiImplClassSuffix='Impl'
    psiPackage='edu.clemson.resolve.jetbrains.psi'
    psiImplPackage='edu.clemson.resolve.jetbrains.psi.impl'
    psiImplUtilClass="edu.clemson.resolve.jetbrains.psi.impl.ResPsiImplUtil"

    tokens=[
        // Punctuation
        AT                      = '@'
        TRIPLE_DOT              = '...'
        DOT_DOT                 = '..'
        DOT                     = '.'
        DBL_LBRACE              = '{{'
        LBRACE                  = '{'
        RBRACE                  = '}'
        DBL_RBRACE              = '}}'
        LBRACK                  = '['
        RBRACK                  = ']'
        LPAREN                  = '('
        RPAREN                  = ')'
        COLON                   = ':'
        COLONCOLON              = '::'
        SEMICOLON               = ';'
        COMMA                   = ','
        IND_BASE                = '(i.)'
        IND_HYPO                = '(ii.)'

        // Operators
        EQUALS                  = '='
        NEQUALS                 = '/='
        NEQUALS1                = '≠'

        AND                     = 'and'
        AND1                    = '∧'

        OR                      = 'or'
        OR1                     = '∨'

        NOT                     = 'not'
        NOT1                    = '⌐'

        CAT                     = 'o'
        CAT1                    = '∘'
        HTIMES                  = 'ᴴ⨯'
        TIMES                   = '⨯'
        TRUE                    = 'true'
        FALSE                   = 'false'
        IMPLIES                 = 'implies'

        UNION                   = 'union'
        UNION1                  = '∪'
        UNION_PLUS              = '∪₊'

        INTERSECT               = 'intersect'
        INTERSECT1              = '∩'
        INTERSECT_PLUS          = '∩₊'

        IS_IN                   = 'is_in'
        IS_In1                  = '∈'
        IS_NOT_IN               = 'is_not_in'
        IS_NOT_IN1              = '∉'
        PRECCURLYEQ             = '≼'
        LESS_OR_EQUAL           = '<='
        LESS_OR_EQUAL1          = '≤'
        LESS_OR_EQUAL_U         = '≤ᵤ'

        LESS                    = '<'

        GREATER_OR_EQUAL        = '>='
        GREATER_OR_EQUAL1       = '≥'
        GREATER                 = '>'

        RARROW                  = '->'
        RARROW1                 = '⟶'
        VROD                    = 'ϒ'

        MOD                     = '%'
        MUL                     = '*'
        QUOTIENT                = '/'
        PLUS                    = '+'
        MINUS                   = '-'

        COLON_EQUALS            = ':='
        COLON_EQUALS_COLON      = ':=:'

        TILDE                   = '~'
        BAR                     = '|'
        DBL_BAR                 = '||'
        LCURVE                  = '⎝'
        RCURVE                  = '⎠'

        LANGLE                  = '⟨'
        RANGLE                  = '⟩'

        LCEIL                   = '⎡'
        RCEIL                   = '⎤'
        // Keywords
        INT                     = 'int'
        FACILITY                = 'Facility'
        PRECIS                  = 'Precis'
        BASE                    = 'base'
        HYPO                    = 'hypo'
        AS                      = 'as'
        CONCEPT                 = 'Concept'
        EXTENSION               = 'Extension'
        EXTENDED_BY             = 'extended_by'
        CART_PROD               = 'Cart_Prod'
        DEFINES                 = 'Defines'
        IFF                     = 'iff'
        EXTENDED                = 'extended'
        DEFINITION              = 'Definition'
        CONSTRAINTS             = 'constraints'
        CONVENTIONS             = 'conventions'
        CORRESPONDENCE          = 'correspondence'
        EXTENSION               = 'Extension'
        END                     = 'end'
        ELSE                    = 'else'
        FROM                    = 'from'
        USES                    = 'uses'
        IS                      = 'is'
        IF                      = 'if'
        PROG_IF                 = 'If'
        CHANGING                = 'changing'
        MAINTAINING             = 'maintaining'
        DECREASING              = 'decreasing'
        OTHERWISE               = 'otherwise'
        FORALL1                  = '∀'
        FORALL                  = 'Forall'
        EXISTS                  = 'Exists'
        EXISTS1                  = '∃'
        EXTERNALLY              = 'externally'
        IMPLEMENTED             = 'implemented'
        INITIALIZATION          = 'initialization'
        IMPLEMENTATION          = 'Implementation'
        INDUCTIVE               = 'Inductive'
        IMPLICIT                = 'Implicit'
        THEOREM                 = 'Theorem'
        COROLLARY               = 'Corollary'
        LAMBDA                  = 'lambda'
        LAMBDA1                 = 'λ'
        FAMILY_TYPE             = 'Type'
        PARAM_TYPE              = 'type'
        FAMILY                  = 'family'
        FOR                     = 'for'
        MODELED                 = 'modeled'
        CATEGORICAL             = 'Categorical'
        EXEMPLAR                = 'exemplar'
        OPERATION               = 'Operation'
        RECURSIVE               = 'Recursive'
        RECORD                  = 'Record'
        REQUIRES                = 'requires'
        ENSURES                 = 'ensures'
        PROCEDURE               = 'Procedure'
        VAR                     = 'Var'
        BY                      = 'by'
        THEN                    = 'then'
        WHILE                   = 'While'
        WITH                    = 'with'
        DO                      = 'do'
        OF                      = 'of'
        STRING                  = 'string'
        WHICH_ENTAILS           = 'which_entails'
        CHAR                    = 'char'
        raw_string              = 'raw_string'

        // Parameter modes
        ALTERS                  = 'alters'
        UPDATES                 = 'updates'
        CLEARS                  = 'clears'
        RESTORES                = 'restores'
        PRESERVES               = 'preserves'
        REPLACES                = 'replaces'
        EVALUATES               = 'evaluates'

        //these two are so grammarkit's live preview feature will work right,
        //disregard them otherwise
        space                   = "regexp:\s+"
        identifier              = 'regexp:\p{Alpha}\w*'
    ]

    extends("Math.*(DefnDecl)")="edu.clemson.resolve.jetbrains.psi.impl.ResAbstractMathDefnImpl"
    extends("Math.*(Sig)")="edu.clemson.resolve.jetbrains.psi.impl.ResAbstractMathSigImpl"
    extends(".*ModuleDecl")="edu.clemson.resolve.jetbrains.psi.impl.ResAbstractModuleImpl"

    extends(".*((Var|Param|Field)Def|(MathTheorem|TypeParam|Operation|Procedure|OperationProcedure|Exemplar|Facility)Decl)|ModuleSpec|ModuleIdentifier|ModuleLibraryIdentifier")="edu.clemson.resolve.jetbrains.psi.impl.ResNamedElementImpl"
    extends("(TypeModel|TypeRepr)Decl")="edu.clemson.resolve.jetbrains.psi.impl.ResAbstractTypeLikeNodeImpl"
    extends("OrInfixExp|SelectorExp")=InfixExp
    extends("Math((Minus|Cat|Range|Plus|Div|Mult|Custom)InfixApplyExp|SelectorExp)")=MathInfixApplyExp // this attributes can be placed directly after rule
    extends("Math.*(Exp)")=MathExp

    implements("Math.*DefnDecl")="edu.clemson.resolve.jetbrains.psi.ResMathDefnDecl"
    implements(".*ModuleDecl")="edu.clemson.resolve.jetbrains.psi.ResModuleDecl"
    implements("OperationDecl|OperationProcedureDecl")="edu.clemson.resolve.jetbrains.psi.ResOperationLikeNode"
    implements(".*ReferenceExp")="edu.clemson.resolve.jetbrains.psi.ResReferenceExpBase"
    implements("(Spec|Impl)ModuleParameters")="edu.clemson.resolve.jetbrains.psi.ResModuleParameters"
    implements(".*((Var|Param|Field)Def|(MathTheorem|TypeParam|Exemplar|Facility)Decl|ModuleIdentifier|ModuleLibraryIdentifier)")="edu.clemson.resolve.jetbrains.psi.ResNamedElement"

    implements("(TypeModel|TypeRepr)Decl")="edu.clemson.resolve.jetbrains.psi.ResTypeLikeNodeDecl"
    implements(".*Block")="edu.clemson.resolve.jetbrains.psi.ResBlock"

    pin(".*Statement")=1
    extends(".*Statement")=Statement

    generateTokenAccessors=true
    pin('.*List(?:_\d.*)?')=1
}

ModuleDecl ::=
      PrecisModuleDecl
    | PrecisExtensionModuleDecl
    | ConceptExtensionModuleDecl
    | ConceptModuleDecl
    | ImplModuleDecl
    | FacilityModuleDecl

PrecisModuleDecl ::= 'Precis' identifier ';'
UsesList?
PrecisBlock
'end' identifier ';' {pin(".*")=2}

PrecisExtensionModuleDecl ::= 'Precis' 'Extension' identifier 'for'
ModuleIdentifierSpec ('with' ModuleIdentifierSpec)? ';'
PrecisBlock
'end' identifier ';' {pin(".*")=2}

ConceptModuleDecl ::= 'Concept' identifier SpecModuleParameters? ';'
UsesList?
RequiresClause?
ConceptBlock
'end' identifier ';' {pin(".*")=1}

ConceptExtensionModuleDecl ::=
'Concept' 'Extension' identifier SpecModuleParameters? 'for' ModuleIdentifierSpec ';'
UsesList?
RequiresClause?
ConceptBlock
'end' identifier ';' {pin(".*")=2}

ImplModuleDecl ::= 'Implementation' identifier ImplModuleParameters?
'for' ModuleIdentifierSpec ('of' ModuleIdentifierSpec)? ';' //These should be ModuleIdentifierSpecs not NameExps since
//they essentially function as 'implicit imports'
UsesList?
RequiresClause?
ImplBlock
'end' identifier ';' {pin(".*")=1}

FacilityModuleDecl ::= 'Facility' identifier ';'
UsesList?
RequiresClause?
FacilityBlock
'end' identifier ';' {pin(".*")=1}

// uses, imports

UsesList ::= 'uses' (UsesSpecGroup | '(' UsesSpecGroup+ ')' ';' )

UsesSpecGroup ::= ModuleIdentSpecList ('from' ModuleLibraryIdentifierSpec
            /*'as' alias clause goes here here eventually*/ )? ';' {
    pin=1 methods=[getFromModuleLibraryIdentifier /*TODO: getAlias()*/]
}
private ModuleIdentSpecList ::=  ModuleIdentifierSpec (',' ModuleIdentifierSpec)* {recoverWhile=ModuleIdentSpecListRec }
private ModuleIdentSpecListRec ::= !(';'|')'|'from'|'end')

ModuleIdentifierSpec ::= identifier {methods=[getReferences getModuleIdentiferTextRange resolve]}
ModuleLibraryIdentifierSpec ::= identifier {methods=[getReferences getModuleLibraryIdentiferTextRange resolve]}

// Module blocks & items

PrecisBlock ::= PrecisItem* {methods=[processDeclarations] recoverWhile=ItemsRecover}
ConceptBlock ::= ConceptItem* {methods=[processDeclarations] recoverWhile=ItemsRecover}
FacilityBlock ::= FacilityItem* {methods=[processDeclarations] recoverWhile=ItemsRecover}
ImplBlock ::= ImplItem* {methods=[processDeclarations] recoverWhile=ItemsRecover}

private ItemsRecover ::= !('end')

private PrecisItem ::=
          MathTheoremDecl
        | MathStandardDefnDecl
        | MathCategoricalDefnDecl
        | MathInductiveDefnDecl {pin=1 recoverWhile=PrecisItemRecover}

private PrecisItemRecover ::= !('Definition'|'Implicit'|'Theorem'|'Corollary'|'Categorical'|'Inductive'|'end')

private ConceptItem ::=
      TypeModelDecl
    | OperationDecl
    | MathStandardDefnDecl
    | ConstraintsClause {pin=1 recoverWhile=ConceptItemRecover}

private ConceptItemRecover ::= !('Type'|'Operation'|'Definition'|'constraints'|'Constraints'|'end')

private ImplItem ::=
      TypeReprDecl
    | OperationProcedureDecl
    | FacilityDecl
    | ProcedureDecl
    | MathStandardDefnDecl {pin=1 recoverWhile=ImplItemRecover}

private ImplItemRecover ::= !('Type'|'Operation'|'Facility'|'Recursive'|'Definition'|'Procedure'|'end')

private FacilityItem ::=
      FacilityDecl
    | OperationProcedureDecl
    | TypeReprDecl
    | MathStandardDefnDecl {pin=1 recoverWhile=FacilityItemRecover}

private FacilityItemRecover ::= !('Facility'|'Definition'|'Operation'|'Type'|'end')

// type refs & decls

Type ::= RecordType | NamedType
private NamedType ::= TypeReferenceExp QualifiedTypeReferenceExp?
TypeReferenceExp ::= identifier { methods=[getReference getQualifier resolve] }
left QualifiedTypeReferenceExp ::= '::' identifier {elementType=TypeReferenceExp}
RecordType ::= 'Record' RecordVarDeclGroup* 'end' {pin=1 extends=Type}

TypeModelDecl ::= 'Type' 'family' identifier TypeModelPortion ';'
    ExemplarDecl
    ConstraintsClause?
    IntializationClause? {pin=3}

ExemplarDecl ::= 'exemplar' identifier ';' {pin=2 methods=[getResMathMetaTypeExpInner]}

private TypeModelPortion ::= 'is' 'modeled' 'by' MathExp {pin=4}

TypeReprDecl ::= 'Type' identifier '=' (RecordType|Type) ';'
ConventionsClause?
CorrespondenceClause?
TypeImplInit?
{pin=2 methods=[getResTypeInner]}

// type initialization rules

TypeImplInit ::= 'initialization' (RequiresClause)? (EnsuresClause)?
OpBlock 'end' ';'

// parameter and parameter-list related rules

SpecModuleParameters ::= '(' SpecModuleParamList ')' {pin=1}
private SpecModuleParamList ::= SpecParamDecl  (';' SpecParamDecl)* {recoverWhile=ParamListRec}
private SpecParamDecl ::= TypeParamDecl | ParamDecl | MathStandardDefnDecl

ImplModuleParameters ::= '(' ImplModuleParamList ')' {pin=1}
private ImplModuleParamList ::= ImplParamDecl  (';' ImplParamDecl)* {recoverWhile=ParamListRec}
private ImplParamDecl ::= ParamDecl|OperationDecl

private OperationLikeParameters ::= '(' OpParamList? ')' {pin=1}
private OpParamList ::= ParamDecl (';' ParamDecl)* {pin=1 recoverWhile=ParamListRec}
ParamDecl ::= ParameterMode ParamDefinitionListNoPin ':' Type {pin=1}
private ParamDefinitionListNoPin ::= ParamDef &(!(';'|')')) (',' ParamDef)* {pin=1}
ParamDef ::= identifier

TypeParamDecl ::= 'type' identifier {pin=2}

ParameterMode ::=
      'alters'
    | 'updates'
    | 'clears'
    | 'restores'
    | 'preserves'
    | 'replaces'
    | 'evaluates'
    | identifier //TODO: would like to get rid of identifier here, but results
                 //in an uglier (partial) psi; which makes keyword completion
                 //patterns much harder

// prog variable decls

RecordVarDeclGroup ::= FieldVarDeclGroup ';' {pin=1}
FieldVarDeclGroup ::= FieldVarDefList ':' Type {pin=1}
private FieldVarDefList ::= FieldDef &(!(';'))(',' FieldDef)*
FieldDef ::= identifier

VarDeclGroup ::= 'Var' VarSpec ';' {pin=1}
VarSpec ::= VarDefList ':' Type {pin=1}//{methods=[processDeclarations]}
private VarDefList ::= VarDef &(!(';'))(',' VarDef)*
VarDef ::= identifier {methods=[getResTypeInner getReference]}

// facility decls

FacilityDecl ::= 'Facility' identifier 'is' NameExp ModuleArgList?
('externally')? 'implemented' 'by' NameExp ModuleArgList?
ExtensionList? ';' {pin=2 methods=[resolveSpecification]}

private ExtensionList ::= (ExtensionPairing)* {recoverWhile=ExtensionListRec}
private ExtensionListRec ::= !(';')

ExtensionPairing ::= 'extended' 'by' NameExp ModuleArgList? ('externally')?
'implemented' 'by' NameExp ModuleArgList? {pin=1}

ModuleArgList ::= '(' ExpArgumentList ')' {pin=1}

// operations & procedures

OperationDecl ::=
'Operation' identifier OperationLikeParameters (':' Type)? ';'
RequiresClause? EnsuresClause? {pin=2}

OperationProcedureDecl ::=
'Operation' identifier OperationLikeParameters (':' Type)? ';'
RequiresClause? EnsuresClause?
OpProcBody
'end' CloseIdentifier ';' {pin=2}

private OpProcBody ::=
('Recursive')? 'Procedure'
OpBlock {pin=2}


ProcedureDecl ::=
('Recursive')? 'Procedure' identifier OperationLikeParameters (':' Type)? ';'
OpBlock
'end' CloseIdentifier ';' {pin=3}

OpBlock ::=
VarDeclGroup*
Statements?

/** We cannot have two identifiers referenced in a rule (where one, say, the
 *  first, is pinned): the code doesn't gen a getter for your pinned
 *  identifier. This intermediate rule is simply a workaround for this.
 */
CloseIdentifier ::= identifier

private Statements ::= Statement* {recoverWhile=StatementRecover}

Statement ::=
      SimpleStatement
    | WhileStatement
    | IfStatement

private StatementRecover ::= !('end'|':='|':=:'|'If'|'While'|'else'|identifier)
SimpleStatement ::=
      Exp (AssignStatement|SwapStatement)? ';' {pin(".*")=1}

left AssignStatement ::= ':=' Exp {pin=1}
left SwapStatement ::= ':=:' Exp {pin=1}

WhileStatement ::= 'While' Exp
ChangingClause? MaintainingClause? DecreasingClause?
'do' Statements 'end' ';'

IfStatement ::= 'If' Exp 'then' Statements (ElseStatement)? 'end' ';' {pin=1}
ElseStatement ::= 'else' Statements {pin=1}

// program expressions

Exp ::=
      OrInfixExp
    | AndInfixExp
    | RelationalInfixExp
    | AddInfixExp
    | MulInfixExp
    | UnaryExp
    | Primary
    | ParenExp {methods=[getResType] implements="edu.clemson.resolve.jetbrains.psi.ResTypeOwner"}

fake InfixExp ::= Exp+ {
  methods=[left="Exp[0]" right="Exp[1]"]
}

OrInfixExp ::= Exp 'or' Exp {extends=Exp}
AndInfixExp ::= Exp 'and' Exp {extends=Exp}
RelationalInfixExp ::= Exp ('='|'/='|'<'|'<='|'>'|'>=') Exp {extends=Exp}
AddInfixExp ::= Exp ('+'|'-') Exp {extends=Exp}
MulInfixExp ::= Exp ('*'|'/'|'%') Exp {extends=Exp}
UnaryExp ::=  ('+'|'-'|'not') Exp {extends=Exp}
SelectorExp ::= Exp '.' Exp {extends=Exp}
ParenExp ::= '(' Exp ')' {extends=Exp}

private Primary ::=
      NameExp
    | SelectorExp
    | CallExp
    | LiteralExp

CallExp ::= NameExp ArgumentList {extends=Exp}
ArgumentList ::= '(' ExpArgumentList? ')' {pin=1}
private ExpArgumentList ::= ExpWithRecover (',' ExpWithRecover)* {pin(".*")=1}
private ExpWithRecover ::= Exp {recoverWhile=ExpListRecover}
private ExpListRecover ::= !('%'|'+'|'-'|'('|')'|','|'*'|'<'|'<='|'>'|'>='|'end'|'Operation'|'Type'|'Facility'|';')

NameExp ::= ReferenceExp QualifiedReferenceExp? {elementType=ReferenceExp}
left QualifiedReferenceExp ::= '::' identifier {elementType=ReferenceExp}
ReferenceExp ::= identifier { methods=[getReference getQualifier resolve shouldReferenceModule] extends=Exp}

LiteralExp ::= int|StringLiteral|BooleanLiteral {extends=Exp}
BooleanLiteral ::= true | false
StringLiteral ::= string | raw_string

// math constructs

MathTheoremDecl ::= ('Corollary'|'Theorem') identifier ':'
MathAssertionExp ';' {pin = 2}

//MathClassificationTheoremDecl ::= ('Corollary'|'Theorem') identifier ':'

private MathDefnSig ::=
            MathPrefixDefnSig
        |   MathOutfixDefnSig
        |   MathInfixDefnSig
        |   MathPostfixDefnSig

MathPrefixDefnSig ::=
MathPrefixNameList MathDefinitionParams? ':' MathExp {pin=1}

private MathPrefixNameList ::=
MathSymbolName (',' MathSymbolName)* {recoverWhile=MathPrefixListRec}
private MathPrefixListRec ::= !(':'|';'|'(')

private MathPrefixDefnSigs ::= MathPrefixDefnSig
(',' MathPrefixDefnSig)* {recoverWhile=CategoricalSigListRec}
private CategoricalSigListRec ::= !('is')

MathInfixDefnSig ::=
        '(' MathVarDecl ')' MathSymbolName
        '(' MathVarDecl ')' ':' MathExp {pin=4}

MathOutfixDefnSig ::=
('|'|'||'|'<'|'⎝'|'⟨') MathVarDecl ('⟩'|'⎠'|'|'|'||'|'>') ':' MathExp {pin=1}

MathPostfixDefnSig ::=
'(' MathVarDecl ')' '[' MathVarDecl ']' ':' MathExp {pin=2}

MathSymbolName ::= identifier|
('o'|'true'|'false'|int|'+'|'-'|'*'|'/'|'>'|'≤'|
 '<'|'<='|'>='|'≥'|'not'|'⌐'|'≼'|'ϒ'|'∪₊'|'≤ᵤ')

private MathDefinitionParams ::= '(' MathDefnParamList ')' { pin=1}
private ParamListRec ::= !(')'|';')
private MathDefnParamList ::= MathVarDeclGroup (',' MathVarDeclGroup)* {pin=1 recoverWhile=ParamListRec}

MathCategoricalDefnDecl ::= 'Categorical' 'Definition' 'for'
MathPrefixDefnSigs 'is' MathExp ';' {pin=2}

MathStandardDefnDecl ::= ('Implicit')? 'Definition'
    MathDefnSig ('is' MathAssertionExp)? ';' {pin=2}

MathInductiveDefnDecl ::= 'Inductive' 'Definition'
MathDefnSig 'is'
'(i.)' MathAssertionExp ';'
'(ii.)' MathAssertionExp ';' {pin=2}

// mathematical variables

MathVarDeclGroup ::= MathVarDeclList ':' MathExp {pin=1}

MathVarDecl ::= MathVarDef ':' MathExp {pin=2 extends=MathVarDeclGroup}
private MathVarDeclList ::= MathVarDef &(!(')')) (',' MathVarDef)* {pin=1}
MathVarDef ::= identifier

// mathematical clauses

IntializationClause ::= 'initialization' (EnsuresClause) {pin=1};
RequiresClause ::= 'requires' MathAssertionExp (EntailsClause)? ';' {pin=1}
EnsuresClause ::= 'ensures' MathAssertionExp ';' {pin=1}
ConstraintsClause ::= ('constraints') MathAssertionExp ';' {pin=1}
ConventionsClause ::= 'conventions' MathAssertionExp (EntailsClause)? ';' {pin=1}
CorrespondenceClause ::= 'correspondence' MathAssertionExp ';' {pin=1}
ChangingClause ::= 'changing' ExpArgumentList ';' {pin=1}
MaintainingClause ::= 'maintaining' MathAssertionExp ';' {pin=1}
DecreasingClause ::= 'decreasing' MathAssertionExp ';' {pin=1}
EntailsClause ::= 'which_entails' MathExp {pin=1}

// mathematical expressions

MathAssertionExp ::= MathQuantifiedExp|MathExp

MathQuantifiedExp ::= ('∃'|'∀'|'Exists'|'Forall') MathVarDeclGroup ',' MathAssertionExp {pin=1}

MathExp ::=
      MathBooleanInfixApplyExp
    | MathImpliesInfixApplyExp
    | MathEqualityInfixApplyExp
    | MathRelationalInfixApplyExp
    | MathApplicationInfixApplyExp
    | MathSetInfixApplyExp
    | MathAddInfixApplyExp
    | MathMultInfixApplyExp
    | MathIdentInfixApplyExp
    | MathOutfixGroup
    | MathIncomingUnaryApplyExp
    | MathJoiningInfixApplyExp
    | MathPrefixApplyExp
    | MathPrefixGeneralizedSqbrApplyExp
    | MathPrefixGeneralizedCeilApplyExp
    | MathNestedExp
    | MathPrimeExp {methods=[getResMathMetaTypeExp]}

//private rules for operators with the same precedence
private MathOutfixGroup ::=
      MathBarOutfixApplyExp
    | MathAngleOutfixApplyExp
    | MathDblBarOutfixApplyExp
    | MathSqBrOutfixApplyExp
    | MathCupOutfixApplyExp
    | MathAngle1OutfixApplyExp

MathAddInfixApplyExp ::= MathExp MathAddOp MathExp
MathBooleanInfixApplyExp ::= MathExp MathBooleanOp MathExp
MathImpliesInfixApplyExp ::= MathExp MathImpliesOp MathExp
MathMultInfixApplyExp ::= MathExp MathMultOp MathExp
MathRelationalInfixApplyExp ::= MathExp MathRelationalOp MathExp
MathJoiningInfixApplyExp ::= MathExp MathJoiningOp MathExp
MathEqualityInfixApplyExp ::= MathExp MathEqualityOp MathExp
MathSetInfixApplyExp ::= MathExp MathSetContainmentOp MathExp
MathIdentInfixApplyExp  ::= MathExp identifier MathExp
MathApplicationInfixApplyExp ::= MathExp MathArrowOp MathExp

MathIncomingUnaryApplyExp ::= '@' MathExp
MathPrefixApplyExp ::= MathExp '(' MathArgList ')' {pin=2}
MathPrefixGeneralizedSqbrApplyExp ::= MathExp '[' GeneralizedApplyArgList']' {pin=2 recoverWhile=GeneralizedApplyArgList}
MathPrefixGeneralizedCeilApplyExp ::= MathExp '⎡' GeneralizedApplyArgList'⎤' {pin=2 recoverWhile=GeneralizedApplyArgList}
private GeneralizedApplyArgList ::= MathExp (',' MathExp)* {pin=1 recoverWhile=GeneralizedApplyRecover}
private GeneralizedApplyRecover ::= !(']'|'⎤')

MathTypeAssertionExp ::= MathExp ':' MathExp {pin=2}
MathNestedExp ::= '(' MathAssertionExp ')' {pin=1}

private MathMultOp ::= (MathReferenceExp '::')? ('*'|'/'|'%'|'⨯'|'ᴴ⨯')
private MathAddOp ::= (MathReferenceExp '::')? ('+'|'-'|'~')
private MathJoiningOp ::= (MathReferenceExp '::')? ('o'|'union'|'∪'|'∪₊'|'intersect'|'∩'|'∩₊')
private MathArrowOp ::= (MathReferenceExp '::')? ('->'|'⟶')
private MathRelationalOp ::= (MathReferenceExp '::')? ('<'|'>'|'<='|'≤'|'≤ᵤ'|'>='|'≥')
private MathEqualityOp ::= (MathReferenceExp '::')? ('='|'/='|'≠')
private MathSetContainmentOp ::= (MathReferenceExp '::')? ('is_in'|'is_not_in'|'∈'|'∉');
private MathImpliesOp ::= (MathReferenceExp '::')? ('implies')
private MathBooleanOp ::= (MathReferenceExp '::')? ('and'|'or'|'∧'|'∨'|'iff'|)

private MathPrimeExp ::=
          MathSymbolExp
        | MathTypeAssertionExp
        | MathSetComprehensionExp
        | MathSetExp
        | MathLambdaExp
        | MathSelectorExp
        | MathAlternativeExp
        | MathCartProdExp
        | MathLiteralExp

MathLiteralExp ::= (int|'true'|'false')

MathCartProdExp ::= 'Cart_Prod' ResMathCartVarGroup+  'end' {pin=1}
private ResMathCartVarGroup ::= MathVarDeclGroup ';' {pin=1}

MathSymbolExp ::=  MathReferenceExp MathQualifiedReferenceExp? {elementType=MathReferenceExp}
left MathQualifiedReferenceExp ::= '::' MathSymbolName {elementType=MathReferenceExp}
MathReferenceExp ::= MathSymbolName {methods=[getReference getQualifier getIdentifier] extends=MathExp}

MathBarOutfixApplyExp ::= '|' MathExp '|'
MathDblBarOutfixApplyExp ::= '||' MathExp '||'
MathAngleOutfixApplyExp ::= '<' MathExp '>'
MathAngle1OutfixApplyExp ::= '⟨' MathExp '⟩'
MathSqBrOutfixApplyExp ::= '[' MathExp ']'
MathCupOutfixApplyExp ::= '⎝' MathExp '⎠'

MathSelectorExp ::= MathExp '.' MathExp

MathSetComprehensionExp ::= '{' MathVarDecl '|' MathExp '}'

MathSetExp ::= '{' MathSetElementsList? '}' {pin=2}
MathSetElementsList ::= MathExp (',' MathExp)* {recoverWhile=MathSetEleRecover}
private MathSetEleRecover ::= !('}')

MathLambdaExp ::= (lambda|'λ') MathVarDecl ','  MathExp  {pin=3}
MathAlternativeExp ::= '{{' (MathAlternativeItemExp)+ '}}' {pin=2}
MathAlternativeItemExp ::= MathExp ('if' MathExp ';' | 'otherwise' ';') {pin=1}

fake MathInfixApplyExp ::= MathExp+ {
  methods=[left="MathExp[0]" right="MathExp[1]"]
}

private MathArgList ::= MathExp (',' MathExp)* {pin=1 recoverWhile=ParamListRec}