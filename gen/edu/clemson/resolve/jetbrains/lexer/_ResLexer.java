/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package edu.clemson.resolve.jetbrains.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import edu.clemson.resolve.jetbrains.ResTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static edu.clemson.resolve.jetbrains.RESOLVEParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>ResLexer.flex</tt>
 */
class _ResLexer implements FlexLexer, ResTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14784 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1"+
    "\33\1\34\1\23\1\35\1\36\2\23\1\15\1\37\3\23\1\40\10\23\1\41\1\42\20\23\1\43"+
    "\2\23\1\44\5\23\1\45\4\23\1\46\1\47\4\23\51\15\1\50\3\15\1\51\1\52\4\15\1"+
    "\53\12\23\1\54\u0381\23");

  /* The ZZ_CMAP_Y table has 2880 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\22\1\23\1\24\3\22\1\25\10\13\1\26\12\13"+
    "\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13\1\32\1\1\1\34\1"+
    "\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1\43\1\44\1\13\1"+
    "\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52\2\13\1\53\1\1"+
    "\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\16\1\64\1\57\1\60\1\65"+
    "\1\1\1\66\1\67\1\70\1\71\1\72\1\60\1\73\1\1\1\74\1\55\1\75\1\76\1\57\1\60"+
    "\1\73\1\1\1\63\1\55\1\43\1\77\1\100\1\101\1\102\1\1\1\74\1\67\1\1\1\103\1"+
    "\40\1\60\1\53\1\1\1\104\1\55\1\1\1\103\1\40\1\60\1\105\1\1\1\62\1\55\1\106"+
    "\1\103\1\40\1\13\1\107\1\62\1\110\1\55\1\111\1\112\1\113\1\13\1\114\1\115"+
    "\1\1\1\67\1\1\1\27\2\13\1\116\1\115\1\117\2\1\1\120\1\121\1\122\1\123\1\124"+
    "\1\125\2\1\1\74\1\1\1\117\1\1\1\126\1\13\1\127\1\1\1\130\7\1\2\13\1\32\1\110"+
    "\1\117\1\131\1\132\1\133\1\134\1\117\2\13\1\135\2\13\1\136\24\13\1\137\1\140"+
    "\2\13\1\137\2\13\1\141\1\142\1\143\3\13\1\142\3\13\1\32\2\1\1\13\1\1\5\13"+
    "\1\144\1\27\45\13\1\145\1\13\1\27\1\32\4\13\1\32\1\146\1\147\1\16\1\13\1\16"+
    "\1\13\1\16\1\147\1\74\3\13\1\150\1\1\1\151\1\117\2\1\1\117\5\13\1\31\2\13"+
    "\1\152\4\13\1\42\1\13\1\153\2\1\1\67\1\13\1\154\1\51\2\13\1\155\1\13\1\102"+
    "\1\117\2\1\1\13\1\115\3\13\1\51\2\1\2\117\1\156\5\1\1\112\2\13\1\150\1\157"+
    "\1\117\2\1\1\160\1\13\1\161\1\44\2\13\1\42\1\1\2\13\1\150\1\1\1\162\1\44\1"+
    "\13\1\154\6\1\1\163\1\164\14\13\4\1\21\13\1\144\2\13\1\144\1\165\1\13\1\154"+
    "\3\13\1\166\1\167\1\170\1\127\1\167\2\1\1\171\1\172\3\1\1\173\1\1\1\127\6"+
    "\1\1\174\1\175\1\176\1\177\1\200\3\1\1\201\1\202\1\203\1\204\1\205\1\206\2"+
    "\1\1\207\1\210\1\211\3\1\1\212\1\1\1\213\1\214\1\215\1\1\1\216\120\1\1\217"+
    "\1\1\1\220\40\1\1\221\1\1\1\222\1\223\34\1\2\13\1\153\2\13\1\153\10\13\1\224"+
    "\1\225\2\13\1\135\3\13\1\226\1\1\1\13\1\115\4\227\4\1\1\110\35\1\1\230\2\1"+
    "\1\231\1\27\4\13\1\232\1\27\4\13\1\136\1\112\1\13\1\154\1\27\4\13\1\153\1"+
    "\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42\4\1\135\13\1\42\2\1\10\13\1\127\4\1"+
    "\2\13\1\154\20\13\1\127\1\13\1\233\1\1\2\13\1\153\1\110\1\13\1\154\4\13\1"+
    "\42\2\1\1\234\1\235\5\13\1\236\1\13\1\154\1\31\3\1\1\234\1\237\1\13\1\33\1"+
    "\1\3\13\1\150\1\235\2\13\1\150\1\1\1\117\1\1\1\240\1\44\1\13\1\42\1\13\1\115"+
    "\1\1\1\13\1\127\1\52\2\13\1\33\1\110\1\117\1\241\1\242\2\13\1\50\1\1\1\243"+
    "\1\117\1\13\1\244\3\13\1\245\1\246\1\247\1\32\1\70\1\250\1\251\1\227\2\13"+
    "\1\136\1\42\7\13\1\33\1\117\72\13\1\150\1\13\1\252\2\13\1\155\120\1\26\13"+
    "\1\154\6\13\1\102\2\1\1\115\1\253\1\60\1\254\1\255\6\13\1\16\1\1\1\160\25"+
    "\13\1\154\1\1\4\13\1\235\2\13\1\31\2\1\1\155\7\1\1\241\7\13\1\127\1\1\1\117"+
    "\1\27\1\32\1\27\1\32\1\256\4\13\1\153\1\257\1\260\2\1\1\261\1\13\1\143\1\262"+
    "\2\154\2\1\7\13\1\32\30\1\1\13\1\127\3\13\1\74\2\1\2\13\1\1\1\13\1\263\2\13"+
    "\1\42\1\13\1\154\2\13\1\264\3\1\11\13\1\154\1\117\5\1\2\13\1\31\3\13\1\150"+
    "\11\1\23\13\1\115\1\13\1\42\1\31\11\1\1\265\2\13\1\266\1\13\1\42\1\13\1\115"+
    "\1\13\1\153\4\1\1\13\1\267\1\13\1\42\1\13\1\102\4\1\3\13\1\270\4\1\1\74\1"+
    "\271\1\13\1\150\2\1\1\13\1\127\1\13\1\127\2\1\1\126\1\13\1\51\1\1\3\13\1\42"+
    "\1\13\1\42\1\13\1\33\1\13\1\16\6\1\4\13\1\50\3\1\3\13\1\33\3\13\1\33\60\1"+
    "\1\160\2\13\1\31\2\1\1\67\1\1\1\160\2\13\2\1\1\13\1\50\1\117\1\160\1\13\1"+
    "\115\1\67\1\1\2\13\1\272\1\160\2\13\1\33\1\273\1\274\2\1\1\13\1\72\1\155\5"+
    "\1\1\275\1\276\1\50\2\13\1\153\1\1\1\117\1\76\1\57\1\60\1\73\1\1\1\277\1\16"+
    "\21\1\3\13\1\1\1\300\1\117\12\1\2\13\1\153\2\1\1\301\2\1\3\13\1\1\1\302\1"+
    "\117\2\1\2\13\1\32\1\1\1\117\3\1\1\13\1\102\1\1\1\117\26\1\4\13\1\117\1\110"+
    "\34\1\3\13\1\50\20\1\71\13\1\102\16\1\14\13\1\150\53\1\2\13\1\153\75\1\44"+
    "\13\1\115\33\1\43\13\1\50\1\13\1\153\1\117\6\1\1\13\1\154\1\1\3\13\1\1\1\150"+
    "\1\117\1\160\1\303\1\13\67\1\4\13\1\51\1\74\3\1\1\160\6\1\1\16\77\1\6\13\1"+
    "\32\1\127\1\50\1\102\66\1\5\13\1\241\3\13\1\147\1\304\1\305\1\306\3\13\1\307"+
    "\1\310\1\13\1\311\1\312\1\40\24\13\1\313\1\13\1\40\1\136\1\13\1\136\1\13\1"+
    "\241\1\13\1\241\1\153\1\13\1\153\1\13\1\60\1\13\1\60\1\13\1\314\3\315\14\13"+
    "\1\51\123\1\1\306\1\13\1\316\1\317\1\320\1\321\1\322\1\323\1\324\1\155\1\325"+
    "\1\155\24\1\55\13\1\115\2\1\103\13\1\51\15\13\1\154\150\13\1\16\25\1\41\13"+
    "\1\154\36\1");

  /* The ZZ_CMAP_A table has 3424 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\2\22\0\1\3\1\16\1\20\1\27\3\0\1\25\1\35\1\36\1\6\1"+
    "\16\1\41\1\16\1\30\1\5\1\13\10\23\1\12\1\37\1\40\1\16\1\17\1\16\2\0\2\7\1"+
    "\50\1\71\1\72\1\76\2\7\1\77\4\7\1\102\1\103\1\54\1\7\1\101\1\7\1\106\1\22"+
    "\1\107\1\110\3\7\1\0\1\21\2\0\1\10\1\26\1\51\1\46\1\62\1\56\1\57\1\24\1\60"+
    "\1\64\1\61\2\7\1\63\1\74\1\65\1\55\1\66\1\105\1\52\1\67\1\53\1\75\1\70\1\104"+
    "\1\73\1\47\1\100\1\31\1\34\1\32\1\16\6\0\1\1\24\0\1\7\1\0\1\14\4\0\1\14\3"+
    "\0\1\7\4\0\1\7\5\0\27\7\1\14\12\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5"+
    "\15\1\14\2\15\2\14\4\15\1\14\1\15\6\14\1\15\1\14\3\15\1\14\1\15\1\14\24\15"+
    "\1\14\30\15\1\42\12\15\1\14\11\15\2\7\10\0\6\7\1\0\26\7\2\0\1\7\6\0\10\7\10"+
    "\0\13\7\5\0\3\7\15\0\12\11\4\0\6\7\1\0\1\7\17\0\2\7\7\0\2\7\12\11\3\7\2\0"+
    "\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\11\6\7\4\0\2\7\4\0\1\7\5\0\6\7\4"+
    "\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\17\0\26\7\3\0\1\7\2\0\1\7\7\0\12"+
    "\7\4\0\12\11\1\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\3\0\1\7"+
    "\20\0\1\7\15\0\2\7\1\0\1\7\5\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0\2\7\17\0\4"+
    "\7\1\0\1\7\7\0\12\11\2\0\3\7\20\0\11\7\1\0\3\7\1\0\16\7\1\0\2\7\1\0\5\7\3"+
    "\0\1\7\2\0\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7\1\0\6\7\3\0\3\7\1\0\4\7"+
    "\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\13\0\10\7\1\0\2\7\10\0\3"+
    "\7\5\0\4\7\1\0\5\7\3\0\1\7\3\0\2\7\15\0\13\7\2\0\1\7\21\0\1\7\12\0\6\7\5\0"+
    "\22\7\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11\0\1\7\1\0\2\7\14\0\12\11\7\0\2"+
    "\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7"+
    "\2\0\2\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7\11\0\12\11\2\0\14\7\1\0"+
    "\24\7\13\0\5\7\3\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0\1\7\1"+
    "\0\6\7\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2"+
    "\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0\16\7\2\0\6\7\2\0\15\7"+
    "\2\0\1\7\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1\7\4\0\1\7\3\0\11\7\1\0\1\7\5\0\17"+
    "\7\1\0\16\7\2\0\14\7\13\0\1\7\15\0\7\7\7\0\16\7\15\0\2\7\12\11\3\0\3\7\11"+
    "\0\4\7\1\0\4\7\3\0\2\7\11\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7\1\0\7\7\1"+
    "\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\14\0\2\1\10\0\1\33\16\0\1\7\15\0\1"+
    "\7\2\0\1\15\4\0\1\7\2\0\12\7\1\0\1\15\2\0\1\14\1\7\1\15\2\7\1\15\6\0\1\15"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\2\7\13\0\6\14"+
    "\7\0\1\14\4\0\3\14\1\0\1\14\2\0\2\14\21\0\10\14\10\0\1\14\3\0\6\14\12\0\1"+
    "\45\2\0\1\44\12\0\4\14\1\0\1\14\4\0\2\14\3\0\1\14\11\0\4\14\5\0\1\43\35\0"+
    "\1\14\4\0\7\14\6\0\2\14\16\0\7\14\1\0\3\14\12\0\3\14\15\0\6\14\5\0\3\14\1"+
    "\0\3\14\23\0\1\14\24\0\1\14\5\7\6\0\4\7\3\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7"+
    "\6\0\2\7\12\0\5\7\5\0\2\7\3\0\7\7\6\0\3\7\12\11\2\7\13\0\11\7\2\0\27\7\2\0"+
    "\7\7\1\0\3\7\1\0\4\7\1\0\4\7\2\0\6\7\3\0\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\11"+
    "\5\7\1\0\3\7\1\0\10\7\4\0\7\7\3\0\1\7\3\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0"+
    "\1\7\1\0\1\7\30\0\3\7\3\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0"+
    "\1\7\1\0\10\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2"+
    "\0\6\7\2\0\6\7\2\0\3\7\3\0\14\7\1\0\16\7\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7"+
    "\4\0\16\7\2\0\1\7\1\0\14\7\1\0\2\7\3\0\1\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6"+
    "\7\1\0\3\7\1\0\12\7\3\0\1\7\12\0\4\7\13\0\12\11\1\7\1\0\1\7\3\0\7\7\1\0\1"+
    "\7\1\0\4\7\1\0\17\7\1\0\2\7\14\0\3\7\4\0\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13"+
    "\0\10\7\5\0\3\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7"+
    "\1\0\4\7\2\0\10\7\1\0\7\7\1\0\14\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2\0\13"+
    "\7\1\0\10\7\2\0\22\11\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0"+
    "\1\7\6\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1"+
    "\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7"+
    "\1\0\1\7\1\0\12\7\1\0\5\7\1\0\3\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\1\5\2\6\2\7"+
    "\1\10\1\11\1\5\1\1\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\31\5\1\32\1\33\1\11"+
    "\1\0\3\5\2\0\1\12\1\0\1\34\1\35\1\36"+
    "\1\37\1\40\11\5\1\41\1\5\1\42\5\5\1\43"+
    "\1\5\1\44\14\5\1\45\12\5\1\33\3\5\1\46"+
    "\1\47\1\1\1\50\1\51\22\5\1\52\34\5\1\53"+
    "\1\5\1\33\1\0\2\5\1\54\12\5\1\55\1\56"+
    "\1\57\4\5\1\60\22\5\1\61\11\5\1\62\2\5"+
    "\1\63\53\5\1\64\1\65\5\5\1\66\5\5\1\67"+
    "\13\5\1\70\15\5\1\71\1\5\1\72\6\5\1\73"+
    "\11\5\1\74\11\5\1\75\4\5\1\76\1\77\7\5"+
    "\1\100\4\5\1\101\1\102\1\103\1\104\3\5\1\105"+
    "\2\5\1\106\4\5\1\107\5\5\1\110\1\5\1\111"+
    "\4\5\1\112\1\5\1\113\1\114\1\115\1\116\1\5"+
    "\1\117\5\5\1\120\2\5\1\121\1\5\1\122\1\5"+
    "\1\123\1\124\2\5\1\125\1\126\4\5\1\127\4\5"+
    "\1\130\2\5\1\131\1\132\1\133\1\134\1\135\6\5"+
    "\1\136\1\137\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\111\0\222\0\333\0\111\0\u0124"+
    "\0\u016d\0\111\0\111\0\u0124\0\111\0\u01b6\0\u01ff\0\u0248"+
    "\0\u0291\0\111\0\u02da\0\u0323\0\u036c\0\111\0\111\0\111"+
    "\0\111\0\u03b5\0\111\0\111\0\u0124\0\111\0\111\0\111"+
    "\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd"+
    "\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845"+
    "\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d"+
    "\0\u0ad6\0\u0b1f\0\u0b68\0\111\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c"+
    "\0\u0cd5\0\u0d1e\0\111\0\u0d67\0\111\0\111\0\u0db0\0\111"+
    "\0\u0124\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf"+
    "\0\u0ff8\0\u1041\0\u0124\0\u108a\0\u0124\0\u10d3\0\u111c\0\u1165"+
    "\0\u11ae\0\u11f7\0\u0124\0\u1240\0\u0124\0\u1289\0\u12d2\0\u131b"+
    "\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563"+
    "\0\u15ac\0\u0124\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762"+
    "\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa"+
    "\0\u0124\0\111\0\u0cd5\0\111\0\111\0\u19f3\0\u1a3c\0\u1a85"+
    "\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd"+
    "\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u0124"+
    "\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114"+
    "\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c"+
    "\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4"+
    "\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u0124\0\u2711\0\111\0\u18cf"+
    "\0\u275a\0\u27a3\0\u0124\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910"+
    "\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u0124\0\u0124\0\u0124"+
    "\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u0124\0\u2bea\0\u2c33\0\u2c7c"+
    "\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4"+
    "\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u0124"+
    "\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b"+
    "\0\u3354\0\u0124\0\u339d\0\u33e6\0\u0124\0\u342f\0\u3478\0\u34c1"+
    "\0\u350a\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u3709"+
    "\0\u3752\0\u379b\0\u37e4\0\u382d\0\u3876\0\u38bf\0\u3908\0\u3951"+
    "\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07\0\u3b50\0\u3b99"+
    "\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06\0\u3d4f\0\u3d98\0\u3de1"+
    "\0\u3e2a\0\u3e73\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029"+
    "\0\u0124\0\u0124\0\u4072\0\u40bb\0\u4104\0\u414d\0\u4196\0\u0124"+
    "\0\u41df\0\u4228\0\u4271\0\u42ba\0\u4303\0\u0124\0\u434c\0\u4395"+
    "\0\u43de\0\u4427\0\u4470\0\u44b9\0\u4502\0\u454b\0\u4594\0\u45dd"+
    "\0\u4626\0\u0124\0\u466f\0\u46b8\0\u4701\0\u474a\0\u4793\0\u47dc"+
    "\0\u4825\0\u486e\0\u48b7\0\u4900\0\u4949\0\u4992\0\u49db\0\u0124"+
    "\0\u4a24\0\u0124\0\u4a6d\0\u4ab6\0\u4aff\0\u4b48\0\u4b91\0\u4bda"+
    "\0\u0124\0\u4c23\0\u4c6c\0\u4cb5\0\u4cfe\0\u4d47\0\u4d90\0\u4dd9"+
    "\0\u4e22\0\u4e6b\0\u0124\0\u4eb4\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8"+
    "\0\u5021\0\u506a\0\u50b3\0\u50fc\0\u0124\0\u5145\0\u518e\0\u51d7"+
    "\0\u5220\0\u0124\0\u0124\0\u5269\0\u52b2\0\u52fb\0\u5344\0\u538d"+
    "\0\u53d6\0\u541f\0\u0124\0\u5468\0\u54b1\0\u54fa\0\u5543\0\u0124"+
    "\0\u0124\0\u0124\0\u0124\0\u558c\0\u55d5\0\u561e\0\u0124\0\u5667"+
    "\0\u56b0\0\u0124\0\u56f9\0\u5742\0\u578b\0\u57d4\0\u0124\0\u581d"+
    "\0\u5866\0\u58af\0\u58f8\0\u5941\0\u0124\0\u598a\0\u0124\0\u59d3"+
    "\0\u5a1c\0\u5a65\0\u5aae\0\u0124\0\u5af7\0\u0124\0\u0124\0\u0124"+
    "\0\u0124\0\u5b40\0\u0124\0\u5b89\0\u5bd2\0\u5c1b\0\u5c64\0\u5cad"+
    "\0\u0124\0\u5cf6\0\u5d3f\0\u0124\0\u5d88\0\u0124\0\u5dd1\0\u0124"+
    "\0\u0124\0\u5e1a\0\u5e63\0\u0124\0\u0124\0\u5eac\0\u5ef5\0\u5f3e"+
    "\0\u5f87\0\u0124\0\u5fd0\0\u6019\0\u6062\0\u60ab\0\u0124\0\u60f4"+
    "\0\u613d\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124\0\u6186\0\u61cf"+
    "\0\u6218\0\u6261\0\u62aa\0\u62f3\0\u0124\0\u0124\0\u0124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\2\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\7\1\15\1\16\1\2"+
    "\1\10\1\11\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\10\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\10\1\52"+
    "\1\53\3\10\1\54\2\10\1\55\1\56\1\10\1\57"+
    "\1\60\1\61\1\62\1\10\1\63\1\64\1\65\1\66"+
    "\1\10\1\67\1\70\1\71\112\0\2\3\1\0\1\3"+
    "\111\0\1\72\1\73\111\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\43\10\12\0\2\11\7\0"+
    "\1\11\65\0\2\16\1\0\15\16\1\74\1\75\67\16"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\15\0\1\10"+
    "\3\0\3\10\1\76\1\77\2\10\1\100\33\10\21\101"+
    "\1\102\67\101\26\21\1\103\62\21\30\0\1\104\111\0"+
    "\1\105\111\0\1\106\75\0\1\107\17\0\1\110\60\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\1\10\1\111\41\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\3\10\1\112\3\10\1\113"+
    "\6\10\1\114\24\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\15\10\1\115\25\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\11\10\1\116\31\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\1\10\1\117\2\10\1\120"+
    "\11\10\1\121\24\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\4\10\1\122\36\10\7\0"+
    "\5\10\1\0\1\10\4\0\2\10\1\123\15\0\1\10"+
    "\3\0\5\10\1\124\35\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\15\0\1\10\3\0\7\10\1\125\1\10"+
    "\1\126\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\15\10\1\127\1\10\1\130\2\10"+
    "\1\131\2\10\1\132\15\10\7\0\5\10\1\0\1\10"+
    "\4\0\2\10\1\133\15\0\1\10\3\0\17\10\1\134"+
    "\1\10\1\135\21\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\7\10\1\136\5\10\1\137"+
    "\1\140\24\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\4\10\1\141\36\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\142\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\17\10\1\143\5\10\1\144\15\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\15\0\1\10"+
    "\3\0\3\10\1\145\3\10\1\146\33\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\20\10"+
    "\1\147\1\150\21\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\3\10\1\151\37\10\7\0"+
    "\5\10\1\0\1\10\4\0\2\10\1\152\15\0\1\10"+
    "\3\0\17\10\1\153\6\10\1\154\14\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\155\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\7\10\1\156\33\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\20\10"+
    "\1\157\22\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\16\10\1\160\24\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\1\10"+
    "\1\161\14\10\1\162\24\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\15\0\1\10\3\0\3\10\1\163\37\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\15\0\1\10"+
    "\3\0\16\10\1\164\24\10\2\72\1\0\106\72\6\73"+
    "\1\165\102\73\13\0\1\16\4\0\5\16\21\0\1\16"+
    "\2\0\3\16\11\0\1\16\2\0\1\16\2\0\1\16"+
    "\1\0\1\16\22\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\15\10\1\166\10\10\1\167\14\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\15\0\1\10"+
    "\3\0\7\10\1\170\33\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\15\0\1\10\3\0\4\10\1\171\36\10"+
    "\25\0\1\172\104\0\1\101\2\0\1\101\1\173\20\0"+
    "\1\101\2\0\3\101\11\0\1\101\2\0\1\101\50\0"+
    "\1\174\117\0\1\175\60\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\4\10\1\176\1\177\35\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\15\0\1\10"+
    "\3\0\4\10\1\200\12\10\1\201\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\3\10"+
    "\1\202\37\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\5\10\1\203\35\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\3\10"+
    "\1\204\14\10\1\205\1\206\15\10\1\207\3\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\20\10\1\210\22\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\27\10\1\211\13\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\11\10\1\212\31\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\7\10\1\213\1\10\1\214"+
    "\31\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\16\10\1\215\24\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\14\10\1\216"+
    "\26\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\21\10\1\217\21\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\10\10\1\220"+
    "\5\10\1\221\2\10\1\222\21\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\3\10\1\223"+
    "\37\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\5\10\1\224\3\10\1\225\31\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\13\10\1\226\27\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\4\10\1\227\12\10\1\230"+
    "\23\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\11\10\1\231\31\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\3\10\1\232"+
    "\37\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\11\10\1\233\31\10\7\0\5\10\1\0"+
    "\1\10\4\0\2\10\1\234\15\0\1\10\3\0\43\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\15\0\1\10"+
    "\3\0\16\10\1\235\24\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\15\0\1\10\3\0\5\10\1\236\35\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\15\0\1\10"+
    "\3\0\13\10\1\237\27\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\15\0\1\10\3\0\10\10\1\240\32\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\15\0\1\10"+
    "\3\0\10\10\1\241\32\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\15\0\1\10\3\0\11\10\1\242\31\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\15\0\1\10"+
    "\3\0\14\10\1\243\26\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\15\0\1\10\3\0\10\10\1\244\32\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\15\0\1\10"+
    "\3\0\20\10\1\245\22\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\15\0\1\10\3\0\3\10\1\246\10\10"+
    "\1\247\26\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\5\10\1\250\35\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\251\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\252\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\20\10"+
    "\1\253\22\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\254\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\4\10"+
    "\1\255\36\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\256\27\10\5\73\1\257"+
    "\1\260\102\73\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\261\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\13\10"+
    "\1\262\27\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\26\10\1\263\14\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\5\10"+
    "\1\264\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\265\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\7\10"+
    "\1\266\33\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\14\10\1\267\26\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\13\10"+
    "\1\270\27\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\271\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\15\10"+
    "\1\272\25\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\15\10\1\273\25\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\5\10"+
    "\1\274\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\27\10\1\275\13\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\276\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\277\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\17\10"+
    "\1\300\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\14\10\1\301\26\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\14\10"+
    "\1\302\26\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\303\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\4\10"+
    "\1\304\36\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\305\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\3\10"+
    "\1\306\37\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\27\10\1\307\13\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\15\10"+
    "\1\310\25\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\311\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\26\10"+
    "\1\312\14\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\5\10\1\313\35\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\4\10"+
    "\1\314\36\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\315\1\316\20\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\3\10\1\317\37\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\17\10\1\320\23\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\21\10\1\321\21\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\13\10\1\322\27\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\3\10\1\323\37\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\11\10\1\324\31\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\17\10\1\325\23\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\11\10\1\326\31\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\3\10\1\327\37\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\21\10\1\330\21\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\13\10\1\331\27\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\27\10\1\332\13\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\15\10\1\333\25\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\15\10\1\334\25\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\7\10\1\335\17\10\1\336\13\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\13\10\1\337"+
    "\27\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\4\10\1\340\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\14\10\1\341"+
    "\26\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\11\10\1\342\31\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\7\10\1\343"+
    "\33\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\15\10\1\344\25\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\11\10\1\345"+
    "\31\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\15\10\1\346\25\10\7\0\1\10\1\347"+
    "\3\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\43\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\12\10\1\350\30\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\15\10\1\351"+
    "\25\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\11\10\1\352\31\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\17\10\1\353"+
    "\23\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\4\10\1\354\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\13\10\1\355"+
    "\27\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\3\10\1\356\37\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\7\10\1\357"+
    "\33\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\13\10\1\360\27\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\11\10\1\361"+
    "\31\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\13\10\1\362\27\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\4\10\1\363"+
    "\36\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\11\10\1\364\31\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\17\10\1\365"+
    "\23\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\4\10\1\366\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\27\10\1\367"+
    "\13\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\4\10\1\370\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\20\10\1\371"+
    "\22\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\13\10\1\372\27\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\11\10\1\373"+
    "\31\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\5\10\1\374\35\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\11\10\1\375"+
    "\31\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\4\10\1\376\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\12\10\1\377"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\11\10\1\u0100\31\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\17\10\1\u0101"+
    "\23\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\17\10\1\u0102\23\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\17\10\1\u0103"+
    "\23\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\5\10\1\u0104\35\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\15\10\1\u0105"+
    "\25\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\5\10\1\u0106\35\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\15\10\1\u0107"+
    "\25\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\14\10\1\u0108\26\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\13\10\1\u0109"+
    "\27\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\13\10\1\u010a\27\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\4\10\1\u010b"+
    "\36\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\4\10\1\u010c\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\14\10\1\u010d"+
    "\26\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\3\10\1\u010e\37\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\16\10\1\u010f"+
    "\24\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\4\10\1\u0110\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\11\10\1\u0111"+
    "\31\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\1\10\1\u0112\41\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\6\10\1\u0113"+
    "\34\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\7\10\1\u0114\33\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\15\10\1\u0115"+
    "\25\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\20\10\1\u0116\22\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\3\10\1\u0117"+
    "\37\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\21\10\1\u0118\21\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\32\10\1\u0119"+
    "\10\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\14\10\1\u011a\26\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\4\10\1\u011b"+
    "\36\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\4\10\1\u011c\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\10\10\1\u011d"+
    "\32\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\21\10\1\u011e\21\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\36\10\1\u011f"+
    "\4\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\3\10\1\u0120\37\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\14\10\1\u0121"+
    "\26\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\11\10\1\u0122\31\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\3\10\1\u0123"+
    "\37\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\17\10\1\u0124\23\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\15\10\1\u0125"+
    "\25\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\3\10\1\u0126\37\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\21\10\1\u0127"+
    "\21\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\4\10\1\u0128\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\17\10\1\u0129"+
    "\23\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\21\10\1\u012a\21\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\13\10\1\u012b"+
    "\27\10\7\0\5\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\4\10\1\u012c\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\15\0\1\10\3\0\11\10\1\u012d"+
    "\1\10\1\u012e\27\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\14\10\1\u012f\26\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\21\10\1\u0130\21\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\3\10\1\u0131\37\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\11\10\1\u0132\31\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\11\10\1\u0133\31\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\13\10\1\u0134\27\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\5\10\1\u0135\35\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\14\10\1\u0136\26\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\32\10\1\u0137\10\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\10\10\1\u0138\32\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\21\10\1\u0139\21\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\11\10\1\u013a\31\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\5\10\1\u013b\35\10\7\0"+
    "\1\10\1\u013c\3\10\1\0\1\10\4\0\3\10\15\0"+
    "\1\10\3\0\43\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\11\10\1\u013d\31\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\4\10\1\u013e\36\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\4\10\1\u013f\36\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\3\10\1\u0140\37\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\15\0\1\10\3\0\5\10\1\u0141\35\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\15\0\1\10\3\0"+
    "\1\u0142\42\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\u0143\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\u0144\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\u0145\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\u0146\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\27\10\1\u0147\13\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\13\10"+
    "\1\u0148\27\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\u0149\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\u014a\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\u014b\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\5\10"+
    "\1\u014c\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\3\10\1\u014d\37\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\3\10"+
    "\1\u014e\37\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\15\10\1\u014f\25\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\20\10"+
    "\1\u0150\22\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\3\10\1\u0151\37\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\5\10"+
    "\1\u0152\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\17\10\1\u0153\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\22\10"+
    "\1\u0154\20\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\u0155\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\5\10"+
    "\1\u0156\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\u0157\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\13\10"+
    "\1\u0158\27\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\u0159\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\10\10"+
    "\1\u015a\32\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\u015b\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\5\10"+
    "\1\u015c\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\u015d\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\13\10"+
    "\1\u015e\27\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\3\10\1\u015f\37\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\13\10"+
    "\1\u0160\27\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\u0161\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\u0162\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\26\10\1\u0163\14\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\7\10"+
    "\1\u0164\33\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\u0165\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\4\10"+
    "\1\u0166\36\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\15\10\1\u0167\25\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\10\10"+
    "\1\u0168\32\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\u0169\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\21\10"+
    "\1\u016a\21\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\u016b\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\4\10"+
    "\1\u016c\36\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\u016d\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\13\10"+
    "\1\u016e\27\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\10\10\1\u016f\32\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\u0170\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\15\10\1\u0171\25\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\4\10"+
    "\1\u0172\36\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\u0173\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\7\10"+
    "\1\u0174\33\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\u0175\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\13\10"+
    "\1\u0176\27\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\12\10\1\u0177\30\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\u0178\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\u0179\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\26\10"+
    "\1\u017a\14\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\7\10\1\u017b\33\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\17\10"+
    "\1\u017c\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\1\10\1\u017d\41\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\22\10"+
    "\1\u017e\20\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\5\10\1\u017f\35\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\5\10"+
    "\1\u0180\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\22\10\1\u0181\20\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\7\10"+
    "\1\u0182\33\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\17\10\1\u0183\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\10\10"+
    "\1\u0184\32\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\14\10\1\u0185\26\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\1\10"+
    "\1\u0186\41\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\u0187\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\u0188\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\u0189\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\17\10"+
    "\1\u018a\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\u018b\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\15\10"+
    "\1\u018c\25\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\32\10\1\u018d\10\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\17\10"+
    "\1\u018e\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\17\10\1\u018f\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\7\10"+
    "\1\u0190\33\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\u0191\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\7\10"+
    "\1\u0192\33\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\u0193\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\17\10"+
    "\1\u0194\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\u0195\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\u0196\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\u0197\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\11\10"+
    "\1\u0198\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\17\10\1\u0199\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\5\10"+
    "\1\u019a\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\3\10\1\u019b\37\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\12\10"+
    "\1\u019c\30\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\1\10\1\u019d\41\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\3\10"+
    "\1\u019e\37\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\10\10\1\u019f\32\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\5\10"+
    "\1\u01a0\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\17\10\1\u01a1\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\17\10"+
    "\1\u01a2\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\17\10\1\u01a3\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\17\10"+
    "\1\u01a4\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\7\10\1\u01a5\33\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\3\10"+
    "\1\u01a6\37\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\15\10\1\u01a7\25\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\5\10"+
    "\1\u01a8\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\u01a9\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\21\10"+
    "\1\u01aa\21\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\u01ab\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\5\10"+
    "\1\u01ac\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\12\10\1\u01ad\30\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\17\10"+
    "\1\u01ae\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\13\10\1\u01af\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\13\10"+
    "\1\u01b0\27\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\17\10\1\u01b1\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\15\10"+
    "\1\u01b2\25\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\7\10\1\u01b3\33\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\14\10"+
    "\1\u01b4\26\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\21\10\1\u01b5\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\15\0\1\10\3\0\17\10"+
    "\1\u01b6\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\15\0\1\10\3\0\11\10\1\u01b7\31\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25404];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\1\1\1\11\4\1\1\11\3\1\4\11\1\1\2\11"+
    "\1\1\3\11\33\1\1\11\1\0\3\1\2\0\1\11"+
    "\1\0\2\11\1\1\1\11\61\1\1\11\1\1\2\11"+
    "\61\1\1\11\1\0\u0107\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ResLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ResLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 97: break;
          case 2: 
            { return NLS;
            }
          case 98: break;
          case 3: 
            { return WS;
            }
          case 99: break;
          case 4: 
            { return SYMBOL;
            }
          case 100: break;
          case 5: 
            { return IDENTIFIER;
            }
          case 101: break;
          case 6: 
            { return INT;
            }
          case 102: break;
          case 7: 
            { return MATH_SYMBOL;
            }
          case 103: break;
          case 8: 
            { return EQUALS;
            }
          case 104: break;
          case 9: 
            { return STRING;
            }
          case 105: break;
          case 10: 
            { return RAW_STRING;
            }
          case 106: break;
          case 11: 
            { return POUND;
            }
          case 107: break;
          case 12: 
            { return DOT;
            }
          case 108: break;
          case 13: 
            { return LBRACE;
            }
          case 109: break;
          case 14: 
            { return RBRACE;
            }
          case 110: break;
          case 15: 
            { return PRIME;
            }
          case 111: break;
          case 16: 
            { return BAR;
            }
          case 112: break;
          case 17: 
            { return LPAREN;
            }
          case 113: break;
          case 18: 
            { return RPAREN;
            }
          case 114: break;
          case 19: 
            { return COLON;
            }
          case 115: break;
          case 20: 
            { return SEMICOLON;
            }
          case 116: break;
          case 21: 
            { return COMMA;
            }
          case 117: break;
          case 22: 
            { return LAMBDA;
            }
          case 118: break;
          case 23: 
            { return NEQUALS;
            }
          case 119: break;
          case 24: 
            { return EXISTS;
            }
          case 120: break;
          case 25: 
            { return FORALL;
            }
          case 121: break;
          case 26: 
            { return LINE_COMMENT;
            }
          case 122: break;
          case 27: 
            { return MULTILINE_COMMENT;
            }
          case 123: break;
          case 28: 
            { return DBL_LBRACE;
            }
          case 124: break;
          case 29: 
            { return DBL_RBRACE;
            }
          case 125: break;
          case 30: 
            { return COLON_EQUALS;
            }
          case 126: break;
          case 31: 
            { return COLON_COLON;
            }
          case 127: break;
          case 32: 
            { return BY;
            }
          case 128: break;
          case 33: 
            { return OF;
            }
          case 129: break;
          case 34: 
            { return DO;
            }
          case 130: break;
          case 35: 
            { return IF;
            }
          case 131: break;
          case 36: 
            { return IS;
            }
          case 132: break;
          case 37: 
            { return PROG_IF;
            }
          case 133: break;
          case 38: 
            { return FOR;
            }
          case 134: break;
          case 39: 
            { return CHAR;
            }
          case 135: break;
          case 40: 
            { return TRIPLE_DOT;
            }
          case 136: break;
          case 41: 
            { return COLON_EQUALS_COLON;
            }
          case 137: break;
          case 42: 
            { return END;
            }
          case 138: break;
          case 43: 
            { return VAR;
            }
          case 139: break;
          case 44: 
            { return FROM;
            }
          case 140: break;
          case 45: 
            { return PARAM_TYPE;
            }
          case 141: break;
          case 46: 
            { return TRUE;
            }
          case 142: break;
          case 47: 
            { return THEN;
            }
          case 143: break;
          case 48: 
            { return ELSE;
            }
          case 144: break;
          case 49: 
            { return USES;
            }
          case 145: break;
          case 50: 
            { return FAMILY_TYPE;
            }
          case 146: break;
          case 51: 
            { return FALSE;
            }
          case 147: break;
          case 52: 
            { return WHILE;
            }
          case 148: break;
          case 53: 
            { return FAMILY;
            }
          case 149: break;
          case 54: 
            { return ALTERS;
            }
          case 150: break;
          case 55: 
            { return PRECIS;
            }
          case 151: break;
          case 56: 
            { return CLEARS;
            }
          case 152: break;
          case 57: 
            { return RECORD;
            }
          case 153: break;
          case 58: 
            { return NOTICE;
            }
          case 154: break;
          case 59: 
            { return CONCEPT;
            }
          case 155: break;
          case 60: 
            { return ENSURES;
            }
          case 156: break;
          case 61: 
            { return DEFINES;
            }
          case 157: break;
          case 62: 
            { return MODELED;
            }
          case 158: break;
          case 63: 
            { return UPDATES;
            }
          case 159: break;
          case 64: 
            { return THEOREM;
            }
          case 160: break;
          case 65: 
            { return REALIZED;
            }
          case 161: break;
          case 66: 
            { return REPLACES;
            }
          case 162: break;
          case 67: 
            { return RESTORES;
            }
          case 163: break;
          case 68: 
            { return REQUIRES;
            }
          case 164: break;
          case 69: 
            { return ENHANCED;
            }
          case 165: break;
          case 70: 
            { return EXEMPLAR;
            }
          case 166: break;
          case 71: 
            { return CHANGING;
            }
          case 167: break;
          case 72: 
            { return FACILITY;
            }
          case 168: break;
          case 73: 
            { return IMPLICIT;
            }
          case 169: break;
          case 74: 
            { return CART_PROD;
            }
          case 170: break;
          case 75: 
            { return COROLLARY;
            }
          case 171: break;
          case 76: 
            { return CHAINABLE;
            }
          case 172: break;
          case 77: 
            { return PROCEDURE;
            }
          case 173: break;
          case 78: 
            { return OTHERWISE;
            }
          case 174: break;
          case 79: 
            { return EVALUATES;
            }
          case 175: break;
          case 80: 
            { return PRESERVES;
            }
          case 176: break;
          case 81: 
            { return EXTENSION;
            }
          case 177: break;
          case 82: 
            { return INDUCTIVE;
            }
          case 178: break;
          case 83: 
            { return RECURSIVE;
            }
          case 179: break;
          case 84: 
            { return OPERATION;
            }
          case 180: break;
          case 85: 
            { return DECREASING;
            }
          case 181: break;
          case 86: 
            { return EXTERNALLY;
            }
          case 182: break;
          case 87: 
            { return DEFINITION;
            }
          case 183: break;
          case 88: 
            { return CATEGORICAL;
            }
          case 184: break;
          case 89: 
            { return CONSTRAINTS;
            }
          case 185: break;
          case 90: 
            { return CONVENTIONS;
            }
          case 186: break;
          case 91: 
            { return ENHANCEMENT;
            }
          case 187: break;
          case 92: 
            { return MAINTAINING;
            }
          case 188: break;
          case 93: 
            { return REALIZATION;
            }
          case 189: break;
          case 94: 
            { return WHICH_ENTAILS;
            }
          case 190: break;
          case 95: 
            { return INITIALIZATION;
            }
          case 191: break;
          case 96: 
            { return CORRESPONDENCE;
            }
          case 192: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
