/* The following code was generated by JFlex 1.4.3 on 12/29/15 7:17 PM */

package edu.clemson.resolve.jetbrains.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import edu.clemson.resolve.jetbrains.ResTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static edu.clemson.resolve.jetbrains.RESOLVEParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/29/15 7:17 PM from the specification file
 * <tt>ResLexer.flex</tt>
 */
class _ResLexer implements FlexLexer, ResTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\0\1\11"+
    "\2\0\1\52\1\0\1\16\1\27\1\30\1\13\1\53\1\33\1\54"+
    "\1\15\1\3\1\10\10\22\1\7\1\31\1\32\1\50\1\35\1\51"+
    "\1\0\1\14\2\4\1\61\1\70\1\71\1\74\2\4\1\75\5\4"+
    "\1\77\1\62\1\4\1\101\1\4\1\103\1\21\1\104\1\105\3\4"+
    "\1\25\1\17\1\26\1\0\1\5\1\20\1\36\1\57\1\47\1\40"+
    "\1\46\1\12\1\63\1\65\1\34\2\4\1\64\1\73\1\37\1\41"+
    "\1\66\1\102\1\42\1\44\1\43\1\45\1\67\1\100\1\72\1\60"+
    "\1\76\1\23\1\56\1\24\1\55\53\0\1\4\12\0\1\4\4\0"+
    "\1\4\5\0\27\4\1\0\37\4\1\0\u01ca\4\4\0\14\4\16\0"+
    "\5\4\7\0\1\4\1\0\1\4\201\0\5\4\1\0\2\4\2\0"+
    "\4\4\10\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0"+
    "\123\4\1\0\213\4\10\0\236\4\11\0\46\4\2\0\1\4\7\0"+
    "\47\4\110\0\33\4\5\0\3\4\55\0\53\4\25\0\12\6\4\0"+
    "\2\4\1\0\143\4\1\0\1\4\17\0\2\4\7\0\2\4\12\6"+
    "\3\4\2\0\1\4\20\0\1\4\1\0\36\4\35\0\131\4\13\0"+
    "\1\4\16\0\12\6\41\4\11\0\2\4\4\0\1\4\5\0\26\4"+
    "\4\0\1\4\11\0\1\4\3\0\1\4\27\0\31\4\107\0\1\4"+
    "\1\0\13\4\127\0\66\4\3\0\1\4\22\0\1\4\7\0\12\4"+
    "\4\0\12\6\1\0\7\4\1\0\7\4\5\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4"+
    "\20\0\1\4\15\0\2\4\1\0\3\4\4\0\12\6\2\4\23\0"+
    "\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\37\0\4\4\1\0\1\4\7\0\12\6\2\0"+
    "\3\4\20\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\5\4\3\0\1\4\22\0\1\4\17\0\2\4\4\0"+
    "\12\6\25\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\5\4\3\0\1\4\36\0\2\4\1\0\3\4\4\0"+
    "\12\6\1\0\1\4\21\0\1\4\1\0\6\4\3\0\3\4\1\0"+
    "\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0"+
    "\3\4\3\0\14\4\26\0\1\4\25\0\12\6\25\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\32\0"+
    "\2\4\6\0\2\4\4\0\12\6\25\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\3\0\1\4\40\0\1\4\1\0"+
    "\2\4\4\0\12\6\1\0\2\4\22\0\10\4\1\0\3\4\1\0"+
    "\51\4\2\0\1\4\20\0\1\4\21\0\2\4\4\0\12\6\12\0"+
    "\6\4\5\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0"+
    "\7\4\72\0\60\4\1\0\2\4\14\0\7\4\11\0\12\6\47\0"+
    "\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0"+
    "\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\4\4\1\0\2\4\11\0\1\4\2\0\5\4\1\0"+
    "\1\4\11\0\12\6\2\0\4\4\40\0\1\4\37\0\12\6\26\0"+
    "\10\4\1\0\44\4\33\0\5\4\163\0\53\4\24\0\1\4\12\6"+
    "\6\0\6\4\4\0\4\4\3\0\1\4\3\0\2\4\7\0\3\4"+
    "\4\0\15\4\14\0\1\4\1\0\12\6\6\0\46\4\1\0\1\4"+
    "\5\0\1\4\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4"+
    "\1\0\71\4\1\0\4\4\2\0\103\4\45\0\20\4\20\0\125\4"+
    "\14\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\25\0\15\4"+
    "\1\0\4\4\16\0\22\4\16\0\22\4\16\0\15\4\1\0\3\4"+
    "\17\0\64\4\43\0\1\4\4\0\1\4\3\0\12\6\46\0\12\6"+
    "\6\0\130\4\10\0\51\4\1\0\1\4\5\0\106\4\12\0\35\4"+
    "\51\0\12\6\36\4\2\0\5\4\13\0\54\4\25\0\7\4\10\0"+
    "\12\6\46\0\27\4\11\0\65\4\53\0\12\6\6\0\12\6\15\0"+
    "\1\4\135\0\57\4\21\0\7\4\4\0\12\6\51\0\36\4\15\0"+
    "\2\4\12\6\54\4\32\0\44\4\34\0\12\6\3\0\3\4\12\6"+
    "\44\4\153\0\4\4\1\0\4\4\3\0\2\4\11\0\300\4\100\0"+
    "\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0"+
    "\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0"+
    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\164\0\1\4\15\0"+
    "\1\4\20\0\15\4\145\0\1\4\4\0\1\4\2\0\12\4\1\0"+
    "\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\64\0"+
    "\2\4\u0a7b\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4\3\0"+
    "\2\4\14\0\46\4\1\0\1\4\5\0\1\4\2\0\70\4\7\0"+
    "\1\4\20\0\27\4\11\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\120\0"+
    "\1\4\u01d5\0\2\4\52\0\5\4\5\0\2\4\4\0\126\4\6\0"+
    "\3\4\1\0\132\4\1\0\4\4\5\0\51\4\3\0\136\4\21\0"+
    "\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cd\4\63\0\u048d\4\103\0"+
    "\56\4\2\0\u010d\4\3\0\20\4\12\6\2\4\24\0\57\4\20\0"+
    "\31\4\10\0\106\4\61\0\11\4\2\0\147\4\2\0\4\4\1\0"+
    "\4\4\14\0\13\4\115\0\12\4\1\0\3\4\1\0\4\4\1\0"+
    "\27\4\35\0\64\4\16\0\62\4\34\0\12\6\30\0\6\4\3\0"+
    "\1\4\4\0\12\6\34\4\12\0\27\4\31\0\35\4\7\0\57\4"+
    "\34\0\1\4\12\6\46\0\51\4\27\0\3\4\1\0\10\4\4\0"+
    "\12\6\6\0\27\4\3\0\1\4\5\0\60\4\1\0\1\4\3\0"+
    "\2\4\2\0\5\4\2\0\1\4\1\0\1\4\30\0\3\4\2\0"+
    "\13\4\7\0\3\4\14\0\6\4\2\0\6\4\2\0\6\4\11\0"+
    "\7\4\1\0\7\4\221\0\43\4\15\0\12\6\6\0\u2ba4\4\14\0"+
    "\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4\14\0"+
    "\5\4\5\0\1\4\1\0\12\4\1\0\15\4\1\0\5\4\1\0"+
    "\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0"+
    "\100\4\2\0\66\4\50\0\14\4\164\0\5\4\1\0\207\4\23\0"+
    "\12\6\7\0\32\4\6\0\32\4\13\0\131\4\3\0\6\4\2\0"+
    "\6\4\2\0\6\4\2\0\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\5\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\5"+
    "\1\25\3\5\1\26\5\5\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\21\5\1\36\1\37\1\40\1\7"+
    "\1\0\2\5\3\0\1\13\1\41\1\42\1\0\1\43"+
    "\1\44\1\45\1\5\1\46\4\5\1\47\1\5\1\50"+
    "\1\51\17\5\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\5\1\60\14\5\1\61\11\5\1\37\2\5\1\62"+
    "\1\63\1\64\1\1\2\0\1\65\1\66\4\5\1\67"+
    "\1\5\1\70\13\5\1\71\41\5\1\72\1\5\1\37"+
    "\1\0\2\5\1\73\1\0\13\5\1\74\1\75\1\76"+
    "\1\5\1\77\2\5\1\100\10\5\1\101\7\5\1\102"+
    "\16\5\1\103\2\5\1\104\1\5\1\105\2\5\1\106"+
    "\11\5\1\107\42\5\1\110\1\111\5\5\1\112\16\5"+
    "\1\113\6\5\1\114\1\115\3\5\1\116\4\5\1\117"+
    "\5\5\1\120\5\5\1\121\6\5\1\122\1\123\12\5"+
    "\1\124\4\5\1\125\2\5\1\126\7\5\1\127\6\5"+
    "\1\130\1\131\1\132\1\5\1\133\1\5\1\134\3\5"+
    "\1\135\10\5\1\136\1\5\1\137\5\5\1\140\1\141"+
    "\2\5\1\142\1\143\5\5\1\144\1\5\1\145\1\146"+
    "\1\147\1\5\1\150\1\5\1\151\1\5\1\152\1\5"+
    "\1\153\2\5\1\154\1\5\1\155\4\5\1\156\4\5"+
    "\1\157\1\160\1\161\1\162\1\5\1\163\1\164\11\5"+
    "\1\165\1\166\1\167\1\170";

  private static int [] zzUnpackAction() {
    int [] result = new int[483];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\106\0\322\0\u0118\0\u015e\0\106"+
    "\0\u01a4\0\u01ea\0\106\0\106\0\u0230\0\u0276\0\u02bc\0\u0302"+
    "\0\u0348\0\106\0\106\0\u038e\0\106\0\u03d4\0\106\0\106"+
    "\0\u041a\0\106\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\106\0\u0762\0\u07a8"+
    "\0\106\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992"+
    "\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\106\0\106\0\u0d66"+
    "\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\106\0\106\0\106"+
    "\0\u0f0a\0\106\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae"+
    "\0\u10f4\0\u113a\0\u0118\0\u1180\0\u0118\0\u0118\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\106\0\106\0\106"+
    "\0\106\0\106\0\106\0\u15e0\0\u0118\0\u1626\0\u166c\0\u16b2"+
    "\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2"+
    "\0\u1928\0\u0118\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u0118\0\106"+
    "\0\106\0\u0e7e\0\u1cb6\0\u1cfc\0\106\0\u0118\0\u1d42\0\u1d88"+
    "\0\u1dce\0\u1e14\0\u0118\0\u1e5a\0\u0118\0\u1ea0\0\u1ee6\0\u1f2c"+
    "\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c"+
    "\0\u0118\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576"+
    "\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6"+
    "\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6"+
    "\0\u2a1c\0\u2a62\0\u0118\0\u2aa8\0\106\0\u1be4\0\u2aee\0\u2b34"+
    "\0\106\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u0118\0\u0118\0\u0118"+
    "\0\u2ec2\0\u0118\0\u2f08\0\u2f4e\0\u0118\0\u2f94\0\u2fda\0\u3020"+
    "\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u0118\0\u31c4\0\u320a"+
    "\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368\0\u0118\0\u33ae\0\u33f4"+
    "\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624"+
    "\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u0118\0\u3782\0\u37c8\0\u0118"+
    "\0\u380e\0\106\0\u3854\0\u389a\0\u0118\0\u38e0\0\u3926\0\u396c"+
    "\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u0118\0\u3b56"+
    "\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86"+
    "\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6"+
    "\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6"+
    "\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416"+
    "\0\u445c\0\u0118\0\u0118\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba"+
    "\0\u0118\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4"+
    "\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u0118"+
    "\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u0118\0\u0118"+
    "\0\u4b78\0\u4bbe\0\u4c04\0\u0118\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c"+
    "\0\u0118\0\u4d62\0\u4da8\0\u4dee\0\u4e34\0\u4e7a\0\u0118\0\u4ec0"+
    "\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\u0118\0\u501e\0\u5064\0\u50aa"+
    "\0\u50f0\0\u5136\0\u517c\0\u0118\0\u0118\0\u51c2\0\u5208\0\u524e"+
    "\0\u5294\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u0118"+
    "\0\u547e\0\u54c4\0\u550a\0\u5550\0\u0118\0\u5596\0\u55dc\0\u0118"+
    "\0\u5622\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u0118"+
    "\0\u580c\0\u5852\0\u5898\0\u58de\0\u5924\0\u596a\0\u0118\0\u0118"+
    "\0\u0118\0\u59b0\0\u59f6\0\u5a3c\0\u0118\0\u5a82\0\u5ac8\0\u5b0e"+
    "\0\u0118\0\u5b54\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8"+
    "\0\u5d3e\0\u0118\0\u5d84\0\u0118\0\u5dca\0\u5e10\0\u5e56\0\u5e9c"+
    "\0\u5ee2\0\u0118\0\u0118\0\u5f28\0\u5f6e\0\u0118\0\u0118\0\u5fb4"+
    "\0\u5ffa\0\u6040\0\u6086\0\u60cc\0\u0118\0\u6112\0\u0118\0\u0118"+
    "\0\u0118\0\u6158\0\u0118\0\u619e\0\u0118\0\u61e4\0\u0118\0\u622a"+
    "\0\u0118\0\u6270\0\u62b6\0\u0118\0\u62fc\0\u0118\0\u6342\0\u6388"+
    "\0\u63ce\0\u6414\0\u0118\0\u645a\0\u64a0\0\u64e6\0\u652c\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u6572\0\u0118\0\u0118\0\u65b8\0\u65fe"+
    "\0\u6644\0\u668a\0\u66d0\0\u6716\0\u675c\0\u67a2\0\u67e8\0\u0118"+
    "\0\u0118\0\u0118\0\u0118";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[483];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\2\1\17"+
    "\1\6\1\7\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\6\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\6"+
    "\1\54\1\55\1\6\1\56\1\57\1\60\1\6\1\61"+
    "\1\62\1\6\1\63\1\64\1\65\1\6\1\66\1\67"+
    "\1\70\1\6\1\71\1\72\1\73\107\0\1\3\107\0"+
    "\1\74\7\0\1\75\21\0\1\76\54\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\12\6\7\0"+
    "\27\6\7\0\2\7\11\0\1\7\63\0\1\11\1\0"+
    "\7\11\1\77\5\11\1\100\66\11\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\1\101\2\6"+
    "\1\102\6\6\7\0\27\6\15\0\1\103\70\0\17\104"+
    "\1\105\66\104\20\17\1\106\65\17\23\0\1\107\106\0"+
    "\1\110\115\0\1\111\102\0\1\112\3\0\1\113\54\0"+
    "\5\6\1\0\1\114\6\0\2\6\11\0\1\6\1\0"+
    "\1\6\1\115\4\6\1\116\3\6\7\0\14\6\1\117"+
    "\12\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\6\1\120\10\6\7\0\5\6\1\121"+
    "\21\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\3\6\1\122\6\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\3\6\1\123\4\6\1\124\1\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\125\6\0\2\6\11\0\1\6\1\0"+
    "\4\6\1\126\1\127\4\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\10\6"+
    "\1\130\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\4\6\1\131\5\6"+
    "\7\0\1\6\1\132\4\6\1\133\20\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\1\6"+
    "\1\134\4\6\1\135\3\6\7\0\7\6\1\136\17\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\1\6\1\137\10\6\7\0\5\6\1\140\2\6"+
    "\1\141\2\6\1\142\13\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\3\6\1\143\6\6"+
    "\7\0\5\6\1\144\1\145\20\6\35\0\1\146\105\0"+
    "\1\147\123\0\1\150\103\0\1\151\2\0\1\152\107\0"+
    "\1\153\33\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\154\11\6\7\0\1\6\1\155\25\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\1\156\2\6\1\157\6\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\4\6\1\160\5\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\1\161\11\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\1\6\1\162\25\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\4\6\1\163\5\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\10\6"+
    "\1\164\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\13\6"+
    "\1\165\13\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\166\2\6\1\167\6\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\170\2\6\1\171\6\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\172\6\0\2\6\11\0\1\6"+
    "\1\0\1\6\1\173\10\6\7\0\14\6\1\174\12\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\7\6\1\175\17\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\12\6"+
    "\7\0\6\6\1\176\20\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\10\6\1\177\1\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\1\6\1\200\4\6"+
    "\1\201\20\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\202\11\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\12\6\7\0\6\6\1\203\20\6\1\74\1\0\104\74"+
    "\13\75\1\204\72\75\10\0\3\11\4\0\1\11\1\0"+
    "\2\11\13\0\2\11\2\0\2\11\1\0\1\11\11\0"+
    "\1\11\7\0\1\11\2\0\1\11\17\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\12\6\7\0"+
    "\5\6\1\205\6\6\1\206\12\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\4\6\1\207"+
    "\5\6\7\0\27\6\15\0\1\210\106\0\1\211\101\0"+
    "\1\104\3\0\1\212\1\104\16\0\2\104\2\0\2\104"+
    "\13\0\1\104\7\0\1\104\33\0\1\213\16\0\1\214"+
    "\102\0\1\215\60\0\5\6\1\0\1\216\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\217\1\0\5\6"+
    "\1\220\4\6\7\0\27\6\4\0\1\6\1\221\3\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\12\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\7\6\1\222\17\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\2\6\1\223\7\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\5\6"+
    "\1\224\4\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\5\6\1\225\4\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\11\6\1\226\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\12\6\7\0\6\6\1\227\20\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\6\6\1\230"+
    "\3\6\7\0\7\6\1\231\13\6\1\232\3\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\7\6\1\233\2\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\12\6\7\0"+
    "\7\6\1\234\17\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\10\6\1\235\1\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\236\1\0\12\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\10\6\1\237"+
    "\1\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\2\6\1\240\7\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\2\6\1\241\3\6\1\242\3\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\6\6\1\243\3\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\1\244\11\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\5\6\1\245\2\6"+
    "\1\246\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\1\6\1\247\2\6"+
    "\1\250\5\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\10\6\1\251\1\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\252\11\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\6\6\1\253\3\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\4\6\1\254"+
    "\1\255\4\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\1\6\1\256\2\6"+
    "\1\257\5\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\3\6\1\260\4\6"+
    "\1\261\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\14\6"+
    "\1\262\12\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\7\6\1\263\17\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\10\6\1\264\1\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\265\6\0\2\6\11\0\1\6\1\0\12\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\266\1\0\5\6\1\267\4\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\270"+
    "\1\0\12\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\2\6\1\271\7\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\11\6\1\272\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\4\6\1\273\5\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\2\6\1\274"+
    "\7\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\12\6\7\0\7\6\1\275"+
    "\17\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\10\6\1\276\1\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\277\1\0"+
    "\12\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\11\6\1\300\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\7\6\1\301\17\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\10\6"+
    "\1\302\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\4\6\1\303\5\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\304\1\0\12\6\7\0\27\6\3\75\1\305"+
    "\7\75\1\306\72\75\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\6\6\1\307\3\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\310\1\0\12\6\7\0\27\6\30\0\1\311\72\0"+
    "\1\312\74\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\5\6\1\313\4\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\10\6\1\314\1\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\315\1\0\1\6\1\316"+
    "\10\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\12\6\7\0\5\6\1\317"+
    "\21\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\10\6\1\320\1\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\4\6\1\321\5\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\10\6\1\322"+
    "\1\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\5\6\1\323\4\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\12\6\7\0\5\6\1\324\21\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\7\6\1\325\2\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\10\6\1\326"+
    "\1\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\10\6\1\327\1\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\6\1\330\10\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\3\6\1\331\6\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\6\6\1\332"+
    "\3\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\1\333\11\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\7\6\1\334\2\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\10\6"+
    "\1\335\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\5\6"+
    "\1\336\21\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\10\6\1\337\1\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\14\6\1\340\12\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\6\6"+
    "\1\341\3\6\7\0\10\6\1\342\16\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\4\6"+
    "\1\343\5\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\1\344\11\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\6\1\345\10\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\10\6\1\346\1\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\5\6\1\347"+
    "\4\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\10\6\1\350\1\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\6\6\1\341\2\6\1\351\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\3\6\1\352\6\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\11\6"+
    "\1\353\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\11\6\1\354\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\1\355\26\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\3\6\1\356"+
    "\6\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\6\6\1\357\3\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\360\1\0\12\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\6\6\1\361"+
    "\3\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\10\6\1\362\1\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\6\1\363\10\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\10\6\1\364\1\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\365\1\0\12\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\366\11\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\7\6"+
    "\1\367\2\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\5\6"+
    "\1\370\21\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\4\6\1\371\5\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\11\6\1\372\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\3\6\1\373"+
    "\3\6\1\374\2\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\10\6\1\375"+
    "\1\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\3\6\1\376\6\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\12\6\7\0\5\6\1\377\21\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\10\6\1\u0100\1\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\12\6\7\0"+
    "\5\6\1\u0101\21\6\30\0\1\u0102\61\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\u0103\1\0\12\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\4\6\1\u0104\5\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\1\6\1\u0105\10\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\3\6\1\u0106"+
    "\6\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\u0107\1\0\10\6\1\u0108\1\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\4\6\1\u0109\5\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\10\6\1\u010a\1\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\4\6\1\u010b"+
    "\5\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\3\6\1\u010c\6\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\u010d\11\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\u010e\1\0\12\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\6\1\u010f\10\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\5\6\1\u0110\4\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\4\6"+
    "\1\u0111\5\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\7\6\1\u0112\2\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\6\1\u0113\2\6\1\u0114\5\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\7\6\1\u0115\17\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\5\6\1\u0116\4\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\10\6"+
    "\1\u0117\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\10\6\1\u0118\1\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\4\6\1\u0119\5\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\4\6\1\u011a\22\6\4\0\1\6"+
    "\1\u011b\3\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\4\6"+
    "\1\u011c\22\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\10\6\1\u011d\1\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\5\6\1\u011e\21\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\10\6"+
    "\1\u011f\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\u0120\1\0\12\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\2\6\1\u0121\7\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\10\6"+
    "\1\u0122\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\1\6\1\u0123\10\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\5\6\1\u0124\4\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\1\6\1\u0125\10\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\5\6"+
    "\1\u0126\4\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\5\6"+
    "\1\u0127\21\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\5\6\1\u0128\21\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\5\6\1\u0129\21\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\11\6"+
    "\1\u012a\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\u012b\1\0\10\6\1\u012c\1\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\u012d\11\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\12\6"+
    "\7\0\6\6\1\u012e\20\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\4\6\1\u012f\5\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\4\6\1\u0130\5\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\4\6\1\u0131\5\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\10\6"+
    "\1\u0132\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\1\6"+
    "\1\u0133\25\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\u0134\11\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\6\6\1\u0135\3\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\5\6\1\u0136"+
    "\4\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\10\6\1\u0137\1\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\12\6\7\0\14\6\1\u0138\12\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\6\6\1\u0139\3\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\1\u013a\11\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\21\6\1\u013b\5\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\4\6\1\u013c\5\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\11\6"+
    "\1\u013d\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\4\6\1\u013e\5\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\10\6\1\u013f\1\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\10\6\1\u0140\1\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\1\u0141\11\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\2\6\1\u0142\7\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\1\6\1\u0143\10\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\12\6"+
    "\7\0\5\6\1\u0144\21\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\4\6\1\u0145\5\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\6\1\u0146\10\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\6\6\1\u0147\3\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\6\6"+
    "\1\u0148\3\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\u0149\1\0\12\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\3\6\1\u014a\23\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\3\6"+
    "\1\u014b\6\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\7\6"+
    "\1\u014c\17\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\5\6\1\u014d\21\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\2\6\1\u014e\7\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\6\6"+
    "\1\u014f\3\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\1\u0150\11\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\4\6\1\u0151\5\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\u0152\1\0"+
    "\10\6\1\u0153\1\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\6\6\1\u0154"+
    "\3\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\6\6\1\u0155\3\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\u0156\11\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\10\6"+
    "\1\u0157\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\u0158\1\0\12\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\5\6\1\u0159\21\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\5\6"+
    "\1\u015a\4\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\11\6\1\u015b\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\12\6\7\0\14\6\1\u015c\12\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\5\6\1\u015d\4\6\7\0\27\6\4\0\1\6\1\u015e"+
    "\3\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\12\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\2\6\1\u015f\7\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\6\6\1\u0160\3\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\10\6\1\u0161\1\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\12\6\7\0"+
    "\5\6\1\u0162\21\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\10\6\1\u0163\1\6\7\0"+
    "\27\6\4\0\1\6\1\u0164\3\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\12\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\6\6\1\u0165\3\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\10\6\1\u0166"+
    "\1\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\6\6\1\u0167\3\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\u0168\1\0\12\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\10\6\1\u0169"+
    "\1\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\10\6\1\u016a\1\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\10\6\1\u016b\1\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\6\6\1\u016c\3\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\6\6\1\u016d"+
    "\3\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\5\6\1\u016e\4\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\10\6\1\u016f\1\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\1\u0170\11\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\1\u0171\11\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\u0172\11\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\5\6"+
    "\1\u0173\4\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\7\6"+
    "\1\u0174\17\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\6\1\u0175\10\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\4\6\1\u0176\5\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\4\6"+
    "\1\u0177\5\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\5\6\1\u0178\4\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\u0179\11\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\7\6\1\u017a\2\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\12\6\7\0"+
    "\10\6\1\u017b\16\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\5\6\1\u017c\4\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\6\6\1\u017d\3\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\u017e\1\0"+
    "\12\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\u017f\1\0\12\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\2\6\1\u0180\7\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\5\6\1\u0181"+
    "\4\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\u0182\1\0\12\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\u0183\1\0"+
    "\12\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\10\6\1\u0184\1\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\u0185\1\0\12\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\10\6\1\u0186"+
    "\1\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\u0187\1\0\12\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\12\6\7\0\14\6\1\u0188\12\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\u0189\1\0\12\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\11\6\1\u018a\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\u018b\1\0\12\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\6\1\u018c\10\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\u018d"+
    "\1\0\12\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\6\6\1\u018e\3\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\6\6\1\u018f\3\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\6\6\1\u0190\3\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\6\6"+
    "\1\u0191\3\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\10\6\1\u0192\1\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\2\6\1\u0193\7\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\5\6\1\u0194\21\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\4\6"+
    "\1\u0195\5\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\u0196\1\0\12\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\u0197"+
    "\1\0\12\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\3\6\1\u0198\6\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\4\6\1\u0199\22\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\3\6\1\u019a\6\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\u019b\1\0\12\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\4\6\1\u019c\5\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\4\6\1\u019d\5\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\10\6"+
    "\1\u019e\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\u019f\1\0\12\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\3\6\1\u01a0\6\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\1\6"+
    "\1\u01a1\10\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\1\6"+
    "\1\u01a2\25\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\10\6\1\u01a3\16\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\5\6\1\u01a4\4\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\1\6"+
    "\1\u01a5\10\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\3\6\1\u01a6\6\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\6\1\u01a7\10\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\12\6\7\0\10\6\1\u01a8\16\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\12\6"+
    "\7\0\17\6\1\u01a9\7\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\5\6\1\u01aa\4\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\6\1\u01ab\10\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\5\6\1\u01ac\4\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\1\6"+
    "\1\u01ad\10\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\10\6\1\u01ae\1\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\6\6\1\u01af\3\6\7\0\27\6"+
    "\4\0\1\6\1\u01b0\3\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\12\6"+
    "\7\0\5\6\1\u01b1\21\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\1\6\1\u01b2\10\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\3\6\1\u01b3\6\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\1\6\1\u01b4\10\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\2\6"+
    "\1\u01b5\7\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\11\6\1\u01b6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\12\6\7\0\1\6\1\u01b7\25\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\10\6\1\u01b8\1\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\6\6\1\u01b9"+
    "\3\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\3\6\1\u01ba\6\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\6\1\u01bb\10\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\u01bc\1\0"+
    "\12\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\10\6\1\u01bd\1\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\5\6\1\u01be\4\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\1\6\1\u01bf\10\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\5\6\1\u01c0"+
    "\4\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\10\6\1\u01c1\1\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\1\u01c2\11\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\10\6"+
    "\1\u01c3\1\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\4\6"+
    "\1\u01c4\22\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\1\u01c5\26\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\12\6\7\0\1\6\1\u01c6\25\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\5\6\1\u01c7"+
    "\4\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\1\6\1\u01c8\10\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\2\6\1\u01c9\7\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\1\u01ca\11\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\1\6\1\u01cb\10\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\1\6\1\u01cc\10\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\1\u01cd\11\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\1\u01ce\11\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\5\6\1\u01cf\4\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\2\6\1\u01d0\7\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\12\6"+
    "\7\0\1\6\1\u01d1\25\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\6\6\1\u01d2\3\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\6\6\1\u01d3\3\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\10\6\1\u01d4\1\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\12\6"+
    "\7\0\5\6\1\u01d5\21\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\6\1\0\12\6\7\0\4\6"+
    "\1\u01d6\22\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\5\6\1\u01d7\4\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\u01d8"+
    "\1\0\12\6\7\0\27\6\4\0\5\6\1\0\1\6"+
    "\6\0\2\6\11\0\1\u01d9\1\0\12\6\7\0\27\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\1\6\1\u01da\10\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\u01db\1\0\12\6"+
    "\7\0\27\6\4\0\5\6\1\0\1\6\6\0\2\6"+
    "\11\0\1\6\1\0\12\6\7\0\5\6\1\u01dc\21\6"+
    "\4\0\5\6\1\0\1\6\6\0\2\6\11\0\1\6"+
    "\1\0\3\6\1\u01dd\6\6\7\0\27\6\4\0\5\6"+
    "\1\0\1\6\6\0\2\6\11\0\1\6\1\0\11\6"+
    "\1\u01de\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\3\6\1\u01df\6\6\7\0"+
    "\27\6\4\0\5\6\1\0\1\6\6\0\2\6\11\0"+
    "\1\6\1\0\6\6\1\u01e0\3\6\7\0\27\6\4\0"+
    "\5\6\1\0\1\6\6\0\2\6\11\0\1\6\1\0"+
    "\1\6\1\u01e1\10\6\7\0\27\6\4\0\5\6\1\0"+
    "\1\6\6\0\2\6\11\0\1\6\1\0\10\6\1\u01e2"+
    "\1\6\7\0\27\6\4\0\5\6\1\0\1\6\6\0"+
    "\2\6\11\0\1\6\1\0\1\6\1\u01e3\10\6\7\0"+
    "\27\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26670];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\1\11\2\1\2\11"+
    "\5\1\2\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\13\1\1\11\2\1\1\11\24\1\2\11\1\0\2\1"+
    "\3\0\3\11\1\0\1\11\33\1\6\11\34\1\2\11"+
    "\1\1\2\0\1\11\67\1\1\11\1\0\2\1\1\11"+
    "\1\0\67\1\1\11\341\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[483];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ResLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ResLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1752) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 70: 
          { return IS_IN;
          }
        case 121: break;
        case 5: 
          { return IDENTIFIER;
          }
        case 122: break;
        case 36: 
          { return COLON_EQUALS;
          }
        case 123: break;
        case 31: 
          { return MULTILINE_COMMENT;
          }
        case 124: break;
        case 2: 
          { return NLS;
          }
        case 125: break;
        case 16: 
          { return LPAREN;
          }
        case 126: break;
        case 23: 
          { return LESS;
          }
        case 127: break;
        case 119: 
          { return CORRESPONDENCE;
          }
        case 128: break;
        case 44: 
          { return PLUS_PLUS;
          }
        case 129: break;
        case 55: 
          { return AND;
          }
        case 130: break;
        case 66: 
          { return HYPO;
          }
        case 131: break;
        case 72: 
          { return WHILE;
          }
        case 132: break;
        case 71: 
          { return UNION;
          }
        case 133: break;
        case 120: 
          { return IMPLEMENTATION;
          }
        case 134: break;
        case 118: 
          { return INITIALIZATION;
          }
        case 135: break;
        case 34: 
          { return DBL_RBRACE;
          }
        case 136: break;
        case 60: 
          { return TRUE;
          }
        case 137: break;
        case 65: 
          { return BASE;
          }
        case 138: break;
        case 21: 
          { return EQUALS;
          }
        case 139: break;
        case 105: 
          { return INDUCTIVE;
          }
        case 140: break;
        case 18: 
          { return COLON;
          }
        case 141: break;
        case 77: 
          { return LAMBDA;
          }
        case 142: break;
        case 63: 
          { return USES;
          }
        case 143: break;
        case 57: 
          { return END;
          }
        case 144: break;
        case 74: 
          { return ALTERS;
          }
        case 145: break;
        case 73: 
          { return FAMILY;
          }
        case 146: break;
        case 54: 
          { return IFF;
          }
        case 147: break;
        case 85: 
          { return DEFINES;
          }
        case 148: break;
        case 33: 
          { return DBL_LBRACE;
          }
        case 149: break;
        case 29: 
          { return BAR;
          }
        case 150: break;
        case 100: 
          { return CART_PROD;
          }
        case 151: break;
        case 3: 
          { return WS;
          }
        case 152: break;
        case 112: 
          { return EXTENDED_BY;
          }
        case 153: break;
        case 113: 
          { return CONSTRAINTS;
          }
        case 154: break;
        case 19: 
          { return SEMICOLON;
          }
        case 155: break;
        case 20: 
          { return COMMA;
          }
        case 156: break;
        case 61: 
          { return PARAM_TYPE;
          }
        case 157: break;
        case 25: 
          { return MOD;
          }
        case 158: break;
        case 79: 
          { return FORALL;
          }
        case 159: break;
        case 11: 
          { return RAW_STRING;
          }
        case 160: break;
        case 88: 
          { return RESTORES;
          }
        case 161: break;
        case 86: 
          { return MODELED;
          }
        case 162: break;
        case 46: 
          { return MINUS_MINUS;
          }
        case 163: break;
        case 117: 
          { return WHICH_ENTAILS;
          }
        case 164: break;
        case 26: 
          { return PLUS;
          }
        case 165: break;
        case 111: 
          { return IMPLEMENTED;
          }
        case 166: break;
        case 110: 
          { return DEFINITION;
          }
        case 167: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 168: break;
        case 92: 
          { return EXEMPLAR;
          }
        case 169: break;
        case 82: 
          { return UPDATES;
          }
        case 170: break;
        case 4: 
          { return QUOTIENT;
          }
        case 171: break;
        case 47: 
          { return DBL_BAR;
          }
        case 172: break;
        case 10: 
          { return DOT;
          }
        case 173: break;
        case 76: 
          { return PRECIS;
          }
        case 174: break;
        case 75: 
          { return CLEARS;
          }
        case 175: break;
        case 39: 
          { return DO;
          }
        case 176: break;
        case 84: 
          { return CONCEPT;
          }
        case 177: break;
        case 116: 
          { return MAINTAINING;
          }
        case 178: break;
        case 69: 
          { return IND_HYPO;
          }
        case 179: break;
        case 52: 
          { return CHAR;
          }
        case 180: break;
        case 101: 
          { return COROLLARY;
          }
        case 181: break;
        case 59: 
          { return IND_BASE;
          }
        case 182: break;
        case 45: 
          { return RARROW;
          }
        case 183: break;
        case 68: 
          { return FALSE;
          }
        case 184: break;
        case 114: 
          { return CONVENTIONS;
          }
        case 185: break;
        case 13: 
          { return RBRACE;
          }
        case 186: break;
        case 106: 
          { return OPERATION;
          }
        case 187: break;
        case 98: 
          { return OTHERWISE;
          }
        case 188: break;
        case 67: 
          { return FAMILY_TYPE;
          }
        case 189: break;
        case 95: 
          { return IMPLICIT;
          }
        case 190: break;
        case 109: 
          { return EXTERNALLY;
          }
        case 191: break;
        case 104: 
          { return EXTENSION;
          }
        case 192: break;
        case 15: 
          { return RBRACK;
          }
        case 193: break;
        case 107: 
          { return RECURSIVE;
          }
        case 194: break;
        case 40: 
          { return OF;
          }
        case 195: break;
        case 30: 
          { return LINE_COMMENT;
          }
        case 196: break;
        case 6: 
          { return INT;
          }
        case 197: break;
        case 78: 
          { return EXISTS;
          }
        case 198: break;
        case 41: 
          { return OR;
          }
        case 199: break;
        case 97: 
          { return IS_NOT_IN;
          }
        case 200: break;
        case 38: 
          { return IS;
          }
        case 201: break;
        case 12: 
          { return LBRACE;
          }
        case 202: break;
        case 49: 
          { return PROG_IF;
          }
        case 203: break;
        case 28: 
          { return TILDE;
          }
        case 204: break;
        case 14: 
          { return LBRACK;
          }
        case 205: break;
        case 58: 
          { return VAR;
          }
        case 206: break;
        case 102: 
          { return PROCEDURE;
          }
        case 207: break;
        case 56: 
          { return NOT;
          }
        case 208: break;
        case 32: 
          { return NEQUALS;
          }
        case 209: break;
        case 9: 
          { return AT;
          }
        case 210: break;
        case 103: 
          { return PRESERVES;
          }
        case 211: break;
        case 64: 
          { return ELSE;
          }
        case 212: break;
        case 51: 
          { return TRIPLE_DOT;
          }
        case 213: break;
        case 7: 
          { return STRING;
          }
        case 214: break;
        case 37: 
          { return IF;
          }
        case 215: break;
        case 91: 
          { return EXTENDED;
          }
        case 216: break;
        case 99: 
          { return EVALUATES;
          }
        case 217: break;
        case 8: 
          { return MUL;
          }
        case 218: break;
        case 62: 
          { return THEN;
          }
        case 219: break;
        case 53: 
          { return COLON_EQUALS_COLON;
          }
        case 220: break;
        case 89: 
          { return REPLACES;
          }
        case 221: break;
        case 27: 
          { return MINUS;
          }
        case 222: break;
        case 50: 
          { return FOR;
          }
        case 223: break;
        case 83: 
          { return ENSURES;
          }
        case 224: break;
        case 17: 
          { return RPAREN;
          }
        case 225: break;
        case 93: 
          { return CHANGING;
          }
        case 226: break;
        case 81: 
          { return IMPLIES;
          }
        case 227: break;
        case 22: 
          { return CAT;
          }
        case 228: break;
        case 94: 
          { return FACILITY;
          }
        case 229: break;
        case 90: 
          { return REQUIRES;
          }
        case 230: break;
        case 24: 
          { return GREATER;
          }
        case 231: break;
        case 108: 
          { return DECREASING;
          }
        case 232: break;
        case 80: 
          { return RECORD;
          }
        case 233: break;
        case 42: 
          { return LESS_OR_EQUAL;
          }
        case 234: break;
        case 87: 
          { return THEOREM;
          }
        case 235: break;
        case 48: 
          { return BY;
          }
        case 236: break;
        case 96: 
          { return INTERSECT;
          }
        case 237: break;
        case 35: 
          { return COLONCOLON;
          }
        case 238: break;
        case 43: 
          { return GREATER_OR_EQUAL;
          }
        case 239: break;
        case 115: 
          { return CATEGORICAL;
          }
        case 240: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
