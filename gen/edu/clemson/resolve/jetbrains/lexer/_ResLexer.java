/* The following code was generated by JFlex 1.4.3 on 6/30/16 1:01 AM */

package edu.clemson.resolve.jetbrains.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import edu.clemson.resolve.jetbrains.ResTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static edu.clemson.resolve.jetbrains.RESOLVEParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/30/16 1:01 AM from the specification file
 * <tt>ResLexer.flex</tt>
 */
class _ResLexer implements FlexLexer, ResTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\13\1\14"+
    "\4\13\1\21\1\32\1\33\1\16\1\13\1\36\1\13\1\20\1\3"+
    "\1\10\10\25\1\7\1\34\1\35\1\13\1\41\1\13\1\42\1\17"+
    "\2\4\1\50\1\65\1\66\1\73\2\4\1\75\5\4\1\77\1\53"+
    "\1\4\1\101\1\4\1\103\1\24\1\104\1\105\3\4\1\30\1\22"+
    "\1\31\1\0\1\5\1\23\1\43\1\45\1\57\1\55\1\46\1\15"+
    "\1\56\1\61\1\37\2\4\1\60\1\71\1\62\1\54\1\63\1\102"+
    "\1\51\1\44\1\52\1\70\1\64\1\100\1\67\1\47\1\76\1\26"+
    "\1\13\1\27\54\0\1\4\12\0\1\4\4\0\1\4\5\0\27\4"+
    "\1\0\37\4\1\0\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4"+
    "\1\0\1\4\201\0\5\12\1\11\2\12\2\11\4\12\10\11\1\12"+
    "\1\11\3\12\1\11\1\12\1\11\24\12\1\11\30\12\1\40\72\12"+
    "\1\11\11\12\202\4\10\0\236\4\11\0\46\4\2\0\1\4\7\0"+
    "\47\4\110\0\33\4\5\0\3\4\55\0\53\4\25\0\12\6\4\0"+
    "\2\4\1\0\143\4\1\0\1\4\17\0\2\4\7\0\2\4\12\6"+
    "\3\4\2\0\1\4\20\0\1\4\1\0\36\4\35\0\131\4\13\0"+
    "\1\4\16\0\12\6\41\4\11\0\2\4\4\0\1\4\5\0\26\4"+
    "\4\0\1\4\11\0\1\4\3\0\1\4\27\0\31\4\107\0\1\4"+
    "\1\0\13\4\127\0\66\4\3\0\1\4\22\0\1\4\7\0\12\4"+
    "\4\0\12\6\1\0\7\4\1\0\7\4\5\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4"+
    "\20\0\1\4\15\0\2\4\1\0\3\4\4\0\12\6\2\4\23\0"+
    "\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\37\0\4\4\1\0\1\4\7\0\12\6\2\0"+
    "\3\4\20\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\5\4\3\0\1\4\22\0\1\4\17\0\2\4\4\0"+
    "\12\6\25\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\5\4\3\0\1\4\36\0\2\4\1\0\3\4\4\0"+
    "\12\6\1\0\1\4\21\0\1\4\1\0\6\4\3\0\3\4\1\0"+
    "\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0"+
    "\3\4\3\0\14\4\26\0\1\4\25\0\12\6\25\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\32\0"+
    "\2\4\6\0\2\4\4\0\12\6\25\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\3\0\1\4\40\0\1\4\1\0"+
    "\2\4\4\0\12\6\1\0\2\4\22\0\10\4\1\0\3\4\1\0"+
    "\51\4\2\0\1\4\20\0\1\4\21\0\2\4\4\0\12\6\12\0"+
    "\6\4\5\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0"+
    "\7\4\72\0\60\4\1\0\2\4\14\0\7\4\11\0\12\6\47\0"+
    "\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0"+
    "\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\4\4\1\0\2\4\11\0\1\4\2\0\5\4\1\0"+
    "\1\4\11\0\12\6\2\0\4\4\40\0\1\4\37\0\12\6\26\0"+
    "\10\4\1\0\44\4\33\0\5\4\163\0\53\4\24\0\1\4\12\6"+
    "\6\0\6\4\4\0\4\4\3\0\1\4\3\0\2\4\7\0\3\4"+
    "\4\0\15\4\14\0\1\4\1\0\12\6\6\0\46\4\1\0\1\4"+
    "\5\0\1\4\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4"+
    "\1\0\71\4\1\0\4\4\2\0\103\4\45\0\20\4\20\0\125\4"+
    "\14\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\25\0\15\4"+
    "\1\0\4\4\16\0\22\4\16\0\22\4\16\0\15\4\1\0\3\4"+
    "\17\0\64\4\43\0\1\4\4\0\1\4\3\0\12\6\46\0\12\6"+
    "\6\0\130\4\10\0\51\4\1\0\1\4\5\0\106\4\12\0\35\4"+
    "\51\0\12\6\36\4\2\0\5\4\13\0\54\4\25\0\7\4\10\0"+
    "\12\6\46\0\27\4\11\0\65\4\53\0\12\6\6\0\12\6\15\0"+
    "\1\4\135\0\57\4\21\0\7\4\4\0\12\6\51\0\36\4\15\0"+
    "\2\4\12\6\54\4\32\0\44\4\34\0\12\6\3\0\3\4\12\6"+
    "\44\4\153\0\4\4\1\0\4\4\3\0\2\4\11\0\300\4\100\0"+
    "\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0"+
    "\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0"+
    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\164\0\1\4\15\0"+
    "\1\4\20\0\15\4\145\0\1\4\4\0\1\4\2\0\12\4\1\0"+
    "\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\64\0"+
    "\2\4\173\0\1\74\2\11\1\72\374\11\300\11\u0430\0\20\11\u0200\0"+
    "\u0100\11\u0100\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4\3\0"+
    "\2\4\14\0\46\4\1\0\1\4\5\0\1\4\2\0\70\4\7\0"+
    "\1\4\20\0\27\4\11\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\120\0"+
    "\1\4\u01d5\0\2\4\52\0\5\4\5\0\2\4\4\0\126\4\6\0"+
    "\3\4\1\0\132\4\1\0\4\4\5\0\51\4\3\0\136\4\21\0"+
    "\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cd\4\63\0\u048d\4\103\0"+
    "\56\4\2\0\u010d\4\3\0\20\4\12\6\2\4\24\0\57\4\20\0"+
    "\31\4\10\0\106\4\61\0\11\4\2\0\147\4\2\0\4\4\1\0"+
    "\4\4\14\0\13\4\115\0\12\4\1\0\3\4\1\0\4\4\1\0"+
    "\27\4\35\0\64\4\16\0\62\4\34\0\12\6\30\0\6\4\3\0"+
    "\1\4\4\0\12\6\34\4\12\0\27\4\31\0\35\4\7\0\57\4"+
    "\34\0\1\4\12\6\46\0\51\4\27\0\3\4\1\0\10\4\4\0"+
    "\12\6\6\0\27\4\3\0\1\4\5\0\60\4\1\0\1\4\3\0"+
    "\2\4\2\0\5\4\2\0\1\4\1\0\1\4\30\0\3\4\2\0"+
    "\13\4\7\0\3\4\14\0\6\4\2\0\6\4\2\0\6\4\11\0"+
    "\7\4\1\0\7\4\221\0\43\4\15\0\12\6\6\0\u2ba4\4\14\0"+
    "\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4\14\0"+
    "\5\4\5\0\1\4\1\0\12\4\1\0\15\4\1\0\5\4\1\0"+
    "\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0"+
    "\100\4\2\0\66\4\50\0\14\4\164\0\5\4\1\0\207\4\23\0"+
    "\12\6\7\0\32\4\6\0\32\4\13\0\131\4\3\0\6\4\2\0"+
    "\6\4\2\0\6\4\2\0\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\2\7"+
    "\1\4\1\10\1\5\1\11\1\12\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\5\1\25\1\26\21\5\1\27\1\5\1\30\7\5"+
    "\1\31\1\32\1\10\1\0\3\5\1\4\2\0\1\33"+
    "\1\34\1\0\1\35\1\36\1\37\2\5\1\40\2\5"+
    "\1\41\13\5\1\42\2\5\1\43\16\5\1\44\12\5"+
    "\2\32\3\5\1\45\1\46\1\47\1\1\2\0\1\50"+
    "\6\5\1\51\51\5\1\52\1\5\2\32\1\4\2\5"+
    "\1\53\1\54\1\0\3\5\1\55\1\56\14\5\1\57"+
    "\1\60\1\61\11\5\1\62\4\5\1\63\10\5\1\64"+
    "\3\5\1\65\2\5\1\32\1\0\1\66\1\5\1\67"+
    "\52\5\1\70\1\71\2\5\1\72\15\5\1\73\5\5"+
    "\1\74\4\5\1\27\5\5\1\30\5\5\1\75\4\5"+
    "\1\76\10\5\1\77\13\5\1\100\1\5\1\101\1\5"+
    "\1\102\7\5\1\103\3\5\1\104\1\5\1\105\4\5"+
    "\1\106\1\107\1\110\5\5\1\111\4\5\1\112\1\5"+
    "\1\113\6\5\1\114\2\5\1\115\1\5\1\116\1\5"+
    "\1\117\1\120\3\5\1\121\1\5\1\122\1\5\1\123"+
    "\1\5\1\124\1\5\1\125\2\5\1\126\3\5\1\127"+
    "\2\5\1\130\4\5\1\131\1\132\1\133\1\134\1\5"+
    "\1\135\1\136\11\5\1\137\1\140\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\106\0\322\0\u0118\0\u015e\0\106"+
    "\0\106\0\u0118\0\u01a4\0\u01ea\0\u0230\0\106\0\u0276\0\u02bc"+
    "\0\106\0\u0302\0\u0348\0\106\0\106\0\u038e\0\106\0\u03d4"+
    "\0\106\0\u01a4\0\u041a\0\u0118\0\106\0\u0460\0\u04a6\0\u04ec"+
    "\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c"+
    "\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\106\0\u0906"+
    "\0\106\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0"+
    "\0\u0b36\0\u0b7c\0\106\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda"+
    "\0\u0d20\0\u0d66\0\106\0\106\0\u0dac\0\u0df2\0\u0118\0\u0118"+
    "\0\u0e38\0\u0e7e\0\u0118\0\u0ec4\0\u0f0a\0\u0118\0\u0f50\0\u0f96"+
    "\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6"+
    "\0\u120c\0\u0118\0\u1252\0\u1298\0\u0118\0\u12de\0\u1324\0\u136a"+
    "\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a"+
    "\0\u15e0\0\u1626\0\u166c\0\u0118\0\u16b2\0\u16f8\0\u173e\0\u1784"+
    "\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4"+
    "\0\u19fa\0\u1a40\0\u1a86\0\u0118\0\u01a4\0\106\0\u0d20\0\u1acc"+
    "\0\u1b12\0\106\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6"+
    "\0\u0118\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0"+
    "\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300"+
    "\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530"+
    "\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760"+
    "\0\u27a6\0\u27ec\0\u0118\0\u2832\0\u2878\0\u01a4\0\u19b4\0\u28be"+
    "\0\u2904\0\u0118\0\106\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u0118"+
    "\0\u0118\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06"+
    "\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u0118\0\u0118\0\u0118"+
    "\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94"+
    "\0\u2fda\0\u0118\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u0118\0\u3138"+
    "\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322\0\u0118"+
    "\0\u3368\0\u33ae\0\u33f4\0\u0118\0\u343a\0\u3480\0\106\0\u2878"+
    "\0\u0118\0\u34c6\0\106\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624"+
    "\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854"+
    "\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84"+
    "\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4"+
    "\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4"+
    "\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u0118\0\u0118\0\u4088"+
    "\0\u40ce\0\u0118\0\u4114\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272"+
    "\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c\0\u0118"+
    "\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba\0\u0118\0\u4600\0\u4646"+
    "\0\u468c\0\u46d2\0\u0118\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830"+
    "\0\u0118\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u0118\0\u49d4"+
    "\0\u4a1a\0\u4a60\0\u4aa6\0\u0118\0\u4aec\0\u4b32\0\u4b78\0\u4bbe"+
    "\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u0118\0\u4d1c\0\u4d62\0\u4da8"+
    "\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8"+
    "\0\u0118\0\u501e\0\u0118\0\u5064\0\u0118\0\u50aa\0\u50f0\0\u5136"+
    "\0\u517c\0\u51c2\0\u5208\0\u524e\0\u0118\0\u5294\0\u52da\0\u5320"+
    "\0\u0118\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u0118"+
    "\0\u0118\0\u0118\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u0118"+
    "\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u0118\0\u5780\0\u0118\0\u57c6"+
    "\0\u580c\0\u5852\0\u5898\0\u58de\0\u5924\0\u0118\0\u596a\0\u59b0"+
    "\0\u0118\0\u59f6\0\u0118\0\u5a3c\0\u0118\0\u0118\0\u5a82\0\u5ac8"+
    "\0\u5b0e\0\u0118\0\u5b54\0\u0118\0\u5b9a\0\u0118\0\u5be0\0\u0118"+
    "\0\u5c26\0\u0118\0\u5c6c\0\u5cb2\0\u0118\0\u5cf8\0\u5d3e\0\u5d84"+
    "\0\u0118\0\u5dca\0\u5e10\0\u0118\0\u5e56\0\u5e9c\0\u5ee2\0\u5f28"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u5f6e\0\u0118\0\u0118\0\u5fb4"+
    "\0\u5ffa\0\u6040\0\u6086\0\u60cc\0\u6112\0\u6158\0\u619e\0\u61e4"+
    "\0\u0118\0\u0118\0\u0118\0\u0118";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\13\1\16\1\17"+
    "\1\20\1\2\1\21\1\6\1\7\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\13\1\35\1\36\1\6\1\37\1\40\1\6\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\6\1\47\1\50"+
    "\1\51\1\6\1\52\1\6\1\53\1\54\1\6\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\6\1\63\1\64"+
    "\1\65\1\6\1\66\1\67\1\70\107\0\1\3\107\0"+
    "\1\71\7\0\1\13\2\0\1\72\1\0\1\13\15\0"+
    "\1\13\2\0\1\13\50\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\7\0\2\7\14\0\1\7\63\0"+
    "\1\13\7\0\1\13\2\0\1\13\1\0\1\13\15\0"+
    "\1\13\2\0\1\13\44\0\1\14\1\0\12\14\1\73"+
    "\5\14\1\74\63\14\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\75\5\6"+
    "\1\76\2\6\1\77\15\6\1\0\1\6\1\0\11\6"+
    "\3\0\1\13\7\0\1\13\2\0\1\13\1\0\1\100"+
    "\15\0\1\13\2\0\1\13\44\0\22\101\1\102\63\101"+
    "\26\0\1\103\106\0\1\104\115\0\1\105\107\0\1\106"+
    "\50\0\5\6\1\0\1\6\2\0\1\107\6\0\2\6"+
    "\11\0\2\6\2\0\1\6\1\110\15\6\1\111\6\6"+
    "\1\112\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\1\6\1\113\13\6\1\114\11\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\1\115\3\6\1\116\22\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\15\6"+
    "\1\117\1\6\1\120\1\6\1\121\2\6\1\122\2\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\1\123"+
    "\10\6\1\124\15\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\125\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\4\6\1\126\1\6\1\127"+
    "\7\6\1\130\10\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\6\6\1\131\20\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\132\6\0"+
    "\2\6\11\0\2\6\2\0\7\6\1\133\17\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\3\6\1\134"+
    "\5\6\1\135\15\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\11\6\1\136\3\6\1\137\1\140\10\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\1\141"+
    "\26\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\4\6\1\142\22\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\6\6\1\143\20\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\3\6\1\144\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\24\6\1\145"+
    "\2\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\1\6\1\146\16\6\1\147\6\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\1\150\10\6\1\151\15\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\1\152"+
    "\10\6\1\153\15\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\154\6\0\2\6\11\0"+
    "\2\6\2\0\17\6\1\155\6\6\1\156\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\20\6\1\157\6\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\1\160\1\6\2\0"+
    "\16\6\1\161\10\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\162\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\4\6\1\163\11\6\1\164"+
    "\10\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\1\165\26\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\16\6\1\166\10\6\1\0\1\6\1\0\11\6"+
    "\1\71\1\0\104\71\3\167\1\72\7\167\1\72\2\167"+
    "\1\170\1\167\1\72\15\167\1\72\2\167\1\72\44\167"+
    "\10\0\1\14\3\0\2\14\4\0\1\14\1\0\2\14"+
    "\15\0\1\14\1\0\1\14\3\0\2\14\7\0\1\14"+
    "\1\0\1\14\2\0\2\14\21\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\15\6"+
    "\1\171\10\6\1\172\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\11\6\1\173\15\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\6\6\1\174\20\6\1\0"+
    "\1\6\1\0\11\6\3\0\1\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\175\15\0\1\13\2\0\1\13\65\0"+
    "\1\176\101\0\1\101\3\0\1\177\1\101\20\0\1\101"+
    "\1\0\1\101\3\0\2\101\7\0\1\101\1\0\1\101"+
    "\41\0\1\200\16\0\1\201\102\0\1\202\55\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\1\203"+
    "\1\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\20\6\1\204\6\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\7\6\1\205\17\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\6\1\206"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\1\6\1\207\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\1\6\1\210\10\6\1\211\14\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\212\26\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\3\6"+
    "\1\213\3\6\1\214\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\6\6\1\215\1\216\17\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\6\6\1\217"+
    "\10\6\1\220\7\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\1\6\1\221\16\6\1\222\6\6\1\0"+
    "\1\6\1\0\5\6\1\223\3\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\20\6\1\224\6\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\25\6\1\225\1\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\3\6\1\226\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\3\6\1\227"+
    "\5\6\1\230\15\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\16\6\1\231\10\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\14\6\1\232\12\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\6\6\1\233"+
    "\10\6\1\234\7\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\235\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\1\236\26\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\26\6\1\237\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\20\6\1\240"+
    "\6\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\3\6\1\241\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\242\6\0\2\6\11\0"+
    "\2\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\1\243\1\6\2\0\7\6\1\244\17\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\3\6\1\245\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\12\6"+
    "\1\246\14\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\1\247"+
    "\1\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\12\6\1\250\14\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\14\6\1\251\12\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\6\6\1\252"+
    "\20\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\12\6\1\253\14\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\20\6\1\254\6\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\3\6\1\255\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\7\6\1\256"+
    "\17\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\1\257\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\14\6\1\260\12\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\20\6\1\261\6\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\3\6\1\262\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\6\6"+
    "\1\263\20\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\1\264"+
    "\1\6\2\0\27\6\1\0\1\6\1\0\11\6\16\167"+
    "\1\265\72\167\1\266\7\167\1\72\2\167\1\267\1\167"+
    "\1\72\15\167\1\72\2\167\1\72\44\167\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\1\6\1\270\25\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\1\271\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\26\6\1\272\1\0\1\6"+
    "\1\0\11\6\33\0\1\273\72\0\1\274\71\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\7\6\1\275\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\15\6\1\276\11\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\3\6\1\277\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\3\6"+
    "\1\300\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\3\6\1\301\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\25\6\1\302\1\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\15\6\1\303\11\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\26\6"+
    "\1\304\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\3\6\1\305\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\7\6\1\306\17\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\3\6\1\307\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\11\6\1\310"+
    "\15\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\1\6\1\311\12\6\1\312\12\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\7\6\1\313\17\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\15\6\1\314"+
    "\11\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\25\6\1\315\1\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\316\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\3\6\1\317\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\17\6\1\320"+
    "\7\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\14\6\1\321\12\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\14\6\1\322\12\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\3\6\1\323\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\6\6\1\324"+
    "\20\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\6\6\1\325\20\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\1\6\1\311\17\6\1\326\5\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\327\26\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\17\6"+
    "\1\330\7\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\2\6\1\331\24\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\11\6\1\332\15\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\1\6\1\333\25\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\1\334\1\6\2\0"+
    "\27\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\1\6\1\335\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\336\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\1\6\1\337\25\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\340\26\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\17\6"+
    "\1\341\7\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\3\6\1\342\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\1\343\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\1\344\26\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\25\6\1\345\1\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\15\6"+
    "\1\346\11\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\6\6\1\347\20\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\16\6\1\350\10\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\14\6\1\351\12\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\11\6"+
    "\1\352\13\6\1\353\1\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\3\6\1\354\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\11\6\1\355\15\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\15\6"+
    "\1\356\11\6\1\0\1\6\1\0\11\6\3\167\1\357"+
    "\12\167\1\360\67\167\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\3\6\1\361"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\15\6\1\362\11\6\1\0\1\6\1\0\11\6\33\0"+
    "\1\363\56\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\1\364\1\6\2\0\27\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\3\6\1\365\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\6\6"+
    "\1\366\20\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\6\6\1\367\20\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\25\6\1\370\1\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\20\6\1\371\6\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\6\6"+
    "\1\372\10\6\1\373\7\6\1\0\1\6\1\0\11\6"+
    "\4\0\1\6\1\374\3\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\27\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\13\6\1\375\13\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\15\6"+
    "\1\376\11\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\7\6\1\377\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\3\6\1\u0100\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\11\6\1\u0101\15\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\1\u0102"+
    "\26\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\1\u0103\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\1\u0104"+
    "\1\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\u0105\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\6\6\1\u0106\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\3\6\1\u0107"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\3\6\1\u0108\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\u0109\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\6\6\1\u010a\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\13\6\1\u010b"+
    "\13\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\12\6\1\u010c\14\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\u010d\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\17\6\1\u010e\7\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\7\6\1\u010f"+
    "\17\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\17\6\1\u0110\7\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\7\6\1\u0111\17\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\7\6\1\u0112\17\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\15\6\1\u0113"+
    "\11\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\15\6\1\u0114\11\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\15\6\1\u0115\11\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\14\6\1\u0116\12\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\1\u0117\1\6\2\0\3\6"+
    "\1\u0118\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\1\u0119\26\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\16\6\1\u011a\10\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\6\6\1\u011b\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\6\6\1\u011c"+
    "\20\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\6\6\1\u011d\20\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\u011e\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\4\6\1\u011f\22\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\u0120\26\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\26\6"+
    "\1\u0121\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\1\6\1\u0122\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\u0123\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\1\u0124\26\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\15\6\1\u0125\11\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\17\6"+
    "\1\u0126\7\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\12\6\1\u0127\14\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\10\6\1\u0128\16\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\11\6\1\u0129\15\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\15\6"+
    "\1\u012a\11\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\6\6\1\u012b\20\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\20\6\1\u012c\6\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\6\6\1\u012d\20\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\14\6"+
    "\1\u012e\12\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\6\6\1\u012f\20\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\1\6\1\u0130\25\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\12\6\1\u0131\14\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\27\6"+
    "\1\0\1\6\1\0\3\6\1\u0132\5\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\1\u0133\26\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\1\6\1\u0134\25\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\17\6\1\u0135\7\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\6\1\u0136"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\1\u0137\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\1\34\26\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\6\6\1\u0138\20\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\1\u0139\1\6\2\0\3\6\1\u013a\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\1\6"+
    "\1\u013b\25\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\1\6\1\u013c\25\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\3\6\1\u013d\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\1\u013e\26\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\3\6\1\u013f"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\1\u0140\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\15\6\1\u0141\11\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\7\6\1\u0142\17\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\14\6\1\u0143\12\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\26\6"+
    "\1\u0144\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\7\6\1\u0145\17\6\1\0\1\6\1\0\11\6\4\0"+
    "\1\6\1\u0146\3\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\12\6\1\u0147\14\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\6\1\u0148"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\3\6\1\u0149\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\15\6\1\u014a\11\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\3\6\1\u014b\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\6\1\u014c"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\7\6\1\u014d\17\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\1\u014e\26\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\1\u014f\26\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\3\6\1\u0150\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\6\6\1\u0151"+
    "\20\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\6\6\1\u0152\20\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\1\u0153\26\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\1\u0154\26\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\7\6\1\u0155\17\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\3\6\1\u0156"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\3\6\1\u0157\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\u0158\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\25\6\1\u0159\1\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\1\u015a\1\6\2\0\27\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\1\6"+
    "\1\u015b\25\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\20\6\1\u015c\6\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\7\6\1\u015d\17\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\17\6\1\u015e\7\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\21\6"+
    "\1\u015f\5\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\7\6\1\u0160\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\1\6\1\u0161\25\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\1\u0162\1\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\6\1\u0163"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\1\u0164\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\12\6\1\u0165\14\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\7\6\1\u0166\17\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\1\u0167\1\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\1\u0168\1\6\2\0\27\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\3\6"+
    "\1\u0169\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\1\u016a"+
    "\1\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\u016b\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\1\u016c\1\6\2\0\27\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\26\6\1\u016d\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\1\u016e\1\6\2\0\27\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\17\6"+
    "\1\u016f\7\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\3\6\1\u0170\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\6\6\1\u0171\20\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\15\6\1\u0172\11\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\12\6"+
    "\1\u0173\14\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\11\6\1\u0174\15\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\1\u0175\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\6\6\1\u0176\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\1\u0177\1\6\2\0\27\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\1\6"+
    "\1\u0178\25\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\1\6\1\u0179\25\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\1\6\1\u017a\25\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\6\6\1\u017b\20\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\1\6"+
    "\1\u017c\25\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\1\u017d"+
    "\1\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\11\6\1\u017e\15\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\1\u017f\1\6\2\0\27\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\13\6\1\u0180\13\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\3\6"+
    "\1\u0181\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\1\u0182"+
    "\1\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\11\6\1\u0183\15\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\17\6\1\u0184\7\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\4\6\1\u0185"+
    "\22\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\21\6\1\u0186\5\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\7\6\1\u0187\17\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\17\6\1\u0188\7\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\11\6\1\u0189"+
    "\15\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\17\6\1\u018a\7\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\21\6\1\u018b\5\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\27\6\1\0\1\6\1\0"+
    "\1\6\1\u018c\7\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\7\6\1\u018d"+
    "\17\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\1\6\1\u018e\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\15\6\1\u018f\11\6\1\0\1\6\1\0"+
    "\11\6\4\0\1\6\1\u0190\3\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\12\6\1\u0191"+
    "\14\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\14\6\1\u0192\12\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\4\6\1\u0193\22\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\17\6\1\u0194\7\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\3\6\1\u0195"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\3\6\1\u0196\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\17\6\1\u0197\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\17\6\1\u0198\7\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\11\6\1\u0199"+
    "\15\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\1\6\1\u019a\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\11\6\1\u019b\15\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\17\6\1\u019c\7\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\1\u019d\1\6\2\0\27\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\3\6"+
    "\1\u019e\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\7\6\1\u019f\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\17\6\1\u01a0\7\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\7\6\1\u01a1\17\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\3\6"+
    "\1\u01a2\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\1\u01a3\26\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\u01a4\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\4\6\1\u01a5\22\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\2\6\1\u01a6"+
    "\24\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\1\u01a7\26\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\7\6\1\u01a8\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\13\6\1\u01a9\13\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\12\6\1\u01aa\14\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\17\6"+
    "\1\u01ab\7\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\17\6\1\u01ac\7\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\17\6\1\u01ad\7\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\1\u01ae\26\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\u01af\26\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\7\6"+
    "\1\u01b0\17\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\12\6\1\u01b1\14\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\4\6\1\u01b2\22\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\15\6\1\u01b3\11\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\1\6"+
    "\1\u01b4\25\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\2\6"+
    "\2\0\3\6\1\u01b5\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\1\6\1\u01b6\25\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\2\6\2\0\13\6\1\u01b7\13\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\2\0\1\6\6\0\2\6\11\0\2\6\2\0\7\6"+
    "\1\u01b8\17\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\2\0\1\6\6\0\2\6\11\0\1\u01b9"+
    "\1\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\1\u01ba\1\6\2\0\27\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\2\0\1\6\6\0\2\6"+
    "\11\0\2\6\2\0\17\6\1\u01bb\7\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\2\0\1\6"+
    "\6\0\2\6\11\0\1\u01bc\1\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\15\6\1\u01bd"+
    "\11\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\11\6\1\u01be\15\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\14\6\1\u01bf\12\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\11\6\1\u01c0\15\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\2\0"+
    "\1\6\6\0\2\6\11\0\2\6\2\0\1\6\1\u01c1"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\2\0\1\6\6\0\2\6\11\0\2\6\2\0"+
    "\17\6\1\u01c2\7\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\2\0\1\6\6\0\2\6\11\0"+
    "\2\6\2\0\3\6\1\u01c3\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\2\0\1\6\6\0"+
    "\2\6\11\0\2\6\2\0\17\6\1\u01c4\7\6\1\0"+
    "\1\6\1\0\11\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25130];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\2\11\4\1\1\11"+
    "\2\1\1\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\21\1\1\11\1\1\1\11\11\1\1\11"+
    "\1\0\4\1\2\0\2\11\1\0\70\1\1\11\1\1"+
    "\2\0\1\11\70\1\1\11\1\0\62\1\1\11\1\0"+
    "\2\1\1\11\321\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ResLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ResLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return IDENTIFIER;
          }
        case 99: break;
        case 29: 
          { return COLON_EQUALS;
          }
        case 100: break;
        case 26: 
          { return MULTILINE_COMMENT;
          }
        case 101: break;
        case 2: 
          { return NLS;
          }
        case 102: break;
        case 16: 
          { return LPAREN;
          }
        case 103: break;
        case 97: 
          { return CORRESPONDENCE;
          }
        case 104: break;
        case 50: 
          { return HYPO;
          }
        case 105: break;
        case 56: 
          { return WHILE;
          }
        case 106: break;
        case 98: 
          { return IMPLEMENTATION;
          }
        case 107: break;
        case 96: 
          { return INITIALIZATION;
          }
        case 108: break;
        case 28: 
          { return DBL_RBRACE;
          }
        case 109: break;
        case 48: 
          { return TRUE;
          }
        case 110: break;
        case 45: 
          { return BASE;
          }
        case 111: break;
        case 83: 
          { return INDUCTIVE;
          }
        case 112: break;
        case 18: 
          { return COLON;
          }
        case 113: break;
        case 21: 
          { return LAMBDA;
          }
        case 114: break;
        case 51: 
          { return USES;
          }
        case 115: break;
        case 41: 
          { return END;
          }
        case 116: break;
        case 58: 
          { return ALTERS;
          }
        case 117: break;
        case 7: 
          { return MATH_SYMBOL;
          }
        case 118: break;
        case 57: 
          { return FAMILY;
          }
        case 119: break;
        case 64: 
          { return DEFINES;
          }
        case 120: break;
        case 27: 
          { return DBL_LBRACE;
          }
        case 121: break;
        case 77: 
          { return CART_PROD;
          }
        case 122: break;
        case 3: 
          { return WS;
          }
        case 123: break;
        case 90: 
          { return EXTENDED_BY;
          }
        case 124: break;
        case 92: 
          { return CONSTRAINTS;
          }
        case 125: break;
        case 19: 
          { return SEMICOLON;
          }
        case 126: break;
        case 20: 
          { return COMMA;
          }
        case 127: break;
        case 47: 
          { return PARAM_TYPE;
          }
        case 128: break;
        case 24: 
          { return FORALL;
          }
        case 129: break;
        case 66: 
          { return MODELED;
          }
        case 130: break;
        case 70: 
          { return RESTORES;
          }
        case 131: break;
        case 95: 
          { return WHICH_ENTAILS;
          }
        case 132: break;
        case 89: 
          { return IMPLEMENTED;
          }
        case 133: break;
        case 88: 
          { return DEFINITION;
          }
        case 134: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 135: break;
        case 68: 
          { return EXEMPLAR;
          }
        case 136: break;
        case 65: 
          { return UPDATES;
          }
        case 137: break;
        case 10: 
          { return DOT;
          }
        case 138: break;
        case 35: 
          { return DO;
          }
        case 139: break;
        case 60: 
          { return CLEARS;
          }
        case 140: break;
        case 59: 
          { return PRECIS;
          }
        case 141: break;
        case 63: 
          { return CONCEPT;
          }
        case 142: break;
        case 4: 
          { return SYMBOL;
          }
        case 143: break;
        case 94: 
          { return MAINTAINING;
          }
        case 144: break;
        case 55: 
          { return IND_HYPO;
          }
        case 145: break;
        case 39: 
          { return CHAR;
          }
        case 146: break;
        case 78: 
          { return COROLLARY;
          }
        case 147: break;
        case 44: 
          { return IND_BASE;
          }
        case 148: break;
        case 54: 
          { return FALSE;
          }
        case 149: break;
        case 93: 
          { return CONVENTIONS;
          }
        case 150: break;
        case 13: 
          { return RBRACE;
          }
        case 151: break;
        case 11: 
          { return BACKTICK;
          }
        case 152: break;
        case 84: 
          { return OPERATION;
          }
        case 153: break;
        case 80: 
          { return OTHERWISE;
          }
        case 154: break;
        case 53: 
          { return FAMILY_TYPE;
          }
        case 155: break;
        case 75: 
          { return IMPLICIT;
          }
        case 156: break;
        case 86: 
          { return EXTERNALLY;
          }
        case 157: break;
        case 82: 
          { return EXTENSION;
          }
        case 158: break;
        case 43: 
          { return FROM;
          }
        case 159: break;
        case 15: 
          { return RBRACK;
          }
        case 160: break;
        case 85: 
          { return RECURSIVE;
          }
        case 161: break;
        case 34: 
          { return OF;
          }
        case 162: break;
        case 25: 
          { return LINE_COMMENT;
          }
        case 163: break;
        case 6: 
          { return INT;
          }
        case 164: break;
        case 23: 
          { return EXISTS;
          }
        case 165: break;
        case 31: 
          { return IS;
          }
        case 166: break;
        case 12: 
          { return LBRACE;
          }
        case 167: break;
        case 36: 
          { return PROG_IF;
          }
        case 168: break;
        case 14: 
          { return LBRACK;
          }
        case 169: break;
        case 42: 
          { return VAR;
          }
        case 170: break;
        case 79: 
          { return PROCEDURE;
          }
        case 171: break;
        case 9: 
          { return AT;
          }
        case 172: break;
        case 81: 
          { return PRESERVES;
          }
        case 173: break;
        case 46: 
          { return ELSE;
          }
        case 174: break;
        case 38: 
          { return TRIPLE_DOT;
          }
        case 175: break;
        case 8: 
          { return STRING;
          }
        case 176: break;
        case 30: 
          { return IF;
          }
        case 177: break;
        case 52: 
          { return WITH;
          }
        case 178: break;
        case 69: 
          { return EXTENDED;
          }
        case 179: break;
        case 76: 
          { return EVALUATES;
          }
        case 180: break;
        case 49: 
          { return THEN;
          }
        case 181: break;
        case 40: 
          { return COLON_EQUALS_COLON;
          }
        case 182: break;
        case 71: 
          { return REPLACES;
          }
        case 183: break;
        case 37: 
          { return FOR;
          }
        case 184: break;
        case 62: 
          { return ENSURES;
          }
        case 185: break;
        case 17: 
          { return RPAREN;
          }
        case 186: break;
        case 73: 
          { return CHANGING;
          }
        case 187: break;
        case 74: 
          { return FACILITY;
          }
        case 188: break;
        case 72: 
          { return REQUIRES;
          }
        case 189: break;
        case 87: 
          { return DECREASING;
          }
        case 190: break;
        case 61: 
          { return RECORD;
          }
        case 191: break;
        case 67: 
          { return THEOREM;
          }
        case 192: break;
        case 33: 
          { return BY;
          }
        case 193: break;
        case 32: 
          { return AS;
          }
        case 194: break;
        case 22: 
          { return QV;
          }
        case 195: break;
        case 91: 
          { return CATEGORICAL;
          }
        case 196: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
