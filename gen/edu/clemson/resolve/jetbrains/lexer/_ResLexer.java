/* The following code was generated by JFlex 1.4.3 on 7/6/16 10:31 AM */

package edu.clemson.resolve.jetbrains.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import edu.clemson.resolve.jetbrains.ResTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static edu.clemson.resolve.jetbrains.RESOLVEParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/6/16 10:31 AM from the specification file
 * <tt>ResLexer.flex</tt>
 */
class _ResLexer implements FlexLexer, ResTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\13\1\15"+
    "\4\0\1\21\1\32\1\33\1\14\1\13\1\37\1\13\1\20\1\3"+
    "\1\10\10\25\1\7\1\34\1\36\1\13\1\42\1\13\1\43\1\17"+
    "\2\4\1\51\1\66\1\67\1\74\2\4\1\76\5\4\1\100\1\54"+
    "\1\4\1\102\1\4\1\104\1\24\1\105\1\106\3\4\1\30\1\22"+
    "\1\31\1\0\1\5\1\23\1\44\1\46\1\60\1\56\1\47\1\16"+
    "\1\57\1\62\1\40\2\4\1\61\1\72\1\63\1\55\1\64\1\103"+
    "\1\52\1\45\1\53\1\71\1\65\1\101\1\70\1\50\1\77\1\26"+
    "\1\13\1\27\1\13\53\0\1\4\12\0\1\4\4\0\1\4\5\0"+
    "\27\4\1\0\37\4\1\0\u01ca\4\4\0\14\4\16\0\5\4\7\0"+
    "\1\4\1\0\1\4\201\0\5\12\1\11\2\12\2\11\4\12\10\11"+
    "\1\12\1\11\3\12\1\11\1\12\1\11\24\12\1\11\30\12\1\41"+
    "\72\12\1\11\11\12\202\4\10\0\236\4\11\0\46\4\2\0\1\4"+
    "\7\0\47\4\110\0\33\4\5\0\3\4\55\0\53\4\25\0\12\6"+
    "\4\0\2\4\1\0\143\4\1\0\1\4\17\0\2\4\7\0\2\4"+
    "\12\6\3\4\2\0\1\4\20\0\1\4\1\0\36\4\35\0\131\4"+
    "\13\0\1\4\16\0\12\6\41\4\11\0\2\4\4\0\1\4\5\0"+
    "\26\4\4\0\1\4\11\0\1\4\3\0\1\4\27\0\31\4\107\0"+
    "\1\4\1\0\13\4\127\0\66\4\3\0\1\4\22\0\1\4\7\0"+
    "\12\4\4\0\12\6\1\0\7\4\1\0\7\4\5\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0"+
    "\1\4\20\0\1\4\15\0\2\4\1\0\3\4\4\0\12\6\2\4"+
    "\23\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\2\4\1\0\2\4\37\0\4\4\1\0\1\4\7\0\12\6"+
    "\2\0\3\4\20\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\5\4\3\0\1\4\22\0\1\4\17\0\2\4"+
    "\4\0\12\6\25\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\5\4\3\0\1\4\36\0\2\4\1\0\3\4"+
    "\4\0\12\6\1\0\1\4\21\0\1\4\1\0\6\4\3\0\3\4"+
    "\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4"+
    "\3\0\3\4\3\0\14\4\26\0\1\4\25\0\12\6\25\0\10\4"+
    "\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4"+
    "\32\0\2\4\6\0\2\4\4\0\12\6\25\0\10\4\1\0\3\4"+
    "\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\40\0\1\4"+
    "\1\0\2\4\4\0\12\6\1\0\2\4\22\0\10\4\1\0\3\4"+
    "\1\0\51\4\2\0\1\4\20\0\1\4\21\0\2\4\4\0\12\6"+
    "\12\0\6\4\5\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4"+
    "\2\0\7\4\72\0\60\4\1\0\2\4\14\0\7\4\11\0\12\6"+
    "\47\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4"+
    "\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\4\4\1\0\2\4\11\0\1\4\2\0\5\4"+
    "\1\0\1\4\11\0\12\6\2\0\4\4\40\0\1\4\37\0\12\6"+
    "\26\0\10\4\1\0\44\4\33\0\5\4\163\0\53\4\24\0\1\4"+
    "\12\6\6\0\6\4\4\0\4\4\3\0\1\4\3\0\2\4\7\0"+
    "\3\4\4\0\15\4\14\0\1\4\1\0\12\6\6\0\46\4\1\0"+
    "\1\4\5\0\1\4\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\51\4\1\0\4\4\2\0"+
    "\41\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0"+
    "\17\4\1\0\71\4\1\0\4\4\2\0\103\4\45\0\20\4\20\0"+
    "\125\4\14\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\25\0"+
    "\15\4\1\0\4\4\16\0\22\4\16\0\22\4\16\0\15\4\1\0"+
    "\3\4\17\0\64\4\43\0\1\4\4\0\1\4\3\0\12\6\46\0"+
    "\12\6\6\0\130\4\10\0\51\4\1\0\1\4\5\0\106\4\12\0"+
    "\35\4\51\0\12\6\36\4\2\0\5\4\13\0\54\4\25\0\7\4"+
    "\10\0\12\6\46\0\27\4\11\0\65\4\53\0\12\6\6\0\12\6"+
    "\15\0\1\4\135\0\57\4\21\0\7\4\4\0\12\6\51\0\36\4"+
    "\15\0\2\4\12\6\54\4\32\0\44\4\34\0\12\6\3\0\3\4"+
    "\12\6\44\4\153\0\4\4\1\0\4\4\3\0\2\4\11\0\300\4"+
    "\100\0\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4"+
    "\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4"+
    "\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4\164\0\1\4"+
    "\15\0\1\4\20\0\15\4\145\0\1\4\4\0\1\4\2\0\12\4"+
    "\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4"+
    "\64\0\2\4\173\0\1\75\2\11\1\73\374\11\300\11\u0430\0\20\11"+
    "\u0182\0\1\35\175\0\u0100\11\u0100\0\57\4\1\0\57\4\1\0\205\4"+
    "\6\0\4\4\3\0\2\4\14\0\46\4\1\0\1\4\5\0\1\4"+
    "\2\0\70\4\7\0\1\4\20\0\27\4\11\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\120\0\1\4\u01d5\0\2\4\52\0\5\4\5\0\2\4"+
    "\4\0\126\4\6\0\3\4\1\0\132\4\1\0\4\4\5\0\51\4"+
    "\3\0\136\4\21\0\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cd\4"+
    "\63\0\u048d\4\103\0\56\4\2\0\u010d\4\3\0\20\4\12\6\2\4"+
    "\24\0\57\4\20\0\31\4\10\0\106\4\61\0\11\4\2\0\147\4"+
    "\2\0\4\4\1\0\4\4\14\0\13\4\115\0\12\4\1\0\3\4"+
    "\1\0\4\4\1\0\27\4\35\0\64\4\16\0\62\4\34\0\12\6"+
    "\30\0\6\4\3\0\1\4\4\0\12\6\34\4\12\0\27\4\31\0"+
    "\35\4\7\0\57\4\34\0\1\4\12\6\46\0\51\4\27\0\3\4"+
    "\1\0\10\4\4\0\12\6\6\0\27\4\3\0\1\4\5\0\60\4"+
    "\1\0\1\4\3\0\2\4\2\0\5\4\2\0\1\4\1\0\1\4"+
    "\30\0\3\4\2\0\13\4\7\0\3\4\14\0\6\4\2\0\6\4"+
    "\2\0\6\4\11\0\7\4\1\0\7\4\221\0\43\4\15\0\12\6"+
    "\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4"+
    "\46\0\7\4\14\0\5\4\5\0\1\4\1\0\12\4\1\0\15\4"+
    "\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4"+
    "\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\14\4\164\0\5\4"+
    "\1\0\207\4\23\0\12\6\7\0\32\4\6\0\32\4\13\0\131\4"+
    "\3\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\2\7"+
    "\1\4\1\10\1\5\1\11\1\12\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\5\1\26\1\27\22\5\1\30\1\5\1\31"+
    "\7\5\1\32\1\33\1\10\1\0\3\5\3\0\1\34"+
    "\1\35\1\0\1\36\1\37\1\40\1\41\2\5\1\42"+
    "\1\5\1\0\1\5\1\43\13\5\1\44\2\5\1\45"+
    "\16\5\1\46\12\5\2\33\3\5\1\47\1\50\1\51"+
    "\1\1\2\0\1\52\3\5\1\0\3\5\1\53\51\5"+
    "\1\54\1\5\2\33\1\4\2\5\1\55\1\56\1\0"+
    "\3\5\1\57\1\60\1\61\14\5\1\62\1\63\1\64"+
    "\11\5\1\65\4\5\1\66\10\5\1\67\3\5\1\70"+
    "\2\5\1\33\1\0\1\71\1\5\1\72\52\5\1\73"+
    "\1\74\2\5\1\75\15\5\1\76\5\5\1\77\4\5"+
    "\1\30\5\5\1\31\5\5\1\100\4\5\1\101\10\5"+
    "\1\102\13\5\1\103\1\5\1\104\1\5\1\105\7\5"+
    "\1\106\3\5\1\107\1\5\1\110\4\5\1\111\1\112"+
    "\1\113\5\5\1\114\4\5\1\115\1\5\1\116\6\5"+
    "\1\117\2\5\1\120\1\5\1\121\1\5\1\122\1\123"+
    "\3\5\1\124\1\5\1\125\1\5\1\126\1\5\1\127"+
    "\1\5\1\130\2\5\1\131\3\5\1\132\2\5\1\133"+
    "\4\5\1\134\1\135\1\136\1\137\1\5\1\140\1\141"+
    "\11\5\1\142\1\143\1\144\1\145";

  private static int [] zzUnpackAction() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\107\0\325\0\u011c\0\u0163\0\107"+
    "\0\107\0\u011c\0\u01aa\0\u01f1\0\u0238\0\107\0\u027f\0\u02c6"+
    "\0\107\0\u030d\0\u0354\0\107\0\107\0\u039b\0\107\0\u03e2"+
    "\0\107\0\107\0\107\0\u0429\0\u011c\0\107\0\u0470\0\u04b7"+
    "\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef"+
    "\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927"+
    "\0\107\0\u096e\0\107\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1"+
    "\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\107\0\u0c34\0\u0c7b\0\u0cc2"+
    "\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\107\0\107\0\u0e25\0\107"+
    "\0\u0e6c\0\u011c\0\u011c\0\u0eb3\0\u0efa\0\u011c\0\u0f41\0\u0f88"+
    "\0\u0fcf\0\u011c\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u011c\0\u1323\0\u136a"+
    "\0\u011c\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b"+
    "\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u011c"+
    "\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984"+
    "\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u011c"+
    "\0\107\0\107\0\u0d97\0\u1bbc\0\u1c03\0\107\0\u1c4a\0\u1c91"+
    "\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u011c\0\u1e3b\0\u1e82"+
    "\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba"+
    "\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2"+
    "\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a"+
    "\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762"+
    "\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u011c"+
    "\0\u299a\0\u29e1\0\u01aa\0\u1aa0\0\u2a28\0\u2a6f\0\u011c\0\107"+
    "\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\107\0\u011c\0\u011c\0\u2bd2"+
    "\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a"+
    "\0\u2e51\0\u2e98\0\u2edf\0\u011c\0\u011c\0\u011c\0\u2f26\0\u2f6d"+
    "\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u011c"+
    "\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u011c\0\u32c1\0\u3308\0\u334f"+
    "\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u011c\0\u34f9\0\u3540"+
    "\0\u3587\0\u011c\0\u35ce\0\u3615\0\107\0\u29e1\0\u011c\0\u365c"+
    "\0\107\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d"+
    "\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85"+
    "\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd"+
    "\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5"+
    "\0\u3f3c\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d"+
    "\0\u4174\0\u41bb\0\u4202\0\u011c\0\u011c\0\u4249\0\u4290\0\u011c"+
    "\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u44c8"+
    "\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b\0\u011c\0\u4672\0\u46b9"+
    "\0\u4700\0\u4747\0\u478e\0\u011c\0\u47d5\0\u481c\0\u4863\0\u48aa"+
    "\0\u011c\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u011c\0\u4a54"+
    "\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70\0\u011c\0\u4bb7\0\u4bfe\0\u4c45"+
    "\0\u4c8c\0\u011c\0\u4cd3\0\u4d1a\0\u4d61\0\u4da8\0\u4def\0\u4e36"+
    "\0\u4e7d\0\u4ec4\0\u011c\0\u4f0b\0\u4f52\0\u4f99\0\u4fe0\0\u5027"+
    "\0\u506e\0\u50b5\0\u50fc\0\u5143\0\u518a\0\u51d1\0\u011c\0\u5218"+
    "\0\u011c\0\u525f\0\u011c\0\u52a6\0\u52ed\0\u5334\0\u537b\0\u53c2"+
    "\0\u5409\0\u5450\0\u011c\0\u5497\0\u54de\0\u5525\0\u011c\0\u556c"+
    "\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u011c\0\u011c\0\u011c"+
    "\0\u5716\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u011c\0\u5879\0\u58c0"+
    "\0\u5907\0\u594e\0\u011c\0\u5995\0\u011c\0\u59dc\0\u5a23\0\u5a6a"+
    "\0\u5ab1\0\u5af8\0\u5b3f\0\u011c\0\u5b86\0\u5bcd\0\u011c\0\u5c14"+
    "\0\u011c\0\u5c5b\0\u011c\0\u011c\0\u5ca2\0\u5ce9\0\u5d30\0\u011c"+
    "\0\u5d77\0\u011c\0\u5dbe\0\u011c\0\u5e05\0\u011c\0\u5e4c\0\u011c"+
    "\0\u5e93\0\u5eda\0\u011c\0\u5f21\0\u5f68\0\u5faf\0\u011c\0\u5ff6"+
    "\0\u603d\0\u011c\0\u6084\0\u60cb\0\u6112\0\u6159\0\u011c\0\u011c"+
    "\0\u011c\0\u011c\0\u61a0\0\u011c\0\u011c\0\u61e7\0\u622e\0\u6275"+
    "\0\u62bc\0\u6303\0\u634a\0\u6391\0\u63d8\0\u641f\0\u011c\0\u011c"+
    "\0\u011c\0\u011c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\2\1\7\1\10"+
    "\1\11\1\12\2\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\2\1\21\1\6\1\7\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\13\1\36\1\37\1\40\1\41\1\42\1\6\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\6\1\51\1\52"+
    "\1\53\1\6\1\54\1\6\1\55\1\56\1\6\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\6\1\65\1\66"+
    "\1\67\1\6\1\70\1\71\1\72\110\0\1\3\110\0"+
    "\1\73\7\0\1\13\1\74\25\0\1\13\50\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\7\0\2\7"+
    "\14\0\1\7\64\0\1\13\7\0\2\13\25\0\1\13"+
    "\44\0\1\14\1\0\13\14\1\75\4\14\1\76\64\14"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\1\77\5\6\1\100\2\6\1\101"+
    "\15\6\1\0\1\6\1\0\11\6\20\0\1\102\66\0"+
    "\22\103\1\104\64\103\26\0\1\105\107\0\1\106\117\0"+
    "\1\107\102\0\1\110\5\0\1\111\50\0\5\6\1\0"+
    "\1\6\3\0\1\112\5\0\2\6\12\0\2\6\2\0"+
    "\1\6\1\113\15\6\1\114\6\6\1\115\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\1\6\1\116\13\6"+
    "\1\117\11\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\1\0\1\120\3\0\2\6"+
    "\12\0\2\6\2\0\27\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\1\121\3\6\1\122\22\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\15\6\1\123"+
    "\1\6\1\124\1\6\1\125\2\6\1\126\2\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\1\127\10\6"+
    "\1\130\15\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\131\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\4\6\1\132\1\6\1\133\7\6"+
    "\1\134\10\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\6\6\1\135\20\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\136\5\0\2\6"+
    "\12\0\2\6\2\0\7\6\1\137\17\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\3\6\1\140\5\6"+
    "\1\141\15\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\11\6\1\142\3\6\1\143\1\144\10\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\1\145\26\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\4\6"+
    "\1\146\22\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\6\6\1\147\20\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\3\6\1\150\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\24\6\1\151\2\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\1\6"+
    "\1\152\16\6\1\153\6\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\1\154\10\6\1\155\15\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\1\156\10\6"+
    "\1\157\15\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\160\5\0\2\6\12\0\2\6"+
    "\2\0\17\6\1\161\6\6\1\162\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\20\6\1\163\6\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\1\164\1\6\2\0\16\6"+
    "\1\165\10\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\166\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\4\6\1\167\11\6\1\170\10\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\1\171"+
    "\26\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\16\6\1\172\10\6\1\0\1\6\1\0\11\6\1\73"+
    "\1\0\105\73\3\173\1\74\7\173\1\74\1\174\25\173"+
    "\1\74\44\173\10\0\1\14\4\0\2\14\3\0\1\14"+
    "\1\0\2\14\16\0\1\14\1\0\1\14\3\0\2\14"+
    "\7\0\1\14\1\0\1\14\2\0\2\14\21\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\15\6\1\175\10\6\1\176\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\11\6\1\177\15\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\6\6\1\200"+
    "\20\6\1\0\1\6\1\0\11\6\20\0\1\201\107\0"+
    "\1\202\103\0\1\103\2\0\1\203\1\103\21\0\1\103"+
    "\1\0\1\103\3\0\2\103\7\0\1\103\1\0\1\103"+
    "\41\0\1\204\17\0\1\205\102\0\1\206\56\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\1\207"+
    "\1\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\20\6\1\210\6\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\7\6\1\211\17\6\1\0"+
    "\1\6\1\0\11\6\53\0\1\212\37\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\1\6\1\213\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\1\6\1\214\25\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\1\6\1\215\10\6\1\216"+
    "\14\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\1\217\26\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\220\3\6\1\221\17\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\6\6\1\222\1\223"+
    "\17\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\6\6\1\224\10\6\1\225\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\1\6\1\226\16\6\1\227"+
    "\6\6\1\0\1\6\1\0\5\6\1\230\3\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\20\6\1\231\6\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\25\6\1\232\1\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\3\6\1\233"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\3\6\1\234\5\6\1\235\15\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\16\6\1\236\10\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\14\6\1\237"+
    "\12\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\6\6\1\240\10\6\1\241\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\3\6\1\242\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\1\243\26\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\26\6"+
    "\1\244\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\20\6\1\245\6\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\3\6\1\246\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\247\5\0"+
    "\2\6\12\0\2\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\1\250\1\6\2\0\7\6\1\251\17\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\3\6"+
    "\1\252\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\12\6\1\253\14\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\1\254\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\12\6\1\255\14\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\14\6\1\256"+
    "\12\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\6\6\1\257\20\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\12\6\1\260\14\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\20\6\1\261\6\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\3\6\1\262"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\7\6\1\263\17\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\1\264\1\6\2\0\27\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\14\6\1\265\12\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\20\6\1\266\6\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\3\6"+
    "\1\267\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\6\6\1\270\20\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\1\271\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\14\173\1\272\75\173\1\273\7\173\1\74\1\274"+
    "\25\173\1\74\44\173\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\1\6\1\275"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\1\276\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\26\6\1\277\1\0\1\6\1\0\11\6\33\0"+
    "\1\300\73\0\1\301\72\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\7\6\1\302"+
    "\17\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\15\6\1\303\11\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\3\6\1\304\23\6\1\0\1\6\1\0"+
    "\11\6\20\0\1\305\72\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\3\6\1\306"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\3\6\1\307\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\25\6\1\310\1\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\15\6\1\311\11\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\26\6\1\312"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\3\6"+
    "\1\313\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\7\6\1\314\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\3\6\1\315\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\11\6\1\316\15\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\1\6"+
    "\1\317\12\6\1\320\12\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\7\6\1\321\17\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\15\6\1\322\11\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\25\6"+
    "\1\323\1\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\324\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\3\6\1\325\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\17\6\1\326\7\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\14\6"+
    "\1\327\12\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\14\6\1\330\12\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\3\6\1\331\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\6\6\1\332\20\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\6\6"+
    "\1\333\20\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\1\6\1\317\17\6\1\334\5\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\1\335\26\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\17\6\1\336"+
    "\7\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\2\6\1\337\24\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\11\6\1\340\15\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\1\6\1\341\25\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\1\342\1\6\2\0\27\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\1\6"+
    "\1\343\25\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\344\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\1\6\1\345\25\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\1\346\26\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\17\6\1\347"+
    "\7\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\3\6\1\350\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\1\351\1\6\2\0\27\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\1\352\26\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\25\6\1\353\1\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\15\6\1\354"+
    "\11\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\6\6\1\355\20\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\16\6\1\356\10\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\14\6\1\357\12\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\11\6\1\360"+
    "\13\6\1\361\1\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\3\6\1\362\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\11\6\1\363\15\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\15\6\1\364"+
    "\11\6\1\0\1\6\1\0\11\6\3\173\1\365\10\173"+
    "\1\366\72\173\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\3\6\1\367\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\15\6"+
    "\1\370\11\6\1\0\1\6\1\0\11\6\33\0\1\371"+
    "\57\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\1\372\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\3\6\1\373\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\6\6\1\374"+
    "\20\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\6\6\1\375\20\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\25\6\1\376\1\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\20\6\1\377\6\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\6\6\1\u0100"+
    "\10\6\1\u0101\7\6\1\0\1\6\1\0\11\6\4\0"+
    "\1\6\1\u0102\3\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\13\6\1\u0103\13\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\15\6\1\u0104"+
    "\11\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\7\6\1\u0105\17\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\3\6\1\u0106\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\11\6\1\u0107\15\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\1\u0108\26\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\1\u0109\1\6\2\0"+
    "\27\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\1\u010a\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\u010b\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\6\6\1\u010c\20\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\3\6\1\u010d\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\3\6"+
    "\1\u010e\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\u010f\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\6\6\1\u0110\20\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\13\6\1\u0111\13\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\12\6"+
    "\1\u0112\14\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\u0113\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\17\6\1\u0114\7\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\7\6\1\u0115\17\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\17\6"+
    "\1\u0116\7\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\7\6\1\u0117\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\7\6\1\u0118\17\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\15\6\1\u0119\11\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\15\6"+
    "\1\u011a\11\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\15\6\1\u011b\11\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\14\6\1\u011c\12\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\1\u011d\1\6\2\0\3\6\1\u011e"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\1\u011f\26\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\16\6\1\u0120\10\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\6\6\1\u0121\20\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\6\6\1\u0122\20\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\6\6"+
    "\1\u0123\20\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\u0124\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\4\6\1\u0125\22\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\1\u0126\26\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\26\6\1\u0127"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\1\6"+
    "\1\u0128\25\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\u0129\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\1\u012a\26\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\15\6\1\u012b\11\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\17\6\1\u012c"+
    "\7\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\12\6\1\u012d\14\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\10\6\1\u012e\16\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\11\6\1\u012f\15\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\15\6\1\u0130"+
    "\11\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\6\6\1\u0131\20\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\20\6\1\u0132\6\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\6\6\1\u0133\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\14\6\1\u0134"+
    "\12\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\6\6\1\u0135\20\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\1\6\1\u0136\25\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\12\6\1\u0137\14\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\27\6\1\0"+
    "\1\6\1\0\3\6\1\u0138\5\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\1\u0139\26\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\1\6\1\u013a\25\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\17\6\1\u013b\7\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\1\6\1\u013c\25\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\1\u013d\1\6\2\0"+
    "\27\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\1\35\26\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\6\6\1\u013e\20\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\1\u013f\1\6\2\0\3\6\1\u0140\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\1\6\1\u0141"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\1\6\1\u0142\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\3\6\1\u0143\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\1\u0144\26\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\3\6\1\u0145\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\1\u0146\1\6\2\0"+
    "\27\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\15\6\1\u0147\11\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\7\6\1\u0148\17\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\14\6\1\u0149\12\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\26\6\1\u014a"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\7\6"+
    "\1\u014b\17\6\1\0\1\6\1\0\11\6\4\0\1\6"+
    "\1\u014c\3\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\27\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\12\6\1\u014d\14\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\1\6\1\u014e\25\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\3\6"+
    "\1\u014f\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\15\6\1\u0150\11\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\3\6\1\u0151\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\1\6\1\u0152\25\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\7\6"+
    "\1\u0153\17\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\1\u0154\26\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\1\u0155\26\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\3\6\1\u0156\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\6\6\1\u0157\20\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\6\6"+
    "\1\u0158\20\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\1\u0159\26\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\1\u015a\26\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\7\6\1\u015b\17\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\3\6\1\u015c\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\3\6"+
    "\1\u015d\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\u015e\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\25\6\1\u015f\1\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\1\u0160\1\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\1\6\1\u0161"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\20\6\1\u0162\6\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\7\6\1\u0163\17\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\17\6\1\u0164\7\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\21\6\1\u0165"+
    "\5\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\7\6\1\u0166\17\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\1\6\1\u0167\25\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\1\u0168\1\6\2\0\27\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\1\6\1\u0169\25\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\1\u016a\1\6\2\0"+
    "\27\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\12\6\1\u016b\14\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\7\6\1\u016c\17\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\1\u016d\1\6\2\0\27\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\1\u016e\1\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\3\6\1\u016f"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\1\u0170\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\u0171\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\1\u0172\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\26\6\1\u0173\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\1\u0174\1\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\17\6\1\u0175"+
    "\7\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\3\6\1\u0176\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\6\6\1\u0177\20\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\15\6\1\u0178\11\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\12\6\1\u0179"+
    "\14\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\11\6\1\u017a\15\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\1\u017b\1\6\2\0\27\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\6\6\1\u017c\20\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\1\u017d\1\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\1\6\1\u017e"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\1\6\1\u017f\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\1\6\1\u0180\25\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\6\6\1\u0181\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\1\6\1\u0182"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\1\u0183\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\11\6\1\u0184\15\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\1\u0185\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\13\6\1\u0186\13\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\3\6\1\u0187"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\1\u0188\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\11\6\1\u0189\15\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\17\6\1\u018a\7\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\4\6\1\u018b\22\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\21\6"+
    "\1\u018c\5\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\7\6\1\u018d\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\17\6\1\u018e\7\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\11\6\1\u018f\15\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\17\6"+
    "\1\u0190\7\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\21\6\1\u0191\5\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\27\6\1\0\1\6\1\0\1\6"+
    "\1\u0192\7\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\7\6\1\u0193\17\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\1\6"+
    "\1\u0194\25\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\15\6\1\u0195\11\6\1\0\1\6\1\0\11\6"+
    "\4\0\1\6\1\u0196\3\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\27\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\12\6\1\u0197\14\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\14\6"+
    "\1\u0198\12\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\4\6\1\u0199\22\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\17\6\1\u019a\7\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\3\6\1\u019b\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\3\6"+
    "\1\u019c\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\17\6\1\u019d\7\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\17\6\1\u019e\7\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\11\6\1\u019f\15\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\1\6"+
    "\1\u01a0\25\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\11\6\1\u01a1\15\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\17\6\1\u01a2\7\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\1\u01a3\1\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\3\6\1\u01a4"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\7\6\1\u01a5\17\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\17\6\1\u01a6\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\7\6\1\u01a7\17\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\3\6\1\u01a8"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\1\u01a9\26\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\u01aa\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\4\6\1\u01ab\22\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\2\6\1\u01ac\24\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\1\u01ad"+
    "\26\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\7\6\1\u01ae\17\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\13\6\1\u01af\13\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\12\6\1\u01b0\14\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\17\6\1\u01b1"+
    "\7\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\17\6\1\u01b2\7\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\17\6\1\u01b3\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\1\u01b4\26\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\1\u01b5\26\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\7\6\1\u01b6"+
    "\17\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\12\6\1\u01b7\14\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\4\6\1\u01b8\22\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\15\6\1\u01b9\11\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\1\6\1\u01ba"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\2\6\2\0"+
    "\3\6\1\u01bb\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\1\6\1\u01bc\25\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\2\6\2\0\13\6\1\u01bd\13\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\1\0\1\6\3\0"+
    "\1\6\5\0\2\6\12\0\2\6\2\0\7\6\1\u01be"+
    "\17\6\1\0\1\6\1\0\11\6\4\0\5\6\1\0"+
    "\1\6\3\0\1\6\5\0\2\6\12\0\1\u01bf\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\1\u01c0"+
    "\1\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\1\0\1\6\3\0\1\6\5\0\2\6\12\0"+
    "\2\6\2\0\17\6\1\u01c1\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\1\0\1\6\3\0\1\6\5\0"+
    "\2\6\12\0\1\u01c2\1\6\2\0\27\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\15\6\1\u01c3\11\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\11\6"+
    "\1\u01c4\15\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\14\6\1\u01c5\12\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\11\6\1\u01c6\15\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\1\0\1\6\3\0\1\6"+
    "\5\0\2\6\12\0\2\6\2\0\1\6\1\u01c7\25\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\1\0\1\6"+
    "\3\0\1\6\5\0\2\6\12\0\2\6\2\0\17\6"+
    "\1\u01c8\7\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\1\0\1\6\3\0\1\6\5\0\2\6\12\0\2\6"+
    "\2\0\3\6\1\u01c9\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\1\0\1\6\3\0\1\6\5\0\2\6"+
    "\12\0\2\6\2\0\17\6\1\u01ca\7\6\1\0\1\6"+
    "\1\0\11\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25702];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\2\11\4\1\1\11"+
    "\2\1\1\11\2\1\2\11\1\1\1\11\1\1\3\11"+
    "\2\1\1\11\22\1\1\11\1\1\1\11\11\1\1\11"+
    "\1\0\3\1\3\0\2\11\1\0\1\11\7\1\1\0"+
    "\60\1\2\11\1\1\2\0\1\11\3\1\1\0\65\1"+
    "\1\11\1\0\3\1\1\11\57\1\1\11\1\0\2\1"+
    "\1\11\321\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ResLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ResLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1778) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return IDENTIFIER;
          }
        case 102: break;
        case 31: 
          { return COLON_EQUALS;
          }
        case 103: break;
        case 27: 
          { return MULTILINE_COMMENT;
          }
        case 104: break;
        case 47: 
          { return SUCH_THAT;
          }
        case 105: break;
        case 2: 
          { return NLS;
          }
        case 106: break;
        case 16: 
          { return LPAREN;
          }
        case 107: break;
        case 100: 
          { return CORRESPONDENCE;
          }
        case 108: break;
        case 53: 
          { return HYPO;
          }
        case 109: break;
        case 59: 
          { return WHILE;
          }
        case 110: break;
        case 101: 
          { return IMPLEMENTATION;
          }
        case 111: break;
        case 99: 
          { return INITIALIZATION;
          }
        case 112: break;
        case 29: 
          { return DBL_RBRACE;
          }
        case 113: break;
        case 51: 
          { return TRUE;
          }
        case 114: break;
        case 48: 
          { return BASE;
          }
        case 115: break;
        case 86: 
          { return INDUCTIVE;
          }
        case 116: break;
        case 18: 
          { return COLON;
          }
        case 117: break;
        case 22: 
          { return LAMBDA;
          }
        case 118: break;
        case 54: 
          { return USES;
          }
        case 119: break;
        case 43: 
          { return END;
          }
        case 120: break;
        case 61: 
          { return ALTERS;
          }
        case 121: break;
        case 7: 
          { return MATH_SYMBOL;
          }
        case 122: break;
        case 60: 
          { return FAMILY;
          }
        case 123: break;
        case 67: 
          { return DEFINES;
          }
        case 124: break;
        case 28: 
          { return DBL_LBRACE;
          }
        case 125: break;
        case 80: 
          { return CART_PROD;
          }
        case 126: break;
        case 3: 
          { return WS;
          }
        case 127: break;
        case 93: 
          { return EXTENDED_BY;
          }
        case 128: break;
        case 95: 
          { return CONSTRAINTS;
          }
        case 129: break;
        case 20: 
          { return SEMICOLON;
          }
        case 130: break;
        case 21: 
          { return COMMA;
          }
        case 131: break;
        case 50: 
          { return PARAM_TYPE;
          }
        case 132: break;
        case 25: 
          { return FORALL;
          }
        case 133: break;
        case 30: 
          { return COLON_COLON;
          }
        case 134: break;
        case 73: 
          { return RESTORES;
          }
        case 135: break;
        case 69: 
          { return MODELED;
          }
        case 136: break;
        case 98: 
          { return WHICH_ENTAILS;
          }
        case 137: break;
        case 92: 
          { return IMPLEMENTED;
          }
        case 138: break;
        case 91: 
          { return DEFINITION;
          }
        case 139: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 140: break;
        case 71: 
          { return EXEMPLAR;
          }
        case 141: break;
        case 68: 
          { return UPDATES;
          }
        case 142: break;
        case 10: 
          { return DOT;
          }
        case 143: break;
        case 37: 
          { return DO;
          }
        case 144: break;
        case 63: 
          { return CLEARS;
          }
        case 145: break;
        case 62: 
          { return PRECIS;
          }
        case 146: break;
        case 66: 
          { return CONCEPT;
          }
        case 147: break;
        case 4: 
          { return SYMBOL;
          }
        case 148: break;
        case 97: 
          { return MAINTAINING;
          }
        case 149: break;
        case 58: 
          { return IND_HYPO;
          }
        case 150: break;
        case 41: 
          { return CHAR;
          }
        case 151: break;
        case 81: 
          { return COROLLARY;
          }
        case 152: break;
        case 46: 
          { return IND_BASE;
          }
        case 153: break;
        case 57: 
          { return FALSE;
          }
        case 154: break;
        case 96: 
          { return CONVENTIONS;
          }
        case 155: break;
        case 13: 
          { return RBRACE;
          }
        case 156: break;
        case 11: 
          { return BACKTICK;
          }
        case 157: break;
        case 87: 
          { return OPERATION;
          }
        case 158: break;
        case 83: 
          { return OTHERWISE;
          }
        case 159: break;
        case 56: 
          { return FAMILY_TYPE;
          }
        case 160: break;
        case 78: 
          { return IMPLICIT;
          }
        case 161: break;
        case 89: 
          { return EXTERNALLY;
          }
        case 162: break;
        case 85: 
          { return EXTENSION;
          }
        case 163: break;
        case 45: 
          { return FROM;
          }
        case 164: break;
        case 15: 
          { return RBRACK;
          }
        case 165: break;
        case 88: 
          { return RECURSIVE;
          }
        case 166: break;
        case 36: 
          { return OF;
          }
        case 167: break;
        case 26: 
          { return LINE_COMMENT;
          }
        case 168: break;
        case 6: 
          { return INT;
          }
        case 169: break;
        case 24: 
          { return EXISTS;
          }
        case 170: break;
        case 33: 
          { return IS;
          }
        case 171: break;
        case 12: 
          { return LBRACE;
          }
        case 172: break;
        case 38: 
          { return PROG_IF;
          }
        case 173: break;
        case 14: 
          { return LBRACK;
          }
        case 174: break;
        case 44: 
          { return VAR;
          }
        case 175: break;
        case 82: 
          { return PROCEDURE;
          }
        case 176: break;
        case 9: 
          { return AT;
          }
        case 177: break;
        case 84: 
          { return PRESERVES;
          }
        case 178: break;
        case 49: 
          { return ELSE;
          }
        case 179: break;
        case 40: 
          { return TRIPLE_DOT;
          }
        case 180: break;
        case 8: 
          { return STRING;
          }
        case 181: break;
        case 32: 
          { return IF;
          }
        case 182: break;
        case 19: 
          { return HYPER_COLON;
          }
        case 183: break;
        case 55: 
          { return WITH;
          }
        case 184: break;
        case 72: 
          { return EXTENDED;
          }
        case 185: break;
        case 79: 
          { return EVALUATES;
          }
        case 186: break;
        case 52: 
          { return THEN;
          }
        case 187: break;
        case 42: 
          { return COLON_EQUALS_COLON;
          }
        case 188: break;
        case 74: 
          { return REPLACES;
          }
        case 189: break;
        case 39: 
          { return FOR;
          }
        case 190: break;
        case 65: 
          { return ENSURES;
          }
        case 191: break;
        case 17: 
          { return RPAREN;
          }
        case 192: break;
        case 76: 
          { return CHANGING;
          }
        case 193: break;
        case 77: 
          { return FACILITY;
          }
        case 194: break;
        case 75: 
          { return REQUIRES;
          }
        case 195: break;
        case 90: 
          { return DECREASING;
          }
        case 196: break;
        case 64: 
          { return RECORD;
          }
        case 197: break;
        case 70: 
          { return THEOREM;
          }
        case 198: break;
        case 35: 
          { return BY;
          }
        case 199: break;
        case 34: 
          { return AS;
          }
        case 200: break;
        case 23: 
          { return QV;
          }
        case 201: break;
        case 94: 
          { return CATEGORICAL;
          }
        case 202: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
