/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package edu.clemson.resolve.jetbrains.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import edu.clemson.resolve.jetbrains.ResTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static edu.clemson.resolve.jetbrains.RESOLVEParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>ResLexer.flex</tt>
 */
class _ResLexer implements FlexLexer, ResTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15136 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1"+
    "\33\1\34\1\23\1\35\1\36\2\23\1\15\1\37\3\23\1\40\10\23\1\41\1\42\20\23\1\43"+
    "\2\23\1\44\5\23\1\45\4\23\1\46\1\47\4\23\51\15\1\50\3\15\1\51\1\52\4\15\1"+
    "\53\12\23\1\54\u0381\23");

  /* The ZZ_CMAP_Y table has 2880 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\22\1\23\1\24\3\22\1\25\10\13\1\26\12\13"+
    "\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13\1\32\1\1\1\34\1"+
    "\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1\43\1\44\1\13\1"+
    "\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52\2\13\1\53\1\1"+
    "\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\16\1\64\1\57\1\60\1\65"+
    "\1\1\1\66\1\67\1\70\1\71\1\72\1\60\1\73\1\1\1\74\1\55\1\75\1\76\1\57\1\60"+
    "\1\73\1\1\1\63\1\55\1\43\1\77\1\100\1\101\1\102\1\1\1\74\1\67\1\1\1\103\1"+
    "\40\1\60\1\53\1\1\1\104\1\55\1\1\1\103\1\40\1\60\1\105\1\1\1\62\1\55\1\106"+
    "\1\103\1\40\1\13\1\107\1\62\1\110\1\55\1\111\1\112\1\113\1\13\1\114\1\115"+
    "\1\1\1\67\1\1\1\27\2\13\1\116\1\115\1\117\2\1\1\120\1\121\1\122\1\123\1\124"+
    "\1\125\2\1\1\74\1\1\1\117\1\1\1\126\1\13\1\127\1\1\1\130\7\1\2\13\1\32\1\110"+
    "\1\117\1\131\1\132\1\133\1\134\1\117\2\13\1\135\2\13\1\136\24\13\1\137\1\140"+
    "\2\13\1\137\2\13\1\141\1\142\1\143\3\13\1\142\3\13\1\32\2\1\1\13\1\1\5\13"+
    "\1\144\1\27\45\13\1\145\1\13\1\27\1\32\4\13\1\32\1\146\1\147\1\16\1\13\1\16"+
    "\1\13\1\16\1\147\1\74\3\13\1\150\1\1\1\151\1\117\2\1\1\117\5\13\1\31\2\13"+
    "\1\152\4\13\1\42\1\13\1\153\2\1\1\67\1\13\1\154\1\51\2\13\1\155\1\13\1\102"+
    "\1\117\2\1\1\13\1\115\3\13\1\51\2\1\2\117\1\156\5\1\1\112\2\13\1\150\1\157"+
    "\1\117\2\1\1\160\1\13\1\161\1\44\2\13\1\42\1\1\2\13\1\150\1\1\1\162\1\44\1"+
    "\13\1\154\6\1\1\163\1\164\14\13\4\1\21\13\1\144\2\13\1\144\1\165\1\13\1\154"+
    "\3\13\1\166\1\167\1\170\1\127\1\167\2\1\1\171\1\172\3\1\1\173\1\1\1\127\6"+
    "\1\1\174\1\175\1\176\1\177\1\200\3\1\1\201\1\202\1\203\1\204\1\205\1\206\2"+
    "\1\1\207\1\210\1\211\1\212\1\213\1\214\1\215\1\216\1\217\1\220\1\221\1\222"+
    "\1\223\3\1\1\224\10\1\1\225\1\226\40\1\1\227\41\1\1\230\1\231\1\232\40\1\1"+
    "\233\1\1\1\234\1\235\4\1\1\236\27\1\2\13\1\153\2\13\1\153\10\13\1\237\1\240"+
    "\2\13\1\135\3\13\1\241\1\1\1\13\1\115\4\242\4\1\1\110\35\1\1\243\2\1\1\244"+
    "\1\27\4\13\1\245\1\27\4\13\1\136\1\112\1\13\1\154\1\27\4\13\1\153\1\1\1\13"+
    "\1\32\3\1\1\13\40\1\133\13\1\42\4\1\135\13\1\42\2\1\10\13\1\127\4\1\2\13\1"+
    "\154\20\13\1\127\1\13\1\246\1\1\2\13\1\153\1\110\1\13\1\154\4\13\1\42\2\1"+
    "\1\247\1\250\5\13\1\251\1\13\1\154\1\31\3\1\1\247\1\252\1\13\1\33\1\1\3\13"+
    "\1\150\1\250\2\13\1\150\1\1\1\117\1\1\1\253\1\44\1\13\1\42\1\13\1\115\1\1"+
    "\1\13\1\127\1\52\2\13\1\33\1\110\1\117\1\254\1\255\2\13\1\50\1\1\1\256\1\117"+
    "\1\13\1\257\3\13\1\260\1\261\1\262\1\32\1\70\1\263\1\264\1\242\2\13\1\136"+
    "\1\42\7\13\1\33\1\117\72\13\1\150\1\13\1\265\2\13\1\155\120\1\26\13\1\154"+
    "\6\13\1\102\2\1\1\115\1\266\1\60\1\267\1\270\6\13\1\16\1\1\1\160\25\13\1\154"+
    "\1\1\4\13\1\250\2\13\1\31\2\1\1\155\7\1\1\254\7\13\1\127\1\1\1\117\1\27\1"+
    "\32\1\27\1\32\1\271\4\13\1\153\1\272\1\273\2\1\1\274\1\13\1\143\1\275\2\154"+
    "\2\1\7\13\1\32\30\1\1\13\1\127\3\13\1\74\2\1\2\13\1\1\1\13\1\276\2\13\1\42"+
    "\1\13\1\154\2\13\1\277\3\1\11\13\1\154\1\117\5\1\2\13\1\31\3\13\1\150\11\1"+
    "\23\13\1\115\1\13\1\42\1\31\11\1\1\300\2\13\1\301\1\13\1\42\1\13\1\115\1\13"+
    "\1\153\4\1\1\13\1\302\1\13\1\42\1\13\1\102\4\1\3\13\1\303\4\1\1\74\1\304\1"+
    "\13\1\150\2\1\1\13\1\127\1\13\1\127\2\1\1\126\1\13\1\51\1\1\3\13\1\42\1\13"+
    "\1\42\1\13\1\33\1\13\1\16\6\1\4\13\1\50\3\1\3\13\1\33\3\13\1\33\60\1\1\160"+
    "\2\13\1\31\2\1\1\67\1\1\1\160\2\13\2\1\1\13\1\50\1\117\1\160\1\13\1\115\1"+
    "\67\1\1\2\13\1\305\1\160\2\13\1\33\1\306\1\307\2\1\1\13\1\72\1\155\5\1\1\310"+
    "\1\311\1\50\2\13\1\153\1\1\1\117\1\76\1\57\1\60\1\73\1\1\1\312\1\16\21\1\3"+
    "\13\1\1\1\313\1\117\12\1\2\13\1\153\2\1\1\314\2\1\3\13\1\1\1\315\1\117\2\1"+
    "\2\13\1\32\1\1\1\117\3\1\1\13\1\102\1\1\1\117\26\1\4\13\1\117\1\110\34\1\3"+
    "\13\1\50\20\1\71\13\1\102\16\1\14\13\1\150\53\1\2\13\1\153\75\1\44\13\1\115"+
    "\33\1\43\13\1\50\1\13\1\153\1\117\6\1\1\13\1\154\1\1\3\13\1\1\1\150\1\117"+
    "\1\160\1\316\1\13\67\1\4\13\1\51\1\74\3\1\1\160\6\1\1\16\77\1\6\13\1\32\1"+
    "\127\1\50\1\102\66\1\5\13\1\254\3\13\1\147\1\317\1\320\1\321\3\13\1\322\1"+
    "\323\1\13\1\324\1\325\1\40\24\13\1\326\1\13\1\40\1\136\1\13\1\136\1\13\1\254"+
    "\1\13\1\254\1\153\1\13\1\153\1\13\1\60\1\13\1\60\1\13\1\327\3\330\14\13\1"+
    "\51\123\1\1\321\1\13\1\331\1\332\1\333\1\334\1\335\1\336\1\337\1\155\1\340"+
    "\1\155\24\1\55\13\1\115\2\1\103\13\1\51\15\13\1\154\150\13\1\16\25\1\41\13"+
    "\1\154\36\1");

  /* The ZZ_CMAP_A table has 3600 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\2\22\0\1\3\1\16\1\20\1\26\3\0\1\25\1\45\1\46\1\6\1"+
    "\16\1\51\1\16\1\27\1\5\1\13\10\23\1\12\1\47\1\50\1\16\1\17\1\16\2\0\2\7\1"+
    "\60\1\100\1\101\1\105\2\7\1\106\4\7\1\111\1\112\1\64\1\7\1\110\1\7\1\115\1"+
    "\22\1\116\1\117\3\7\1\37\1\21\1\40\1\0\1\10\1\0\1\61\1\56\1\71\1\66\1\67\1"+
    "\24\1\70\1\73\1\52\2\7\1\72\1\103\1\74\1\65\1\75\1\114\1\62\1\76\1\63\1\104"+
    "\1\77\1\113\1\102\1\57\1\107\1\41\1\44\1\42\1\16\6\0\1\1\24\0\1\7\1\0\1\14"+
    "\4\0\1\14\3\0\1\7\4\0\1\7\5\0\27\7\1\14\12\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0"+
    "\1\7\1\0\5\15\1\14\2\15\2\14\4\15\1\14\1\15\6\14\1\15\1\14\3\15\1\14\1\15"+
    "\1\14\24\15\1\14\30\15\1\53\12\15\1\14\11\15\2\7\10\0\6\7\1\0\26\7\2\0\1\7"+
    "\6\0\10\7\10\0\13\7\5\0\3\7\15\0\12\11\4\0\6\7\1\0\1\7\17\0\2\7\7\0\2\7\12"+
    "\11\3\7\2\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\11\6\7\4\0\2\7\4\0\1\7"+
    "\5\0\6\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\17\0\26\7\3\0\1\7\2\0\1"+
    "\7\7\0\12\7\4\0\12\11\1\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4"+
    "\7\3\0\1\7\20\0\1\7\15\0\2\7\1\0\1\7\5\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0\2"+
    "\7\17\0\4\7\1\0\1\7\7\0\12\11\2\0\3\7\20\0\11\7\1\0\3\7\1\0\16\7\1\0\2\7\1"+
    "\0\5\7\3\0\1\7\2\0\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7\1\0\6\7\3\0\3\7"+
    "\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\13\0\10\7\1\0\2"+
    "\7\10\0\3\7\5\0\4\7\1\0\5\7\3\0\1\7\3\0\2\7\15\0\13\7\2\0\1\7\21\0\1\7\12"+
    "\0\6\7\5\0\22\7\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11\0\1\7\1\0\2\7\14\0\12"+
    "\11\7\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1"+
    "\7\1\0\1\7\2\0\2\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7\11\0\12\11\2\0"+
    "\14\7\1\0\24\7\13\0\5\7\3\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14"+
    "\0\1\7\1\0\6\7\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7\2\0\7\7\1\0\1\7\1"+
    "\0\4\7\2\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0\16\7\2\0\6\7\2"+
    "\0\15\7\2\0\1\7\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1\7\4\0\1\7\3\0\11\7\1\0\1"+
    "\7\5\0\17\7\1\0\16\7\2\0\14\7\13\0\1\7\15\0\7\7\7\0\16\7\15\0\2\7\12\11\3"+
    "\0\3\7\11\0\4\7\1\0\4\7\3\0\2\7\11\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7"+
    "\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\14\0\2\1\10\0\1\43\16\0\1"+
    "\7\15\0\1\7\2\0\1\15\4\0\1\7\2\0\12\7\1\0\1\15\2\0\1\14\1\7\1\15\2\7\1\15"+
    "\6\0\1\15\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\2\7"+
    "\13\0\6\14\7\0\1\14\4\0\3\14\1\0\1\14\2\0\2\14\21\0\10\14\10\0\1\14\3\0\6"+
    "\14\12\0\1\55\2\0\1\54\4\0\2\14\4\0\4\14\1\0\1\14\4\0\2\14\3\0\1\14\7\0\1"+
    "\30\1\0\4\14\21\0\1\14\6\0\1\14\1\0\1\14\2\0\1\14\4\0\1\14\2\0\1\14\13\0\1"+
    "\14\3\0\2\14\2\0\2\14\4\0\2\14\6\0\2\14\10\0\2\14\4\0\2\14\2\0\2\14\6\0\14"+
    "\14\6\0\4\14\4\0\2\14\1\0\1\14\6\0\4\14\12\0\7\14\1\0\3\14\15\0\1\33\1\34"+
    "\23\0\1\35\2\0\1\36\22\0\1\14\21\0\3\14\20\0\1\31\1\32\13\0\6\14\5\0\3\14"+
    "\1\0\3\14\23\0\1\14\24\0\1\14\5\0\2\14\11\0\5\7\6\0\4\7\3\0\2\7\14\0\10\7"+
    "\7\0\10\7\1\0\7\7\6\0\2\7\12\0\5\7\5\0\2\7\3\0\7\7\6\0\3\7\12\11\2\7\13\0"+
    "\11\7\2\0\27\7\2\0\7\7\1\0\3\7\1\0\4\7\1\0\4\7\2\0\6\7\3\0\1\7\1\0\1\7\2\0"+
    "\5\7\1\0\12\7\12\11\5\7\1\0\3\7\1\0\10\7\4\0\7\7\3\0\1\7\3\0\2\7\1\0\1\7\3"+
    "\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0\3\7\3\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\4"+
    "\0\5\7\3\0\5\7\5\0\1\7\1\0\10\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\12\7\6"+
    "\0\12\7\2\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\14\7\1\0\16\7\1\0\2\7\1\0\2\7"+
    "\1\0\10\7\6\0\4\7\4\0\16\7\2\0\1\7\1\0\14\7\1\0\2\7\3\0\1\7\2\0\4\7\1\0\2"+
    "\7\12\0\10\7\6\0\6\7\1\0\3\7\1\0\12\7\3\0\1\7\12\0\4\7\13\0\12\11\1\7\1\0"+
    "\1\7\3\0\7\7\1\0\1\7\1\0\4\7\1\0\17\7\1\0\2\7\14\0\3\7\4\0\2\7\1\0\1\7\20"+
    "\0\4\7\10\0\1\7\13\0\10\7\5\0\3\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7"+
    "\1\0\7\7\1\0\21\7\1\0\4\7\2\0\10\7\1\0\7\7\1\0\14\7\1\0\4\7\1\0\5\7\1\0\1"+
    "\7\3\0\14\7\2\0\13\7\1\0\10\7\2\0\22\11\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1"+
    "\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7"+
    "\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7\1\0\5\7\1\0\3\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\1\5\2\6\2\7"+
    "\1\10\1\5\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\5"+
    "\1\35\1\36\1\37\30\5\1\40\1\41\1\10\1\0"+
    "\3\5\3\0\1\42\1\43\1\0\1\44\1\45\1\46"+
    "\1\5\1\47\1\50\11\5\1\51\1\5\1\52\21\5"+
    "\1\53\12\5\1\41\3\5\1\54\1\55\1\1\1\56"+
    "\2\0\1\57\23\5\1\60\33\5\1\61\1\5\1\41"+
    "\1\0\2\5\1\62\1\63\1\0\13\5\1\64\1\65"+
    "\1\66\4\5\1\67\21\5\1\70\11\5\1\71\2\5"+
    "\1\72\1\5\1\73\52\5\1\74\1\75\6\5\1\76"+
    "\5\5\1\77\12\5\1\100\15\5\1\101\1\5\1\102"+
    "\7\5\1\103\11\5\1\104\11\5\1\105\3\5\1\106"+
    "\1\107\7\5\1\110\5\5\1\111\1\112\1\113\1\114"+
    "\3\5\1\115\2\5\1\116\3\5\1\117\5\5\1\120"+
    "\1\5\1\121\5\5\1\122\1\5\1\123\1\124\1\125"+
    "\1\126\1\5\1\127\4\5\1\130\2\5\1\131\1\5"+
    "\1\132\1\5\1\133\1\134\3\5\1\135\1\136\3\5"+
    "\1\137\5\5\1\140\1\5\1\141\1\142\1\143\1\144"+
    "\1\145\6\5\1\146\1\147\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\120\0\240\0\360\0\120\0\u0140"+
    "\0\u0190\0\120\0\120\0\u0140\0\u01e0\0\u0230\0\u0280\0\120"+
    "\0\u02d0\0\120\0\120\0\120\0\120\0\120\0\120\0\120"+
    "\0\120\0\120\0\u0320\0\u0370\0\120\0\120\0\u03c0\0\120"+
    "\0\u0410\0\120\0\120\0\u0460\0\u0140\0\120\0\120\0\u04b0"+
    "\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0\0\u0730"+
    "\0\u0780\0\u07d0\0\u0820\0\u0870\0\u08c0\0\u0910\0\u0960\0\u09b0"+
    "\0\u0a00\0\u0a50\0\u0aa0\0\u0af0\0\u0b40\0\u0b90\0\u0be0\0\u0c30"+
    "\0\u0c80\0\120\0\u0cd0\0\u0d20\0\u0d70\0\u0dc0\0\u0e10\0\u0e60"+
    "\0\u0eb0\0\120\0\120\0\u0f00\0\u0f50\0\120\0\u0140\0\u0fa0"+
    "\0\u0140\0\u0140\0\u0ff0\0\u1040\0\u1090\0\u10e0\0\u1130\0\u1180"+
    "\0\u11d0\0\u1220\0\u1270\0\u0140\0\u12c0\0\u0140\0\u1310\0\u1360"+
    "\0\u13b0\0\u1400\0\u1450\0\u14a0\0\u14f0\0\u1540\0\u1590\0\u15e0"+
    "\0\u1630\0\u1680\0\u16d0\0\u1720\0\u1770\0\u17c0\0\u1810\0\u0140"+
    "\0\u1860\0\u18b0\0\u1900\0\u1950\0\u19a0\0\u19f0\0\u1a40\0\u1a90"+
    "\0\u1ae0\0\u1b30\0\u1b80\0\u1bd0\0\u1c20\0\u1c70\0\u0140\0\120"+
    "\0\u0e10\0\120\0\u1cc0\0\u1d10\0\120\0\u1d60\0\u1db0\0\u1e00"+
    "\0\u1e50\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90\0\u1fe0\0\u2030\0\u2080"+
    "\0\u20d0\0\u2120\0\u2170\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300"+
    "\0\u0140\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u24e0\0\u2530"+
    "\0\u2580\0\u25d0\0\u2620\0\u2670\0\u26c0\0\u2710\0\u2760\0\u27b0"+
    "\0\u2800\0\u2850\0\u28a0\0\u28f0\0\u2940\0\u2990\0\u29e0\0\u2a30"+
    "\0\u2a80\0\u2ad0\0\u2b20\0\u2b70\0\u0140\0\u2bc0\0\120\0\u1b80"+
    "\0\u2c10\0\u2c60\0\u0140\0\120\0\u2cb0\0\u2d00\0\u2d50\0\u2da0"+
    "\0\u2df0\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u2f80\0\u2fd0\0\u3020"+
    "\0\u0140\0\u0140\0\u0140\0\u3070\0\u30c0\0\u3110\0\u3160\0\u0140"+
    "\0\u31b0\0\u3200\0\u3250\0\u32a0\0\u32f0\0\u3340\0\u3390\0\u33e0"+
    "\0\u3430\0\u3480\0\u34d0\0\u3520\0\u3570\0\u35c0\0\u3610\0\u3660"+
    "\0\u36b0\0\u0140\0\u3700\0\u3750\0\u37a0\0\u37f0\0\u3840\0\u3890"+
    "\0\u38e0\0\u3930\0\u3980\0\u0140\0\u39d0\0\u3a20\0\u0140\0\u3a70"+
    "\0\120\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u3c00\0\u3c50\0\u3ca0"+
    "\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u3e80\0\u3ed0\0\u3f20"+
    "\0\u3f70\0\u3fc0\0\u4010\0\u4060\0\u40b0\0\u4100\0\u4150\0\u41a0"+
    "\0\u41f0\0\u4240\0\u4290\0\u42e0\0\u4330\0\u4380\0\u43d0\0\u4420"+
    "\0\u4470\0\u44c0\0\u4510\0\u4560\0\u45b0\0\u4600\0\u4650\0\u46a0"+
    "\0\u46f0\0\u4740\0\u4790\0\u0140\0\u0140\0\u47e0\0\u4830\0\u4880"+
    "\0\u48d0\0\u4920\0\u4970\0\u0140\0\u49c0\0\u4a10\0\u4a60\0\u4ab0"+
    "\0\u4b00\0\u0140\0\u4b50\0\u4ba0\0\u4bf0\0\u4c40\0\u4c90\0\u4ce0"+
    "\0\u4d30\0\u4d80\0\u4dd0\0\u4e20\0\u0140\0\u4e70\0\u4ec0\0\u4f10"+
    "\0\u4f60\0\u4fb0\0\u5000\0\u5050\0\u50a0\0\u50f0\0\u5140\0\u5190"+
    "\0\u51e0\0\u5230\0\u0140\0\u5280\0\u0140\0\u52d0\0\u5320\0\u5370"+
    "\0\u53c0\0\u5410\0\u5460\0\u54b0\0\u0140\0\u5500\0\u5550\0\u55a0"+
    "\0\u55f0\0\u5640\0\u5690\0\u56e0\0\u5730\0\u5780\0\u0140\0\u57d0"+
    "\0\u5820\0\u5870\0\u58c0\0\u5910\0\u5960\0\u59b0\0\u5a00\0\u5a50"+
    "\0\u0140\0\u5aa0\0\u5af0\0\u5b40\0\u0140\0\u0140\0\u5b90\0\u5be0"+
    "\0\u5c30\0\u5c80\0\u5cd0\0\u5d20\0\u5d70\0\u0140\0\u5dc0\0\u5e10"+
    "\0\u5e60\0\u5eb0\0\u5f00\0\u0140\0\u0140\0\u0140\0\u0140\0\u5f50"+
    "\0\u5fa0\0\u5ff0\0\u0140\0\u6040\0\u6090\0\u0140\0\u60e0\0\u6130"+
    "\0\u6180\0\u0140\0\u61d0\0\u6220\0\u6270\0\u62c0\0\u6310\0\u0140"+
    "\0\u6360\0\u0140\0\u63b0\0\u6400\0\u6450\0\u64a0\0\u64f0\0\u0140"+
    "\0\u6540\0\u0140\0\u0140\0\u0140\0\u0140\0\u6590\0\u0140\0\u65e0"+
    "\0\u6630\0\u6680\0\u66d0\0\u0140\0\u6720\0\u6770\0\u0140\0\u67c0"+
    "\0\u0140\0\u6810\0\u0140\0\u0140\0\u6860\0\u68b0\0\u6900\0\u0140"+
    "\0\u0140\0\u6950\0\u69a0\0\u69f0\0\u0140\0\u6a40\0\u6a90\0\u6ae0"+
    "\0\u6b30\0\u6b80\0\u0140\0\u6bd0\0\u0140\0\u0140\0\u0140\0\u0140"+
    "\0\u0140\0\u6c20\0\u6c70\0\u6cc0\0\u6d10\0\u6d60\0\u6db0\0\u0140"+
    "\0\u0140\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\2\10\1\2"+
    "\1\11\1\12\1\13\1\14\2\7\1\15\1\2\1\10"+
    "\1\11\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\10\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\10\1\61\3\10"+
    "\1\62\2\10\1\63\1\64\1\10\1\65\1\66\1\67"+
    "\1\70\1\10\1\71\1\72\1\73\1\74\1\10\1\75"+
    "\1\76\1\77\121\0\2\3\1\0\1\3\120\0\1\100"+
    "\1\101\120\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\42\10\12\0\2\11\7\0\1\11\74\0"+
    "\2\15\1\0\15\15\1\102\1\103\76\15\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\3\10"+
    "\1\104\1\105\2\10\1\106\32\10\21\107\1\110\76\107"+
    "\27\0\1\111\131\0\1\112\120\0\1\113\127\0\1\114"+
    "\64\0\1\115\27\0\1\116\57\0\5\10\1\0\1\10"+
    "\4\0\2\10\1\117\25\0\2\10\2\0\16\10\1\120"+
    "\1\10\1\121\21\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\1\10\1\122\40\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\3\10\1\123\3\10\1\124\5\10\1\125\24\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\14\10\1\126\25\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\11\10\1\127\30\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\1\10\1\130\2\10\1\131\10\10\1\132\24\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\4\10\1\133\35\10\7\0\5\10\1\0\1\10\4\0"+
    "\2\10\1\134\25\0\2\10\2\0\5\10\1\135\34\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\7\10\1\136\1\10\1\137\30\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\14\10"+
    "\1\140\1\10\1\141\2\10\1\142\2\10\1\143\15\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\7\10\1\144\4\10\1\145\1\146\24\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\4\10\1\147\35\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\11\10\1\150\30\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\16\10\1\151\5\10\1\152\15\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\3\10\1\153"+
    "\3\10\1\154\32\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\17\10\1\155\1\156\21\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\3\10\1\157\36\10\7\0\5\10\1\0\1\10"+
    "\4\0\2\10\1\160\25\0\2\10\2\0\16\10\1\161"+
    "\6\10\1\162\14\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\11\10\1\163\30\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\7\10\1\164\32\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\17\10\1\165\22\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\15\10\1\166\24\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\1\10\1\167\13\10\1\170"+
    "\24\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\3\10\1\171\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\15\10\1\172"+
    "\24\10\2\100\1\0\115\100\6\101\1\173\111\101\13\0"+
    "\1\15\4\0\5\15\31\0\1\15\2\0\3\15\10\0"+
    "\1\15\2\0\1\15\2\0\1\15\1\0\1\15\22\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\14\10\1\174\10\10\1\175\14\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\7\10\1\176"+
    "\32\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\4\10\1\177\35\10\25\0\1\200\113\0"+
    "\1\107\2\0\1\107\1\201\30\0\1\107\2\0\3\107"+
    "\10\0\1\107\2\0\1\107\47\0\1\202\117\0\1\203"+
    "\22\0\1\204\114\0\1\205\57\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\1\206\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\4\10\1\207\1\210\34\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\4\10\1\211\11\10"+
    "\1\212\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\3\10\1\213\36\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\5\10"+
    "\1\214\34\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\3\10\1\215\13\10\1\216\1\217"+
    "\15\10\1\220\3\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\17\10\1\221\22\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\26\10\1\222\13\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\11\10\1\223\30\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\7\10\1\224\1\10\1\225\30\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\15\10\1\226"+
    "\24\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\13\10\1\227\26\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\20\10\1\230"+
    "\21\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\10\10\1\231\4\10\1\232\2\10\1\233"+
    "\21\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\3\10\1\234\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\5\10\1\235"+
    "\3\10\1\236\30\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\4\10\1\237\11\10\1\240"+
    "\23\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\11\10\1\241\30\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\3\10\1\242"+
    "\36\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\11\10\1\243\30\10\7\0\5\10\1\0"+
    "\1\10\4\0\2\10\1\244\25\0\2\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\15\10\1\245\24\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\5\10\1\246\34\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\1\247"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\10\10\1\250\31\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\10\10\1\251\31\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\11\10\1\252\30\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\13\10\1\253\26\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\10\10\1\254\31\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\17\10\1\255\22\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\3\10\1\256\7\10\1\257"+
    "\26\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\5\10\1\260\34\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\261"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\1\262\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\17\10\1\263\22\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\11\10\1\264\30\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\4\10\1\265\35\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\1\266"+
    "\1\10\2\0\42\10\5\101\1\267\1\270\111\101\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\20\10\1\271\21\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\1\272\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\25\10"+
    "\1\273\14\10\46\0\1\274\100\0\1\275\77\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\5\10"+
    "\1\276\34\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\5\10\1\277\34\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\11\10"+
    "\1\300\30\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\7\10\1\301\32\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\13\10"+
    "\1\302\26\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\1\303\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\304"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\14\10\1\305\25\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\14\10\1\306"+
    "\25\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\5\10\1\307\34\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\26\10\1\310"+
    "\13\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\11\10\1\311\30\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\312"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\16\10\1\313\23\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\13\10\1\314"+
    "\26\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\13\10\1\315\26\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\316"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\4\10\1\317\35\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\320"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\3\10\1\321\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\26\10\1\322"+
    "\13\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\14\10\1\323\25\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\324"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\25\10\1\325\14\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\4\10\1\326"+
    "\35\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\20\10\1\327\1\330\20\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\3\10"+
    "\1\331\36\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\16\10\1\332\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\20\10"+
    "\1\333\21\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\1\334\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\3\10\1\335"+
    "\36\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\11\10\1\336\30\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\16\10\1\337"+
    "\23\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\11\10\1\340\30\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\3\10\1\341"+
    "\36\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\20\10\1\342\21\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\1\343\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\26\10\1\344\13\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\14\10\1\345\25\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\14\10\1\346\25\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\7\10\1\347\16\10"+
    "\1\350\13\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\1\351\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\4\10\1\352"+
    "\35\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\13\10\1\353\26\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\354"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\7\10\1\355\32\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\14\10\1\356"+
    "\25\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\11\10\1\357\30\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\14\10\1\360"+
    "\25\10\46\0\1\361\60\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\1\362\1\10\2\0\42\10\7\0\1\10"+
    "\1\363\3\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\42\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\12\10\1\364\27\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\14\10"+
    "\1\365\25\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\11\10\1\366\30\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\16\10"+
    "\1\367\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\4\10\1\370\35\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\1\371\1\10\2\0"+
    "\42\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\3\10\1\372\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\7\10\1\373"+
    "\32\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\1\374\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\11\10\1\375\30\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\1\376"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\4\10\1\377\35\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\11\10\1\u0100\30\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\16\10\1\u0101\23\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\4\10\1\u0102\35\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\26\10\1\u0103\13\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\4\10\1\u0104\35\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\17\10\1\u0105\22\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\11\10\1\u0106\30\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\5\10\1\u0107\34\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\11\10\1\u0108\30\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\4\10\1\u0109\35\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\12\10\1\u010a\27\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\11\10\1\u010b\30\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\16\10\1\u010c\23\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\16\10\1\u010d\23\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\16\10\1\u010e\23\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\5\10\1\u010f\34\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\14\10\1\u0110\25\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\5\10\1\u0111\34\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\14\10\1\u0112\25\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\13\10\1\u0113\26\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\1\u0114\1\10"+
    "\2\0\42\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\1\u0115\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\4\10\1\u0116"+
    "\35\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\4\10\1\u0117\35\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\13\10\1\u0118"+
    "\26\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\3\10\1\u0119\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\15\10\1\u011a"+
    "\24\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\4\10\1\u011b\35\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\u011c"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\1\10\1\u011d\40\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\3\10\1\u011e"+
    "\36\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\6\10\1\u011f\33\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\7\10\1\u0120"+
    "\32\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\14\10\1\u0121\25\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\17\10\1\u0122"+
    "\22\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\3\10\1\u0123\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\20\10\1\u0124"+
    "\21\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\31\10\1\u0125\10\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\13\10\1\u0126"+
    "\26\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\4\10\1\u0127\35\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\4\10\1\u0128"+
    "\35\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\10\10\1\u0129\31\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\20\10\1\u012a"+
    "\21\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\35\10\1\u012b\4\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\3\10\1\u012c"+
    "\36\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\13\10\1\u012d\26\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\u012e"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\3\10\1\u012f\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\16\10\1\u0130"+
    "\23\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\14\10\1\u0131\25\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\20\10\1\u0132"+
    "\21\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\4\10\1\u0133\35\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\16\10\1\u0134"+
    "\23\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\20\10\1\u0135\21\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\1\u0136\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\4\10\1\u0137\35\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\1\u0138\1\10\2\0\11\10\1\u0139"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\13\10\1\u013a\26\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\20\10\1\u013b"+
    "\21\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\3\10\1\u013c\36\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\u013d"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\11\10\1\u013e\30\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\1\u013f\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\5\10\1\u0140\34\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\13\10\1\u0141\26\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\31\10\1\u0142\10\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\10\10\1\u0143\31\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\20\10\1\u0144\21\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\11\10\1\u0145\30\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\5\10\1\u0146\34\10\7\0\1\10\1\u0147\3\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\11\10\1\u0148\30\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\14\10\1\u0149\25\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\4\10\1\u014a\35\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\4\10\1\u014b\35\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\3\10\1\u014c\36\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\5\10\1\u014d\34\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\1\u014e\41\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\11\10\1\u014f\30\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\11\10\1\u0150\30\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\11\10\1\u0151\30\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\11\10\1\u0152\30\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\26\10\1\u0153\13\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\1\u0154\1\10"+
    "\2\0\42\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\20\10\1\u0155\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\11\10"+
    "\1\u0156\30\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\20\10\1\u0157\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\5\10"+
    "\1\u0158\34\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\3\10\1\u0159\36\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\3\10"+
    "\1\u015a\36\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\17\10\1\u015b\22\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\3\10"+
    "\1\u015c\36\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\5\10\1\u015d\34\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\16\10"+
    "\1\u015e\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\21\10\1\u015f\20\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\5\10"+
    "\1\u0160\34\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\20\10\1\u0161\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\11\10"+
    "\1\u0162\30\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\1\u0163\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\1\u0164\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\10\10\1\u0165\31\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\20\10\1\u0166\21\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\5\10\1\u0167\34\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\1\u0168\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\1\u0169\1\10"+
    "\2\0\42\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\3\10\1\u016a\36\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\1\u016b\1\10\2\0"+
    "\42\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\1\u016c\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\11\10\1\u016d\30\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\25\10\1\u016e\14\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\1\u016f\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\7\10\1\u0170\32\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\1\u0171\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\4\10"+
    "\1\u0172\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\14\10\1\u0173\25\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\10\10"+
    "\1\u0174\31\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\20\10\1\u0175\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\20\10"+
    "\1\u0176\21\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\20\10\1\u0177\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\4\10"+
    "\1\u0178\35\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\20\10\1\u0179\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\1\u017a\1\10\2\0"+
    "\42\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\10\10\1\u017b\31\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\u017c"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\14\10\1\u017d\25\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\4\10\1\u017e"+
    "\35\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\2\10\2\0\7\10\1\u017f\32\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\1\u0180\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\1\u0181"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\2\10\2\0\12\10\1\u0182\27\10\7\0"+
    "\5\10\1\0\1\10\4\0\3\10\25\0\2\10\2\0"+
    "\11\10\1\u0183\30\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\1\u0184\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\25\10"+
    "\1\u0185\14\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\7\10\1\u0186\32\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\16\10"+
    "\1\u0187\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\1\10\1\u0188\40\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\21\10"+
    "\1\u0189\20\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\5\10\1\u018a\34\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\5\10"+
    "\1\u018b\34\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\21\10\1\u018c\20\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\7\10"+
    "\1\u018d\32\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\16\10\1\u018e\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\31\10"+
    "\1\u018f\10\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\10\10\1\u0190\31\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\13\10"+
    "\1\u0191\26\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\1\10\1\u0192\40\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\11\10"+
    "\1\u0193\30\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\11\10\1\u0194\30\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\11\10"+
    "\1\u0195\30\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\16\10\1\u0196\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\20\10"+
    "\1\u0197\21\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\14\10\1\u0198\25\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\16\10"+
    "\1\u0199\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\16\10\1\u019a\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\7\10"+
    "\1\u019b\32\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\20\10\1\u019c\21\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\7\10"+
    "\1\u019d\32\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\11\10\1\u019e\30\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\16\10"+
    "\1\u019f\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\1\u01a0\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\4\0\3\10\25\0\2\10\2\0\11\10\1\u01a1"+
    "\30\10\7\0\5\10\1\0\1\10\4\0\3\10\25\0"+
    "\1\u01a2\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\11\10\1\u01a3\30\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\16\10\1\u01a4\23\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\5\10\1\u01a5\34\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\3\10\1\u01a6\36\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\3\10\1\u01a7\36\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\12\10\1\u01a8\27\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\1\10\1\u01a9\40\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\10\10\1\u01aa\31\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\5\10\1\u01ab\34\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\16\10\1\u01ac\23\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\16\10\1\u01ad\23\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\16\10\1\u01ae\23\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\16\10\1\u01af\23\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\7\10\1\u01b0\32\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\3\10\1\u01b1\36\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\5\10\1\u01b2\34\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\14\10\1\u01b3\25\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\11\10\1\u01b4\30\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\20\10\1\u01b5\21\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\20\10\1\u01b6\21\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\5\10\1\u01b7\34\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\2\10"+
    "\2\0\12\10\1\u01b8\27\10\7\0\5\10\1\0\1\10"+
    "\4\0\3\10\25\0\2\10\2\0\16\10\1\u01b9\23\10"+
    "\7\0\5\10\1\0\1\10\4\0\3\10\25\0\1\u01ba"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\4\0"+
    "\3\10\25\0\1\u01bb\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\16\10"+
    "\1\u01bc\23\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\14\10\1\u01bd\25\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\7\10"+
    "\1\u01be\32\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\13\10\1\u01bf\26\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\20\10"+
    "\1\u01c0\21\10\7\0\5\10\1\0\1\10\4\0\3\10"+
    "\25\0\2\10\2\0\16\10\1\u01c1\23\10\7\0\5\10"+
    "\1\0\1\10\4\0\3\10\25\0\2\10\2\0\11\10"+
    "\1\u01c2\30\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\4\1\1\11\1\1\11\11\2\1\2\11\1\1\1\11"+
    "\1\1\2\11\2\1\2\11\32\1\1\11\1\0\3\1"+
    "\3\0\2\11\1\0\1\1\1\11\61\1\1\11\1\1"+
    "\1\11\2\0\1\11\61\1\1\11\1\0\3\1\1\11"+
    "\1\0\63\1\1\11\321\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ResLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ResLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 105: break;
          case 2: 
            { return NLS;
            }
          case 106: break;
          case 3: 
            { return WS;
            }
          case 107: break;
          case 4: 
            { return SYMBOL;
            }
          case 108: break;
          case 5: 
            { return IDENTIFIER;
            }
          case 109: break;
          case 6: 
            { return INT;
            }
          case 110: break;
          case 7: 
            { return MATHSYMBOL;
            }
          case 111: break;
          case 8: 
            { return STRING;
            }
          case 112: break;
          case 9: 
            { return POUND;
            }
          case 113: break;
          case 10: 
            { return DOT;
            }
          case 114: break;
          case 11: 
            { return DBL_BAR;
            }
          case 115: break;
          case 12: 
            { return LANGLE;
            }
          case 116: break;
          case 13: 
            { return RANGLE;
            }
          case 117: break;
          case 14: 
            { return LCEIL;
            }
          case 118: break;
          case 15: 
            { return RCEIL;
            }
          case 119: break;
          case 16: 
            { return LCUP;
            }
          case 120: break;
          case 17: 
            { return RCUP;
            }
          case 121: break;
          case 18: 
            { return LBRACK;
            }
          case 122: break;
          case 19: 
            { return RBRACK;
            }
          case 123: break;
          case 20: 
            { return LBRACE;
            }
          case 124: break;
          case 21: 
            { return RBRACE;
            }
          case 125: break;
          case 22: 
            { return PRIME;
            }
          case 126: break;
          case 23: 
            { return BAR;
            }
          case 127: break;
          case 24: 
            { return LPAREN;
            }
          case 128: break;
          case 25: 
            { return RPAREN;
            }
          case 129: break;
          case 26: 
            { return COLON;
            }
          case 130: break;
          case 27: 
            { return SEMICOLON;
            }
          case 131: break;
          case 28: 
            { return COMMA;
            }
          case 132: break;
          case 29: 
            { return LAMBDA;
            }
          case 133: break;
          case 30: 
            { return EXISTS;
            }
          case 134: break;
          case 31: 
            { return FORALL;
            }
          case 135: break;
          case 32: 
            { return LINE_COMMENT;
            }
          case 136: break;
          case 33: 
            { return MULTILINE_COMMENT;
            }
          case 137: break;
          case 34: 
            { return DBL_LBRACE;
            }
          case 138: break;
          case 35: 
            { return DBL_RBRACE;
            }
          case 139: break;
          case 36: 
            { return COLON_EQUALS;
            }
          case 140: break;
          case 37: 
            { return COLON_COLON;
            }
          case 141: break;
          case 38: 
            { return IF;
            }
          case 142: break;
          case 39: 
            { return IS;
            }
          case 143: break;
          case 40: 
            { return BY;
            }
          case 144: break;
          case 41: 
            { return OF;
            }
          case 145: break;
          case 42: 
            { return DO;
            }
          case 146: break;
          case 43: 
            { return PROG_IF;
            }
          case 147: break;
          case 44: 
            { return FOR;
            }
          case 148: break;
          case 45: 
            { return CHAR;
            }
          case 149: break;
          case 46: 
            { return TRIPLE_DOT;
            }
          case 150: break;
          case 47: 
            { return COLON_EQUALS_COLON;
            }
          case 151: break;
          case 48: 
            { return END;
            }
          case 152: break;
          case 49: 
            { return VAR;
            }
          case 153: break;
          case 50: 
            { return FROM;
            }
          case 154: break;
          case 51: 
            { return IND_BASE;
            }
          case 155: break;
          case 52: 
            { return PARAM_TYPE;
            }
          case 156: break;
          case 53: 
            { return TRUE;
            }
          case 157: break;
          case 54: 
            { return THEN;
            }
          case 158: break;
          case 55: 
            { return ELSE;
            }
          case 159: break;
          case 56: 
            { return USES;
            }
          case 160: break;
          case 57: 
            { return FAMILY_TYPE;
            }
          case 161: break;
          case 58: 
            { return FALSE;
            }
          case 162: break;
          case 59: 
            { return IND_HYPO;
            }
          case 163: break;
          case 60: 
            { return WHILE;
            }
          case 164: break;
          case 61: 
            { return FAMILY;
            }
          case 165: break;
          case 62: 
            { return ALTERS;
            }
          case 166: break;
          case 63: 
            { return PRECIS;
            }
          case 167: break;
          case 64: 
            { return CLEARS;
            }
          case 168: break;
          case 65: 
            { return RECORD;
            }
          case 169: break;
          case 66: 
            { return NOTICE;
            }
          case 170: break;
          case 67: 
            { return CONCEPT;
            }
          case 171: break;
          case 68: 
            { return ENSURES;
            }
          case 172: break;
          case 69: 
            { return DEFINES;
            }
          case 173: break;
          case 70: 
            { return MODELED;
            }
          case 174: break;
          case 71: 
            { return UPDATES;
            }
          case 175: break;
          case 72: 
            { return THEOREM;
            }
          case 176: break;
          case 73: 
            { return REALIZED;
            }
          case 177: break;
          case 74: 
            { return REPLACES;
            }
          case 178: break;
          case 75: 
            { return RESTORES;
            }
          case 179: break;
          case 76: 
            { return REQUIRES;
            }
          case 180: break;
          case 77: 
            { return ENHANCED;
            }
          case 181: break;
          case 78: 
            { return EXEMPLAR;
            }
          case 182: break;
          case 79: 
            { return CHANGING;
            }
          case 183: break;
          case 80: 
            { return FACILITY;
            }
          case 184: break;
          case 81: 
            { return IMPLICIT;
            }
          case 185: break;
          case 82: 
            { return CART_PROD;
            }
          case 186: break;
          case 83: 
            { return COROLLARY;
            }
          case 187: break;
          case 84: 
            { return CHAINABLE;
            }
          case 188: break;
          case 85: 
            { return PROCEDURE;
            }
          case 189: break;
          case 86: 
            { return OTHERWISE;
            }
          case 190: break;
          case 87: 
            { return EVALUATES;
            }
          case 191: break;
          case 88: 
            { return PRESERVES;
            }
          case 192: break;
          case 89: 
            { return EXTENSION;
            }
          case 193: break;
          case 90: 
            { return INDUCTIVE;
            }
          case 194: break;
          case 91: 
            { return RECURSIVE;
            }
          case 195: break;
          case 92: 
            { return OPERATION;
            }
          case 196: break;
          case 93: 
            { return DECREASING;
            }
          case 197: break;
          case 94: 
            { return EXTERNALLY;
            }
          case 198: break;
          case 95: 
            { return DEFINITION;
            }
          case 199: break;
          case 96: 
            { return CATEGORICAL;
            }
          case 200: break;
          case 97: 
            { return CONSTRAINTS;
            }
          case 201: break;
          case 98: 
            { return CONVENTIONS;
            }
          case 202: break;
          case 99: 
            { return ENHANCEMENT;
            }
          case 203: break;
          case 100: 
            { return MAINTAINING;
            }
          case 204: break;
          case 101: 
            { return REALIZATION;
            }
          case 205: break;
          case 102: 
            { return WHICH_ENTAILS;
            }
          case 206: break;
          case 103: 
            { return INITIALIZATION;
            }
          case 207: break;
          case 104: 
            { return CORRESPONDENCE;
            }
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
