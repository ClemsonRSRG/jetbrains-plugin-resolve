/* The following code was generated by JFlex 1.4.3 on 6/29/16 11:46 PM */

package edu.clemson.resolve.jetbrains.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import edu.clemson.resolve.jetbrains.ResTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static edu.clemson.resolve.jetbrains.RESOLVEParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/29/16 11:46 PM from the specification file
 * <tt>ResLexer.flex</tt>
 */
class _ResLexer implements FlexLexer, ResTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\12\1\0"+
    "\4\12\1\17\1\26\1\27\1\14\1\12\1\32\1\12\1\16\1\3"+
    "\1\10\11\7\1\30\1\31\1\12\1\35\1\12\1\36\1\15\2\4"+
    "\1\44\1\61\1\62\1\67\2\4\1\71\5\4\1\73\1\47\1\4"+
    "\1\75\1\4\1\77\1\4\1\100\1\101\3\4\1\24\1\20\1\25"+
    "\1\0\1\5\1\23\1\37\1\41\1\53\1\51\1\42\1\13\1\52"+
    "\1\55\1\33\2\4\1\54\1\65\1\56\1\50\1\57\1\76\1\45"+
    "\1\40\1\46\1\64\1\60\1\74\1\63\1\43\1\72\1\21\1\12"+
    "\1\22\54\0\1\4\12\0\1\4\4\0\1\4\5\0\27\4\1\0"+
    "\37\4\1\0\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0"+
    "\1\4\201\0\5\4\1\0\2\4\2\0\4\4\10\0\1\4\1\0"+
    "\3\4\1\0\1\4\1\0\24\4\1\0\30\4\1\34\72\4\1\0"+
    "\213\4\10\0\236\4\11\0\46\4\2\0\1\4\7\0\47\4\110\0"+
    "\33\4\5\0\3\4\55\0\53\4\25\0\12\6\4\0\2\4\1\0"+
    "\143\4\1\0\1\4\17\0\2\4\7\0\2\4\12\6\3\4\2\0"+
    "\1\4\20\0\1\4\1\0\36\4\35\0\131\4\13\0\1\4\16\0"+
    "\12\6\41\4\11\0\2\4\4\0\1\4\5\0\26\4\4\0\1\4"+
    "\11\0\1\4\3\0\1\4\27\0\31\4\107\0\1\4\1\0\13\4"+
    "\127\0\66\4\3\0\1\4\22\0\1\4\7\0\12\4\4\0\12\6"+
    "\1\0\7\4\1\0\7\4\5\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4\20\0\1\4"+
    "\15\0\2\4\1\0\3\4\4\0\12\6\2\4\23\0\6\4\4\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0"+
    "\2\4\37\0\4\4\1\0\1\4\7\0\12\6\2\0\3\4\20\0"+
    "\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\5\4\3\0\1\4\22\0\1\4\17\0\2\4\4\0\12\6\25\0"+
    "\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\5\4\3\0\1\4\36\0\2\4\1\0\3\4\4\0\12\6\1\0"+
    "\1\4\21\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0"+
    "\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0"+
    "\14\4\26\0\1\4\25\0\12\6\25\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\3\0\1\4\32\0\2\4\6\0"+
    "\2\4\4\0\12\6\25\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\12\4\1\0\5\4\3\0\1\4\40\0\1\4\1\0\2\4\4\0"+
    "\12\6\1\0\2\4\22\0\10\4\1\0\3\4\1\0\51\4\2\0"+
    "\1\4\20\0\1\4\21\0\2\4\4\0\12\6\12\0\6\4\5\0"+
    "\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\72\0"+
    "\60\4\1\0\2\4\14\0\7\4\11\0\12\6\47\0\2\4\1\0"+
    "\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0"+
    "\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\4\4\1\0\2\4\11\0\1\4\2\0\5\4\1\0\1\4\11\0"+
    "\12\6\2\0\4\4\40\0\1\4\37\0\12\6\26\0\10\4\1\0"+
    "\44\4\33\0\5\4\163\0\53\4\24\0\1\4\12\6\6\0\6\4"+
    "\4\0\4\4\3\0\1\4\3\0\2\4\7\0\3\4\4\0\15\4"+
    "\14\0\1\4\1\0\12\6\6\0\46\4\1\0\1\4\5\0\1\4"+
    "\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4\1\0\1\4"+
    "\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4"+
    "\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4"+
    "\1\0\4\4\2\0\103\4\45\0\20\4\20\0\125\4\14\0\u026c\4"+
    "\2\0\21\4\1\0\32\4\5\0\113\4\25\0\15\4\1\0\4\4"+
    "\16\0\22\4\16\0\22\4\16\0\15\4\1\0\3\4\17\0\64\4"+
    "\43\0\1\4\4\0\1\4\3\0\12\6\46\0\12\6\6\0\130\4"+
    "\10\0\51\4\1\0\1\4\5\0\106\4\12\0\35\4\51\0\12\6"+
    "\36\4\2\0\5\4\13\0\54\4\25\0\7\4\10\0\12\6\46\0"+
    "\27\4\11\0\65\4\53\0\12\6\6\0\12\6\15\0\1\4\135\0"+
    "\57\4\21\0\7\4\4\0\12\6\51\0\36\4\15\0\2\4\12\6"+
    "\54\4\32\0\44\4\34\0\12\6\3\0\3\4\12\6\44\4\153\0"+
    "\4\4\1\0\4\4\3\0\2\4\11\0\300\4\100\0\u0116\4\2\0"+
    "\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0"+
    "\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0"+
    "\15\4\5\0\3\4\1\0\7\4\164\0\1\4\15\0\1\4\20\0"+
    "\15\4\145\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0"+
    "\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4\1\0"+
    "\13\4\2\0\4\4\5\0\5\4\4\0\1\4\64\0\2\4\173\0"+
    "\1\70\2\11\1\66\374\11\u0900\0\57\4\1\0\57\4\1\0\205\4"+
    "\6\0\4\4\3\0\2\4\14\0\46\4\1\0\1\4\5\0\1\4"+
    "\2\0\70\4\7\0\1\4\20\0\27\4\11\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\120\0\1\4\u01d5\0\2\4\52\0\5\4\5\0\2\4"+
    "\4\0\126\4\6\0\3\4\1\0\132\4\1\0\4\4\5\0\51\4"+
    "\3\0\136\4\21\0\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cd\4"+
    "\63\0\u048d\4\103\0\56\4\2\0\u010d\4\3\0\20\4\12\6\2\4"+
    "\24\0\57\4\20\0\31\4\10\0\106\4\61\0\11\4\2\0\147\4"+
    "\2\0\4\4\1\0\4\4\14\0\13\4\115\0\12\4\1\0\3\4"+
    "\1\0\4\4\1\0\27\4\35\0\64\4\16\0\62\4\34\0\12\6"+
    "\30\0\6\4\3\0\1\4\4\0\12\6\34\4\12\0\27\4\31\0"+
    "\35\4\7\0\57\4\34\0\1\4\12\6\46\0\51\4\27\0\3\4"+
    "\1\0\10\4\4\0\12\6\6\0\27\4\3\0\1\4\5\0\60\4"+
    "\1\0\1\4\3\0\2\4\2\0\5\4\2\0\1\4\1\0\1\4"+
    "\30\0\3\4\2\0\13\4\7\0\3\4\14\0\6\4\2\0\6\4"+
    "\2\0\6\4\11\0\7\4\1\0\7\4\221\0\43\4\15\0\12\6"+
    "\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4"+
    "\46\0\7\4\14\0\5\4\5\0\1\4\1\0\12\4\1\0\15\4"+
    "\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4"+
    "\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\14\4\164\0\5\4"+
    "\1\0\207\4\23\0\12\6\7\0\32\4\6\0\32\4\13\0\131\4"+
    "\3\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\4\1\5\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\5"+
    "\1\24\1\25\21\5\1\26\1\5\1\27\7\5\1\30"+
    "\1\31\3\5\1\4\2\0\1\32\1\33\1\0\1\34"+
    "\1\35\1\36\2\5\1\37\2\5\1\40\13\5\1\41"+
    "\2\5\1\42\16\5\1\43\12\5\2\31\3\5\1\44"+
    "\1\45\1\46\1\1\2\0\1\47\6\5\1\50\51\5"+
    "\1\51\1\5\2\31\1\4\2\5\1\52\1\53\1\0"+
    "\3\5\1\54\1\55\14\5\1\56\1\57\1\60\11\5"+
    "\1\61\4\5\1\62\10\5\1\63\3\5\1\64\2\5"+
    "\1\31\1\0\1\65\1\5\1\66\52\5\1\67\1\70"+
    "\2\5\1\71\15\5\1\72\5\5\1\73\4\5\1\26"+
    "\5\5\1\27\5\5\1\74\4\5\1\75\10\5\1\76"+
    "\13\5\1\77\1\5\1\100\1\5\1\101\7\5\1\102"+
    "\3\5\1\103\1\5\1\104\4\5\1\105\1\106\1\107"+
    "\5\5\1\110\4\5\1\111\1\5\1\112\6\5\1\113"+
    "\2\5\1\114\1\5\1\115\1\5\1\116\1\117\3\5"+
    "\1\120\1\5\1\121\1\5\1\122\1\5\1\123\1\5"+
    "\1\124\2\5\1\125\3\5\1\126\2\5\1\127\4\5"+
    "\1\130\1\131\1\132\1\133\1\5\1\134\1\135\11\5"+
    "\1\136\1\137\1\140\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\102\0\306\0\u0108\0\u014a\0\102"+
    "\0\102\0\u018c\0\u01ce\0\102\0\u0210\0\u0252\0\u0294\0\u02d6"+
    "\0\102\0\102\0\102\0\u0318\0\102\0\u035a\0\102\0\u018c"+
    "\0\u039c\0\u0108\0\102\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6"+
    "\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0738\0\u077a\0\u07bc\0\u07fe\0\102\0\u0840\0\102\0\u0882"+
    "\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\102\0\102"+
    "\0\u0c60\0\u0ca2\0\u0108\0\u0108\0\u0ce4\0\u0d26\0\u0108\0\u0d68"+
    "\0\u0daa\0\u0108\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36"+
    "\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u0108\0\u10c2\0\u1104"+
    "\0\u0108\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2"+
    "\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u0108"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u0108"+
    "\0\u018c\0\102\0\u0bdc\0\u18c0\0\u1902\0\102\0\u1944\0\u1986"+
    "\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u0108\0\u1ad0\0\u1b12\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64"+
    "\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74"+
    "\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184"+
    "\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u0108\0\u2562"+
    "\0\u25a4\0\u018c\0\u17b8\0\u25e6\0\u2628\0\u0108\0\102\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u0108\0\u0108\0\u2772\0\u27b4\0\u27f6"+
    "\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06"+
    "\0\u2a48\0\u0108\0\u0108\0\u0108\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50"+
    "\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u0108\0\u2cdc\0\u2d1e"+
    "\0\u2d60\0\u2da2\0\u0108\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec"+
    "\0\u2f2e\0\u2f70\0\u2fb2\0\u0108\0\u2ff4\0\u3036\0\u3078\0\u0108"+
    "\0\u30ba\0\u30fc\0\102\0\u25a4\0\u0108\0\u313e\0\102\0\u3180"+
    "\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390"+
    "\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0"+
    "\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u37b0"+
    "\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0"+
    "\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0"+
    "\0\u3c12\0\u0108\0\u0108\0\u3c54\0\u3c96\0\u0108\0\u3cd8\0\u3d1a"+
    "\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a"+
    "\0\u3f6c\0\u3fae\0\u3ff0\0\u0108\0\u4032\0\u4074\0\u40b6\0\u40f8"+
    "\0\u413a\0\u0108\0\u417c\0\u41be\0\u4200\0\u4242\0\u0108\0\u4284"+
    "\0\u42c6\0\u4308\0\u434a\0\u438c\0\u0108\0\u43ce\0\u4410\0\u4452"+
    "\0\u4494\0\u44d6\0\u0108\0\u4518\0\u455a\0\u459c\0\u45de\0\u0108"+
    "\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a\0\u47ac\0\u47ee"+
    "\0\u0108\0\u4830\0\u4872\0\u48b4\0\u48f6\0\u4938\0\u497a\0\u49bc"+
    "\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u0108\0\u4b06\0\u0108\0\u4b48"+
    "\0\u0108\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16"+
    "\0\u0108\0\u4d58\0\u4d9a\0\u4ddc\0\u0108\0\u4e1e\0\u4e60\0\u4ea2"+
    "\0\u4ee4\0\u4f26\0\u4f68\0\u0108\0\u0108\0\u0108\0\u4faa\0\u4fec"+
    "\0\u502e\0\u5070\0\u50b2\0\u0108\0\u50f4\0\u5136\0\u5178\0\u51ba"+
    "\0\u0108\0\u51fc\0\u0108\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346"+
    "\0\u5388\0\u0108\0\u53ca\0\u540c\0\u0108\0\u544e\0\u0108\0\u5490"+
    "\0\u0108\0\u0108\0\u54d2\0\u5514\0\u5556\0\u0108\0\u5598\0\u0108"+
    "\0\u55da\0\u0108\0\u561c\0\u0108\0\u565e\0\u0108\0\u56a0\0\u56e2"+
    "\0\u0108\0\u5724\0\u5766\0\u57a8\0\u0108\0\u57ea\0\u582c\0\u0108"+
    "\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u0108\0\u0108\0\u0108\0\u0108"+
    "\0\u5976\0\u0108\0\u0108\0\u59b8\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0"+
    "\0\u5b02\0\u5b44\0\u5b86\0\u5bc8\0\u0108\0\u0108\0\u0108\0\u0108";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\12\1\14\1\15\1\16\1\2"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\12\1\33\1\34\1\6"+
    "\1\35\1\36\1\6\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\6\1\45\1\46\1\47\1\6\1\50\1\6"+
    "\1\51\1\52\1\6\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\6\1\61\1\62\1\63\1\6\1\64\1\65"+
    "\1\66\103\0\1\3\103\0\1\67\6\0\1\12\1\0"+
    "\1\70\1\0\1\12\13\0\1\12\2\0\1\12\50\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\7\0\2\7\74\0\1\12\6\0"+
    "\1\12\1\0\1\12\1\0\1\12\13\0\1\12\2\0"+
    "\1\12\50\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\1\71\5\6\1\72\2\6\1\73\15\6\1\0\1\6"+
    "\1\0\11\6\3\0\1\12\6\0\1\12\1\0\1\12"+
    "\1\0\1\74\13\0\1\12\2\0\1\12\44\0\20\75"+
    "\1\76\61\75\21\0\1\77\102\0\1\100\112\0\1\101"+
    "\103\0\1\102\50\0\5\6\2\0\1\103\17\0\2\6"+
    "\2\0\1\6\1\104\15\6\1\105\6\6\1\106\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\1\6\1\107\13\6\1\110\11\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\1\111\3\6\1\112\22\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\15\6\1\113\1\6\1\114\1\6\1\115\2\6"+
    "\1\116\2\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\1\117\10\6\1\120"+
    "\15\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\3\6\1\121\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\4\6\1\122\1\6\1\123\7\6\1\124"+
    "\10\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\6\6\1\125\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\126\17\0"+
    "\2\6\2\0\7\6\1\127\17\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\130\5\6\1\131\15\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\11\6\1\132\3\6\1\133\1\134\10\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\1\135\26\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\4\6\1\136"+
    "\22\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\6\6\1\137\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\3\6\1\140\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\24\6\1\141\2\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\1\6\1\142"+
    "\16\6\1\143\6\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\1\144\10\6"+
    "\1\145\15\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\1\146\10\6\1\147"+
    "\15\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\150\17\0\2\6\2\0\17\6\1\151\6\6\1\152"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\20\6\1\153\6\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\1\154"+
    "\1\6\2\0\16\6\1\155\10\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\156\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\4\6\1\157"+
    "\11\6\1\160\10\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\1\161\26\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\16\6\1\162\10\6\1\0\1\6"+
    "\1\0\11\6\1\67\1\0\100\67\3\163\1\70\6\163"+
    "\1\70\1\163\1\164\1\163\1\70\13\163\1\70\2\163"+
    "\1\70\44\163\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\15\6\1\165\10\6\1\166\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\11\6\1\167\15\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\6\6\1\170"+
    "\20\6\1\0\1\6\1\0\11\6\3\0\1\12\6\0"+
    "\1\12\1\0\1\12\1\0\1\171\13\0\1\12\2\0"+
    "\1\12\63\0\1\172\75\0\1\75\3\0\1\173\1\75"+
    "\16\0\1\75\1\0\1\75\3\0\2\75\7\0\1\75"+
    "\1\0\1\75\37\0\1\174\14\0\1\175\76\0\1\176"+
    "\55\0\5\6\2\0\1\6\17\0\1\177\1\6\2\0"+
    "\27\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\20\6\1\200\6\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\7\6\1\201\17\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\1\6\1\202\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\1\6\1\203"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\1\6\1\204\10\6\1\205"+
    "\14\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\1\206\26\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\3\6\1\207\3\6\1\210\17\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\6\6\1\211\1\212\17\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\6\6\1\213\10\6\1\214\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\1\6\1\215\16\6\1\216\6\6\1\0\1\6\1\0"+
    "\5\6\1\217\3\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\20\6\1\220\6\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\25\6\1\221\1\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\3\6\1\222"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\3\6\1\223\5\6\1\224"+
    "\15\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\16\6\1\225\10\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\14\6\1\226\12\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\6\6\1\227\10\6\1\230\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\231\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\1\232\26\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\26\6\1\233\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\20\6\1\234\6\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\3\6\1\235"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\236\17\0\2\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\1\237\1\6"+
    "\2\0\7\6\1\240\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\3\6"+
    "\1\241\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\12\6\1\242\14\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\1\243\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\12\6\1\244\14\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\14\6\1\245"+
    "\12\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\6\6\1\246\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\12\6\1\247\14\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\20\6\1\250\6\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\3\6\1\251"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\7\6\1\252\17\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\1\253\1\6\2\0\27\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\14\6"+
    "\1\254\12\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\20\6\1\255\6\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\3\6\1\256\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\6\6\1\257\20\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\1\260\1\6\2\0"+
    "\27\6\1\0\1\6\1\0\11\6\14\163\1\261\70\163"+
    "\1\262\6\163\1\70\1\163\1\263\1\163\1\70\13\163"+
    "\1\70\2\163\1\70\44\163\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\1\6\1\264\25\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\1\265"+
    "\1\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\26\6\1\266"+
    "\1\0\1\6\1\0\11\6\27\0\1\267\70\0\1\270"+
    "\67\0\5\6\2\0\1\6\17\0\2\6\2\0\7\6"+
    "\1\271\17\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\15\6\1\272\11\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\3\6\1\273\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\3\6\1\274\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\3\6"+
    "\1\275\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\25\6\1\276\1\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\15\6\1\277\11\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\26\6\1\300\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\3\6\1\301"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\7\6\1\302\17\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\3\6\1\303\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\11\6\1\304\15\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\1\6\1\305"+
    "\12\6\1\306\12\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\7\6\1\307"+
    "\17\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\15\6\1\310\11\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\25\6\1\311\1\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\312\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\3\6\1\313"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\17\6\1\314\7\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\14\6\1\315\12\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\14\6\1\316\12\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\3\6\1\317"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\6\6\1\320\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\6\6\1\321\20\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\1\6\1\305\17\6\1\322\5\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\1\323\26\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\17\6\1\324\7\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\2\6\1\325\24\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\11\6\1\326\15\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\1\6"+
    "\1\327\25\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\1\330\1\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\1\6\1\331\25\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\332\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\1\6\1\333"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\1\334\26\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\17\6\1\335\7\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\3\6"+
    "\1\336\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\1\337\1\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\1\340\26\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\25\6"+
    "\1\341\1\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\15\6\1\342\11\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\6\6\1\343\20\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\16\6\1\344\10\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\14\6"+
    "\1\345\12\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\11\6\1\346\13\6"+
    "\1\347\1\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\3\6\1\350\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\11\6\1\351\15\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\15\6\1\352\11\6\1\0\1\6\1\0\11\6"+
    "\3\163\1\353\10\163\1\354\65\163\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\3\6\1\355\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\15\6\1\356\11\6\1\0\1\6\1\0"+
    "\11\6\27\0\1\357\56\0\5\6\2\0\1\6\17\0"+
    "\1\360\1\6\2\0\27\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\3\6"+
    "\1\361\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\6\6\1\362\20\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\6\6\1\363\20\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\25\6\1\364\1\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\20\6"+
    "\1\365\6\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\6\6\1\366\10\6"+
    "\1\367\7\6\1\0\1\6\1\0\11\6\4\0\1\6"+
    "\1\370\3\6\2\0\1\6\17\0\2\6\2\0\27\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\13\6\1\371\13\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\15\6\1\372\11\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\7\6"+
    "\1\373\17\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\3\6\1\374\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\11\6\1\375\15\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\1\376\26\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\1\377\1\6\2\0\27\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\1\u0100\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\u0101\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\6\6\1\u0102"+
    "\20\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\3\6\1\u0103\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\3\6\1\u0104\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\u0105\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\6\6\1\u0106"+
    "\20\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\13\6\1\u0107\13\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\12\6\1\u0108\14\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\u0109\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\17\6\1\u010a"+
    "\7\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\7\6\1\u010b\17\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\17\6\1\u010c\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\7\6\1\u010d\17\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\7\6\1\u010e"+
    "\17\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\15\6\1\u010f\11\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\15\6\1\u0110\11\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\15\6\1\u0111\11\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\14\6\1\u0112"+
    "\12\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\1\u0113\1\6\2\0\3\6\1\u0114\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\1\u0115\26\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\16\6\1\u0116\10\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\6\6\1\u0117"+
    "\20\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\6\6\1\u0118\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\6\6\1\u0119\20\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\u011a\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\4\6\1\u011b"+
    "\22\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\1\u011c\26\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\26\6\1\u011d\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\1\6\1\u011e"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\3\6\1\u011f\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\1\u0120\26\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\15\6"+
    "\1\u0121\11\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\17\6\1\u0122\7\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\12\6\1\u0123\14\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\10\6\1\u0124\16\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\11\6"+
    "\1\u0125\15\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\15\6\1\u0126\11\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\6\6\1\u0127\20\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\20\6\1\u0128\6\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\6\6"+
    "\1\u0129\20\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\14\6\1\u012a\12\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\6\6\1\u012b\20\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\1\6\1\u012c\25\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\12\6"+
    "\1\u012d\14\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\27\6\1\0\1\6"+
    "\1\0\3\6\1\u012e\5\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\1\u012f\26\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\1\6\1\u0130\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\17\6\1\u0131"+
    "\7\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\1\6\1\u0132\25\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\1\u0133\1\6\2\0\27\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\1\32"+
    "\26\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\6\6\1\u0134\20\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\1\u0135\1\6\2\0\3\6\1\u0136\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\1\6\1\u0137\25\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\1\6"+
    "\1\u0138\25\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\3\6\1\u0139\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\1\u013a\26\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\u013b\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\1\u013c\1\6\2\0\27\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\15\6\1\u013d\11\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\7\6\1\u013e\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\14\6"+
    "\1\u013f\12\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\26\6\1\u0140\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\7\6\1\u0141\17\6\1\0\1\6\1\0"+
    "\11\6\4\0\1\6\1\u0142\3\6\2\0\1\6\17\0"+
    "\2\6\2\0\27\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\12\6\1\u0143"+
    "\14\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\1\6\1\u0144\25\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\3\6\1\u0145\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\15\6\1\u0146\11\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\3\6\1\u0147"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\1\6\1\u0148\25\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\7\6\1\u0149\17\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\1\u014a\26\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\1\u014b\26\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\3\6\1\u014c\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\6\6\1\u014d\20\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\6\6\1\u014e"+
    "\20\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\1\u014f\26\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\1\u0150\26\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\7\6\1\u0151"+
    "\17\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\3\6\1\u0152\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\3\6\1\u0153\23\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\u0154\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\25\6\1\u0155"+
    "\1\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\1\u0156\1\6\2\0\27\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\1\6\1\u0157\25\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\20\6"+
    "\1\u0158\6\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\7\6\1\u0159\17\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\17\6\1\u015a\7\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\21\6\1\u015b\5\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\7\6"+
    "\1\u015c\17\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\1\6\1\u015d\25\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\1\u015e\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\1\6\1\u015f\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\1\u0160\1\6\2\0\27\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\12\6\1\u0161\14\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\7\6\1\u0162\17\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\1\u0163\1\6\2\0"+
    "\27\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\1\u0164\1\6\2\0\27\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\3\6\1\u0165\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\1\u0166\1\6\2\0"+
    "\27\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\3\6\1\u0167\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\1\u0168\1\6\2\0\27\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\26\6"+
    "\1\u0169\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\1\u016a\1\6\2\0\27\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\17\6\1\u016b\7\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\3\6"+
    "\1\u016c\23\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\6\6\1\u016d\20\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\15\6\1\u016e\11\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\12\6\1\u016f\14\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\11\6"+
    "\1\u0170\15\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\1\u0171\1\6\2\0\27\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\6\6\1\u0172\20\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\1\u0173\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\1\6\1\u0174\25\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\1\6\1\u0175\25\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\1\6\1\u0176\25\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\6\6"+
    "\1\u0177\20\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\1\6\1\u0178\25\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\1\u0179\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\11\6\1\u017a\15\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\1\u017b\1\6\2\0\27\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\13\6\1\u017c\13\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\3\6\1\u017d\23\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\1\u017e\1\6\2\0"+
    "\27\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\11\6\1\u017f\15\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\17\6\1\u0180\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\4\6\1\u0181\22\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\21\6\1\u0182"+
    "\5\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\7\6\1\u0183\17\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\17\6\1\u0184\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\11\6\1\u0185\15\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\17\6\1\u0186"+
    "\7\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\21\6\1\u0187\5\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\27\6\1\0\1\6\1\0\1\6\1\u0188"+
    "\7\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\7\6\1\u0189\17\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\1\6\1\u018a"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\15\6\1\u018b\11\6\1\0"+
    "\1\6\1\0\11\6\4\0\1\6\1\u018c\3\6\2\0"+
    "\1\6\17\0\2\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\12\6\1\u018d\14\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\14\6\1\u018e"+
    "\12\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\4\6\1\u018f\22\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\17\6\1\u0190\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\u0191\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\3\6\1\u0192"+
    "\23\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\17\6\1\u0193\7\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\17\6\1\u0194\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\11\6\1\u0195\15\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\1\6\1\u0196"+
    "\25\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\11\6\1\u0197\15\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\17\6\1\u0198\7\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\1\u0199\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\3\6\1\u019a\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\7\6\1\u019b\17\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\17\6\1\u019c\7\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\7\6"+
    "\1\u019d\17\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\3\6\1\u019e\23\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\1\u019f\26\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\3\6\1\u01a0\23\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\4\6\1\u01a1"+
    "\22\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\2\6\1\u01a2\24\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\1\u01a3\26\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\7\6"+
    "\1\u01a4\17\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\13\6\1\u01a5\13\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\12\6\1\u01a6\14\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\17\6\1\u01a7\7\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\17\6"+
    "\1\u01a8\7\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\17\6\1\u01a9\7\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\1\u01aa\26\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\1\u01ab\26\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\7\6\1\u01ac\17\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\12\6\1\u01ad\14\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\4\6\1\u01ae\22\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\15\6"+
    "\1\u01af\11\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\1\6\1\u01b0\25\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\2\6\2\0\3\6\1\u01b1\23\6\1\0\1\6"+
    "\1\0\11\6\4\0\5\6\2\0\1\6\17\0\2\6"+
    "\2\0\1\6\1\u01b2\25\6\1\0\1\6\1\0\11\6"+
    "\4\0\5\6\2\0\1\6\17\0\2\6\2\0\13\6"+
    "\1\u01b3\13\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\7\6\1\u01b4\17\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\1\u01b5\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\1\u01b6\1\6"+
    "\2\0\27\6\1\0\1\6\1\0\11\6\4\0\5\6"+
    "\2\0\1\6\17\0\2\6\2\0\17\6\1\u01b7\7\6"+
    "\1\0\1\6\1\0\11\6\4\0\5\6\2\0\1\6"+
    "\17\0\1\u01b8\1\6\2\0\27\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\15\6\1\u01b9\11\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\11\6\1\u01ba"+
    "\15\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\14\6\1\u01bb\12\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\11\6\1\u01bc\15\6\1\0\1\6\1\0"+
    "\11\6\4\0\5\6\2\0\1\6\17\0\2\6\2\0"+
    "\1\6\1\u01bd\25\6\1\0\1\6\1\0\11\6\4\0"+
    "\5\6\2\0\1\6\17\0\2\6\2\0\17\6\1\u01be"+
    "\7\6\1\0\1\6\1\0\11\6\4\0\5\6\2\0"+
    "\1\6\17\0\2\6\2\0\3\6\1\u01bf\23\6\1\0"+
    "\1\6\1\0\11\6\4\0\5\6\2\0\1\6\17\0"+
    "\2\6\2\0\17\6\1\u01c0\7\6\1\0\1\6\1\0"+
    "\11\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23562];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\2\11\2\1\1\11"+
    "\4\1\3\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\21\1\1\11\1\1\1\11\15\1\2\0\2\11\1\0"+
    "\70\1\1\11\1\1\2\0\1\11\70\1\1\11\1\0"+
    "\62\1\1\11\1\0\2\1\1\11\321\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ResLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ResLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1758) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return IDENTIFIER;
          }
        case 98: break;
        case 28: 
          { return COLON_EQUALS;
          }
        case 99: break;
        case 25: 
          { return MULTILINE_COMMENT;
          }
        case 100: break;
        case 2: 
          { return NLS;
          }
        case 101: break;
        case 15: 
          { return LPAREN;
          }
        case 102: break;
        case 96: 
          { return CORRESPONDENCE;
          }
        case 103: break;
        case 49: 
          { return HYPO;
          }
        case 104: break;
        case 55: 
          { return WHILE;
          }
        case 105: break;
        case 97: 
          { return IMPLEMENTATION;
          }
        case 106: break;
        case 95: 
          { return INITIALIZATION;
          }
        case 107: break;
        case 27: 
          { return DBL_RBRACE;
          }
        case 108: break;
        case 47: 
          { return TRUE;
          }
        case 109: break;
        case 44: 
          { return BASE;
          }
        case 110: break;
        case 82: 
          { return INDUCTIVE;
          }
        case 111: break;
        case 17: 
          { return COLON;
          }
        case 112: break;
        case 20: 
          { return LAMBDA;
          }
        case 113: break;
        case 50: 
          { return USES;
          }
        case 114: break;
        case 40: 
          { return END;
          }
        case 115: break;
        case 57: 
          { return ALTERS;
          }
        case 116: break;
        case 7: 
          { return MATH_SYMBOL;
          }
        case 117: break;
        case 56: 
          { return FAMILY;
          }
        case 118: break;
        case 63: 
          { return DEFINES;
          }
        case 119: break;
        case 26: 
          { return DBL_LBRACE;
          }
        case 120: break;
        case 76: 
          { return CART_PROD;
          }
        case 121: break;
        case 3: 
          { return WS;
          }
        case 122: break;
        case 89: 
          { return EXTENDED_BY;
          }
        case 123: break;
        case 91: 
          { return CONSTRAINTS;
          }
        case 124: break;
        case 18: 
          { return SEMICOLON;
          }
        case 125: break;
        case 19: 
          { return COMMA;
          }
        case 126: break;
        case 46: 
          { return PARAM_TYPE;
          }
        case 127: break;
        case 23: 
          { return FORALL;
          }
        case 128: break;
        case 65: 
          { return MODELED;
          }
        case 129: break;
        case 69: 
          { return RESTORES;
          }
        case 130: break;
        case 94: 
          { return WHICH_ENTAILS;
          }
        case 131: break;
        case 88: 
          { return IMPLEMENTED;
          }
        case 132: break;
        case 87: 
          { return DEFINITION;
          }
        case 133: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 134: break;
        case 12: 
          { return TICK;
          }
        case 135: break;
        case 67: 
          { return EXEMPLAR;
          }
        case 136: break;
        case 64: 
          { return UPDATES;
          }
        case 137: break;
        case 9: 
          { return DOT;
          }
        case 138: break;
        case 34: 
          { return DO;
          }
        case 139: break;
        case 59: 
          { return CLEARS;
          }
        case 140: break;
        case 58: 
          { return PRECIS;
          }
        case 141: break;
        case 62: 
          { return CONCEPT;
          }
        case 142: break;
        case 4: 
          { return SYMBOL;
          }
        case 143: break;
        case 93: 
          { return MAINTAINING;
          }
        case 144: break;
        case 54: 
          { return IND_HYPO;
          }
        case 145: break;
        case 38: 
          { return CHAR;
          }
        case 146: break;
        case 77: 
          { return COROLLARY;
          }
        case 147: break;
        case 43: 
          { return IND_BASE;
          }
        case 148: break;
        case 53: 
          { return FALSE;
          }
        case 149: break;
        case 92: 
          { return CONVENTIONS;
          }
        case 150: break;
        case 11: 
          { return RBRACE;
          }
        case 151: break;
        case 83: 
          { return OPERATION;
          }
        case 152: break;
        case 79: 
          { return OTHERWISE;
          }
        case 153: break;
        case 52: 
          { return FAMILY_TYPE;
          }
        case 154: break;
        case 74: 
          { return IMPLICIT;
          }
        case 155: break;
        case 85: 
          { return EXTERNALLY;
          }
        case 156: break;
        case 81: 
          { return EXTENSION;
          }
        case 157: break;
        case 42: 
          { return FROM;
          }
        case 158: break;
        case 14: 
          { return RBRACK;
          }
        case 159: break;
        case 84: 
          { return RECURSIVE;
          }
        case 160: break;
        case 33: 
          { return OF;
          }
        case 161: break;
        case 24: 
          { return LINE_COMMENT;
          }
        case 162: break;
        case 6: 
          { return INT;
          }
        case 163: break;
        case 22: 
          { return EXISTS;
          }
        case 164: break;
        case 30: 
          { return IS;
          }
        case 165: break;
        case 10: 
          { return LBRACE;
          }
        case 166: break;
        case 35: 
          { return PROG_IF;
          }
        case 167: break;
        case 13: 
          { return LBRACK;
          }
        case 168: break;
        case 41: 
          { return VAR;
          }
        case 169: break;
        case 78: 
          { return PROCEDURE;
          }
        case 170: break;
        case 8: 
          { return AT;
          }
        case 171: break;
        case 80: 
          { return PRESERVES;
          }
        case 172: break;
        case 45: 
          { return ELSE;
          }
        case 173: break;
        case 37: 
          { return TRIPLE_DOT;
          }
        case 174: break;
        case 29: 
          { return IF;
          }
        case 175: break;
        case 51: 
          { return WITH;
          }
        case 176: break;
        case 68: 
          { return EXTENDED;
          }
        case 177: break;
        case 75: 
          { return EVALUATES;
          }
        case 178: break;
        case 48: 
          { return THEN;
          }
        case 179: break;
        case 39: 
          { return COLON_EQUALS_COLON;
          }
        case 180: break;
        case 70: 
          { return REPLACES;
          }
        case 181: break;
        case 36: 
          { return FOR;
          }
        case 182: break;
        case 61: 
          { return ENSURES;
          }
        case 183: break;
        case 16: 
          { return RPAREN;
          }
        case 184: break;
        case 72: 
          { return CHANGING;
          }
        case 185: break;
        case 73: 
          { return FACILITY;
          }
        case 186: break;
        case 71: 
          { return REQUIRES;
          }
        case 187: break;
        case 86: 
          { return DECREASING;
          }
        case 188: break;
        case 60: 
          { return RECORD;
          }
        case 189: break;
        case 66: 
          { return THEOREM;
          }
        case 190: break;
        case 32: 
          { return BY;
          }
        case 191: break;
        case 31: 
          { return AS;
          }
        case 192: break;
        case 21: 
          { return QV;
          }
        case 193: break;
        case 90: 
          { return CATEGORICAL;
          }
        case 194: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
